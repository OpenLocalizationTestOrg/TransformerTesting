<?xml version="1.0"?><xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd"><file datatype="xml" original="3-connect-your-application-to-simulator.md" source-language="en-US" target-language="en-US"><header><tool tool-id="mdxliff" tool-name="mdxliff"  tool-company="Microsoft" /><xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3-connect-your-application-to-simulator.9a8a2e.cd7b436ac29c60fbb737b2780c083de786401eb0.skl</xliffext:skl_file_name><xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version><xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cd7b436ac29c60fbb737b2780c083de786401eb0</xliffext:ms.openlocfilehash><xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ba7e452ac39d7f09a5646044b44de0e1cdc54982</xliffext:ms.sourcegitcommit><xliffext:ms.openlocfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">learn-pr\advocates\monitor-and-manage-device-with-iot-central\includes\3-connect-your-application-to-simulator.md</xliffext:ms.openlocfilepath></header><body><group id="content" extype="content"><trans-unit id="101" translate="yes" xml:space="preserve">
          <source>In practice, you will connect Azure IoT Central to a physical device, i.e. an IoT enabled coffee machine.</source>
        </trans-unit><trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Here, you'll simualate a device with a Node.js application and connect it to the Azure IoT Central application.</source>
        </trans-unit><trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Telemetry measurements from the simulated coffee machine are sent to IoT Central for monitoring and analysis.</source>
        </trans-unit><trans-unit id="104" translate="yes" xml:space="preserve">
          <source>An illustration showing a Coffee machine.</source>
        </trans-unit><trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Add the coffee machine in IoT Central</source>
        </trans-unit><trans-unit id="106" translate="yes" xml:space="preserve">
          <source>To add your coffee machine to your application, you use the <bpt id="p1">**</bpt>Connected Coffee Maker<ept id="p1">**</ept> device template you created in the previous unit.</source>
        </trans-unit><trans-unit id="107" translate="yes" xml:space="preserve">
          <source>To add a new device, choose <bpt id="p1">**</bpt>Device Explorer<ept id="p1">**</ept> in the left navigation menu.</source>
        </trans-unit><trans-unit id="108" translate="yes" xml:space="preserve">
          <source>To start connecting your coffee machine, choose <bpt id="p1">**</bpt>+ New<ept id="p1">**</ept>, <bpt id="p2">**</bpt>Real<ept id="p2">**</ept>, and then <bpt id="p3">**</bpt>Create<ept id="p3">**</ept>.</source>
        </trans-unit><trans-unit id="109" translate="yes" xml:space="preserve">
          <source>When you're finished, you see a list of devices you've created using the same Connected Coffee Maker template.</source>
        </trans-unit><trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The Connected Coffee Maker is added to the list when you choose <bpt id="p1">**</bpt>+ New<ept id="p1">**</ept> and then <bpt id="p2">**</bpt>Real<ept id="p2">**</ept>.</source>
        </trans-unit><trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The Connected Coffee Maker (Simulate) is automatically created by IoT Central for testing purposes.</source>
        </trans-unit><trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Optionally, you can differentiate the newly added coffee machine by appending the word “Real” in its name.</source>
        </trans-unit><trans-unit id="113" translate="yes" xml:space="preserve">
          <source>To rename your new device, choose the device and edit the name in the name field.</source>
        </trans-unit><trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Screenshot of the connected coffee maker device template with Connect this device option highlighted.</source>
        </trans-unit><trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Note the location of <bpt id="p1">**</bpt>Connect this device<ept id="p1">**</ept> for connecting your coffee machine in the next section.</source>
        </trans-unit><trans-unit id="116" translate="yes" xml:space="preserve">
          <source>For now, the screen displays "Missing Data" because you haven't connected to the coffee machine.</source>
        </trans-unit><trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The real telemetry begins to populate the screen once the connection is made.</source>
        </trans-unit><trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Generate connection string for the coffee machine from your application</source>
        </trans-unit><trans-unit id="119" translate="yes" xml:space="preserve">
          <source>You embed the connection string for your real coffee machine in the code that runs on the device.</source>
        </trans-unit><trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The connection string enables the coffee machine to connect securely to your Azure IoT Central application.</source>
        </trans-unit><trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Every device instance has a unique connection string.</source>
        </trans-unit><trans-unit id="122" translate="yes" xml:space="preserve">
          <source>In the next steps, you generate the connection string as part of creating your node.js application.</source>
        </trans-unit><trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Create a Node.js application</source>
        </trans-unit><trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The following steps show you how to create a client application that implements the coffee machine you added to the application.</source>
        </trans-unit><trans-unit id="125" translate="yes" xml:space="preserve">
          <source>In this exercise, we'll create the app in the Azure Cloud Shell so that you don't have to install anything on your local machine.</source>
        </trans-unit><trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Execute the following command in the Azure Cloud Shell to create a <ph id="ph1">`coffee-maker`</ph> folder and navigate to it:</source>
        </trans-unit><trans-unit id="127" translate="yes" xml:space="preserve">
          <source>From the <ph id="ph1">`coffee-maker`</ph> folder in Cloud Shell, execute the following command to install the DPS key generator:</source>
        </trans-unit><trans-unit id="128" translate="yes" xml:space="preserve">
          <source>This command installs the dps-keygen package to our local folder, <ph id="ph1">`coffee-maker`</ph>.</source>
        </trans-unit><trans-unit id="129" translate="yes" xml:space="preserve">
          <source>We leave out the <ph id="ph1">`-g`</ph> option because we don't have permissions to install as a global package.</source>
        </trans-unit><trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Execute the following command in the Cloud Shell to download the DPS connection string utility from GitHub:</source>
        </trans-unit><trans-unit id="131" translate="yes" xml:space="preserve">
          <source>We downloaded the Linux version of <bpt id="p1">**</bpt>dps_cstr<ept id="p1">**</ept> because we're running in the Cloud Shell.</source>
        </trans-unit><trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Execute the following command to give <ph id="ph1">`dps_cstr`</ph> execute permissions:</source>
        </trans-unit><trans-unit id="133" translate="yes" xml:space="preserve">
          <source>To generate a connection string for our device, we need three pieces of information from the Azure IoT Central portal:</source>
        </trans-unit><trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Scope ID<ept id="p1">**</ept></source>
        </trans-unit><trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Device ID<ept id="p1">**</ept></source>
        </trans-unit><trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Primary Key<ept id="p1">**</ept></source>
        </trans-unit><trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Return to the IoT Central portal.</source>
        </trans-unit><trans-unit id="138" translate="yes" xml:space="preserve">
          <source>On the device screen for the <bpt id="p1">*</bpt>Connected Coffee Maker - Real<ept id="p1">*</ept> device, select <bpt id="p2">**</bpt>Connect<ept id="p2">**</ept> in the top right of the screen.</source>
        </trans-unit><trans-unit id="139" translate="yes" xml:space="preserve">
          <source>On the Device Connection dialog that opens, save the values <bpt id="p1">**</bpt>Scope ID<ept id="p1">**</ept>, <bpt id="p2">**</bpt>Device ID<ept id="p2">**</ept> and <bpt id="p3">**</bpt>Primary Key<ept id="p3">**</ept> somewhere, because we'll use them later in this exercise.</source>
        </trans-unit><trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Execute the following command in the Cloud Shell, replacing <bpt id="p1">**</bpt>&lt;scope_id&gt;<ept id="p1">**</ept>, <bpt id="p2">**</bpt>&lt;device_id&gt;<ept id="p2">**</ept>, and <bpt id="p3">**</bpt>&lt;primary_key&gt;<ept id="p3">**</ept> with the values you saved in the last step.</source>
        </trans-unit><trans-unit id="141" translate="yes" xml:space="preserve">
          <source>This command generates a connection string based on the values you gave it and writes them to a file that we've named <bpt id="p1">**</bpt>connection.txt<ept id="p1">**</ept>.</source>
        </trans-unit><trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The command <ph id="ph1">`dps_cstr`</ph> is not in your PATH in the shell.</source>
        </trans-unit><trans-unit id="143" translate="yes" xml:space="preserve">
          <source>So, make sure to call it with <ph id="ph1">`./dps_cstr`</ph></source>
        </trans-unit><trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Open the integrated code editor in the Cloud Shell by running the following command:</source>
        </trans-unit><trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Select <bpt id="p1">**</bpt>connection.txt<ept id="p1">**</ept> from the list of files in the <bpt id="p2">**</bpt>FILES<ept id="p2">**</ept> menu of the editor.</source>
        </trans-unit><trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Verify that <bpt id="p1">**</bpt>connection.txt<ept id="p1">**</ept> contains a connection string that starts with <ph id="ph1">``HostName=``</ph>.</source>
        </trans-unit><trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Close the editor by selecting <bpt id="p1">**</bpt>Close Editor<ept id="p1">**</ept> from the menu (<bpt id="p2">*</bpt>...<ept id="p2">*</ept>) at the top right of the editor.</source>
        </trans-unit><trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Execute the following command in the Cloud Shell to initialize a Node.js project in our <ph id="ph1">`coffee-maker`</ph> folder:</source>
        </trans-unit><trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The init script prompts you to enter project properties.</source>
        </trans-unit><trans-unit id="150" translate="yes" xml:space="preserve">
          <source>For this exercise, press ENTER to use all default values.</source>
        </trans-unit><trans-unit id="151" translate="yes" xml:space="preserve">
          <source>To install the necessary packages, run the following command in our <ph id="ph1">`coffee-maker`</ph> folder:</source>
        </trans-unit><trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Execute the following command to create a new file in the Cloud Shell:</source>
        </trans-unit><trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Open the integrated code editor by executing the following at the command line in the Cloud Shell:</source>
        </trans-unit><trans-unit id="154" translate="yes" xml:space="preserve">
          <source>When the code editor opens, select the refresh button on the <bpt id="p1">**</bpt>FILES<ept id="p1">**</ept> list and select our new file <bpt id="p2">**</bpt>coffeeMaker.js<ept id="p2">**</ept>.</source>
        </trans-unit><trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Copy and paste the following code into the empty editor window:</source>
        </trans-unit><trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Our coffee machine is written in Node.js.</source>
        </trans-unit><trans-unit id="157" translate="yes" xml:space="preserve">
          <source>It first connects to Azure IoT Central.</source>
        </trans-unit><trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Then the app sends initial properties to Azure IoT Central, synchronizes settings, registers two command handlers for maintenance and brewing, and finally starts the timer for sending the telemetry information every second.</source>
        </trans-unit><trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Update the placeholder <ph id="ph1">`{your device connection string}`</ph> at the top of this code with the connection string you created earlier and saved in <bpt id="p1">**</bpt>connection.txt<ept id="p1">**</ept>.</source>
        </trans-unit><trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The connection string begins with <ph id="ph1">`HostName=`</ph>.</source>
        </trans-unit><trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Select the three dots <ph id="ph1">`...`</ph> to the top right of the editor to expand the editor menu.</source>
        </trans-unit><trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Then select <bpt id="p1">**</bpt>Save<ept id="p1">**</ept> to save the edits we made to `coffeeMaker.js'</source>
        </trans-unit><trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Execute the following command in the Cloud Shell window to start the app:</source>
        </trans-unit><trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Verify that the app starts in the Cloud Shell window with the message <bpt id="p1">*</bpt>Device successfully connected to Azure IoT Central<ept id="p1">*</ept> along with <bpt id="p2">*</bpt>Telemetry send:<ept id="p2">*</ept> messages.</source>
        </trans-unit><trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Congratulations!</source>
        </trans-unit><trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Your app is up and running and communicating with IoT Central!</source>
        </trans-unit></group></body></file></xliff>