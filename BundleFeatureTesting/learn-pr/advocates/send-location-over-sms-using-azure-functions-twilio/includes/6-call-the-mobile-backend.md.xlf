<?xml version="1.0"?><xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd"><file datatype="xml" original="6-call-the-mobile-backend.md" source-language="en-US" target-language="en-US"><header><tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1931010" tool-company="Microsoft" /><xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6-call-the-mobile-backend.dec9c94b0cc7cb2cfe8a836ef91e61432fa42d12.skl</xliffext:skl_file_name><xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version><xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">587caf3e657c6828609df5fb8a74c6ae61bc3f3b</xliffext:ms.openlocfilehash><xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">05/13/2019</xliffext:ms.lasthandoff><xliffext:ms.openlocfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">learn-pr\advocates\send-location-over-sms-using-azure-functions-twilio\includes\6-call-the-mobile-backend.md</xliffext:ms.openlocfilepath></header><body><group id="content" extype="content"><trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Your mobile app is now up and running and you've created the initial version of the .</source>
        </trans-unit><trans-unit id="102" translate="yes" xml:space="preserve">
          <source>In this unit, you'll call the Azure Functions from the mobile app, passing in the user's location and the list of phone numbers the user wants to send SMS to.</source>
        </trans-unit><trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Call the Azure Functions from the mobile app</source>
        </trans-unit><trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Open the <ph id="ph1">`MainViewModel`</ph> in the ImHere project.</source>
        </trans-unit><trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Add a using directive for <ph id="ph1">`System.Net.Http`</ph>, <ph id="ph2">`Newtonsoft.Json`</ph>, and <ph id="ph3">`ImHere.Data`</ph>.</source>
        </trans-unit><trans-unit id="106" translate="yes" xml:space="preserve">
          <source>In this class, add a private <ph id="ph1">`HttpClient`</ph> field called <ph id="ph2">`client`</ph>.</source>
        </trans-unit><trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Add a constant field for the base URL for the function.</source>
        </trans-unit><trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Set this to the address that the local Azure Functions runtime is listening on.</source>
        </trans-unit><trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Once the function is deployed to Azure, this constant can be changed to be the Azure URL.</source>
        </trans-unit><trans-unit id="110" translate="yes" xml:space="preserve">
          <source>In the <ph id="ph1">`SendLocation`</ph> method create a new instance of <ph id="ph2">`PostData`</ph> using the location and the list of phone numbers entered by the user.</source>
        </trans-unit><trans-unit id="111" translate="yes" xml:space="preserve">
          <source>This assumes that the phone numbers have been entered in the correct format, one per line in the <ph id="ph1">`Editor`</ph> control.</source>
        </trans-unit><trans-unit id="112" translate="yes" xml:space="preserve">
          <source>In a production-quality app, there would be validation around this to ensure one or more phone numbers were entered and were in the correct format.</source>
        </trans-unit><trans-unit id="113" translate="yes" xml:space="preserve">
          <source>To serialize the <ph id="ph1">`PostData`</ph> as JSON, the easiest way is to use the Newtonsoft.Json NuGet package.</source>
        </trans-unit><trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Add this NuGet package to the <ph id="ph1">`ImHere`</ph>.</source>
        </trans-unit><trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Right-click <bpt id="p1">**</bpt>Dependencies<ept id="p1">**</ept> under the ImHere project and select <bpt id="p2">_</bpt>Manage NuGet Packages...<ept id="p2">_</ept>.</source>
        </trans-unit><trans-unit id="116" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Browse<ept id="p1">**</ept> tab, search for Newtonsoft.Json package and click <bpt id="p2">**</bpt>Install<ept id="p2">**</ept>.</source>
        </trans-unit><trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The NuGet package will be added to your project.</source>
        </trans-unit><trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Serialize the <ph id="ph1">`PostData`</ph> to a <ph id="ph2">`string`</ph> using the <ph id="ph3">`JsonConvert`</ph> static class.</source>
        </trans-unit><trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Encode this string into a <ph id="ph1">`StringContent`</ph> class so that it can be passed to the Azure Functions as JSON.</source>
        </trans-unit><trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Post this data to the function and get the result back.</source>
        </trans-unit><trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Azure Functions are accessed using <ph id="ph1">`/api/&lt;function name&gt;`</ph>, so assuming the port chosen by the local Functions runtime is 7071, the <ph id="ph2">`SendLocation`</ph> function will be accessible at <ph id="ph3">`http://localhost:7071/api/SendLocation`</ph>.</source>
        </trans-unit><trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Depending on the result, show a message on the UI.</source>
        </trans-unit><trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The following is the full code for the MainViewModel, including the new fields for the <ph id="ph1">`SendLocation`</ph> method.</source>
        </trans-unit><trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Testing it out</source>
        </trans-unit><trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Make sure that you function is still running locally and the port matches the <ph id="ph1">`SendLocation`</ph> method.</source>
        </trans-unit><trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Set the UWP app as the startup app and run it.</source>
        </trans-unit><trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Click the <bpt id="p1">**</bpt>Send Location<ept id="p1">**</ept> button.</source>
        </trans-unit><trans-unit id="128" translate="yes" xml:space="preserve">
          <source>You'll see output in the Functions runtime console window showing the function being called, and the logging showing the generated URL.</source>
        </trans-unit><trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Output of the function being called</source>
        </trans-unit><trans-unit id="130" translate="yes" xml:space="preserve">
          <source>To test the URL generation, paste it from the console into a browser.</source>
        </trans-unit><trans-unit id="131" translate="yes" xml:space="preserve">
          <source>It should show your current location.</source>
        </trans-unit><trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The location you'll see is the location where the app is running, so will be near to the data center that the VM is running from.</source>
        </trans-unit><trans-unit id="133" translate="yes" xml:space="preserve">
          <source>If this app was running on your local device then it would show your location.</source>
        </trans-unit><trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Summary</source>
        </trans-unit><trans-unit id="135" translate="yes" xml:space="preserve">
          <source>In this unit, you learned how to call the Azure Functions from the mobile app.</source>
        </trans-unit><trans-unit id="136" translate="yes" xml:space="preserve">
          <source>This call passed the user's location and the phone numbers they entered as JSON.</source>
        </trans-unit><trans-unit id="137" translate="yes" xml:space="preserve">
          <source>In the next unit, you'll bind your function to Twilio to send this location as an SMS message.</source>
        </trans-unit></group></body></file></xliff>