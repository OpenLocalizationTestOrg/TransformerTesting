<?xml version="1.0"?><xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd"><file datatype="xml" original="5-create-an-azure-functions-mobile-backend.md" source-language="en-US" target-language="en-US"><header><tool tool-id="mdxliff" tool-name="mdxliff"  tool-company="Microsoft" /><xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5-create-an-azure-functions-mobile-backend.360f83.dbc478fa5bbe3d36bcf7e479a205a11410406130.skl</xliffext:skl_file_name><xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version><xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dbc478fa5bbe3d36bcf7e479a205a11410406130</xliffext:ms.openlocfilehash><xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ba7e452ac39d7f09a5646044b44de0e1cdc54982</xliffext:ms.sourcegitcommit><xliffext:ms.openlocfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">learn-pr\advocates\send-location-over-sms-using-azure-functions-twilio\includes\5-create-an-azure-functions-mobile-backend.md</xliffext:ms.openlocfilepath></header><body><group id="content" extype="content"><trans-unit id="101" translate="yes" xml:space="preserve">
          <source>At this point, the app is working to get the user's location and is ready to be sent to the Azure Functions.</source>
        </trans-unit><trans-unit id="102" translate="yes" xml:space="preserve">
          <source>In this unit, you build your own Azure Functions.</source>
        </trans-unit><trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Create an Azure Functions project</source>
        </trans-unit><trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Right-click on the <ph id="ph1">`ImHere`</ph> solution and select <bpt id="p1">*</bpt>Add &gt; New Project...<ept id="p1">*</ept>.</source>
        </trans-unit><trans-unit id="105" translate="yes" xml:space="preserve">
          <source>From the tree on the left-hand side, select <bpt id="p1">*</bpt>Visual C# &gt; Cloud<ept id="p1">*</ept>, and then select <bpt id="p2">*</bpt>Azure Functions<ept id="p2">*</ept> from the panel in the center.</source>
        </trans-unit><trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Name the project "ImHere.Functions", and then click <bpt id="p1">**</bpt>OK<ept id="p1">**</ept>.</source>
        </trans-unit><trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The Add New Project dialog</source>
        </trans-unit><trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>New Project<ept id="p1">**</ept> configuration dialog will appear, and it may show a spinner in the bottom-left whilst loading updated templates.</source>
        </trans-unit><trans-unit id="109" translate="yes" xml:space="preserve">
          <source>If you see this, wait until this has finished loading, then if updated templates are available, click the <bpt id="p1">**</bpt>Refresh<ept id="p1">**</ept> option that will appear to ensure you get the latest Function templates.</source>
        </trans-unit><trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The new project dialog loading the latest templates</source>
        </trans-unit><trans-unit id="111" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>New Project<ept id="p1">**</ept> configuration dialog, ensure the Functions version is set to <bpt id="p2">*</bpt>Azure Functions v2 (.NET Standard)<ept id="p2">*</ept> (<bpt id="p3">**</bpt>NOT<ept id="p3">**</ept> <bpt id="p4">_</bpt>v1 (.NET Framework)<ept id="p4">_</ept>).</source>
        </trans-unit><trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Select <bpt id="p1">*</bpt>Http Trigger<ept id="p1">*</ept>, leave the storage account set to <bpt id="p2">*</bpt>Storage Emulator<ept id="p2">*</ept>, and set the access rights to <bpt id="p3">*</bpt>Anonymous<ept id="p3">*</ept>.</source>
        </trans-unit><trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Then click <bpt id="p1">**</bpt>OK<ept id="p1">**</ept>.</source>
        </trans-unit><trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The Azure Functions project configuration dialog</source>
        </trans-unit><trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The new project will be created and have a default function called <ph id="ph1">`Function1`</ph>.</source>
        </trans-unit><trans-unit id="116" translate="yes" xml:space="preserve">
          <source>This function was created with anonymous access.</source>
        </trans-unit><trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Once published to Azure, anybody who knows the URL will be able to call this function.</source>
        </trans-unit><trans-unit id="118" translate="yes" xml:space="preserve">
          <source>In a real-world scenario, you would protect this with some form of authentication, such as <bpt id="p1">[</bpt>Azure App Service authentication<ept id="p1">](https://docs.microsoft.com/azure/app-service/app-service-authentication-overview?azure-portal=true)</ept> or <bpt id="p2">[</bpt>Azure Active Directory B2C<ept id="p2">](https://docs.microsoft.com/azure/active-directory-b2c?azure-portal=true)</ept>.</source>
        </trans-unit><trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Create the function</source>
        </trans-unit><trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The Azure Functions project is created with a single HTTP trigger function called <ph id="ph1">`Function1`</ph>.</source>
        </trans-unit><trans-unit id="121" translate="yes" xml:space="preserve">
          <source>HTTP triggers allow you to invoke your functions using HTTP requests.</source>
        </trans-unit><trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The function itself is implemented as a static <ph id="ph1">`Run`</ph> method in the <ph id="ph2">`Function1`</ph> class.</source>
        </trans-unit><trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Rename the file in Solution Explorer from "Function1.cs" to "SendLocation.cs".</source>
        </trans-unit><trans-unit id="124" translate="yes" xml:space="preserve">
          <source>When prompted to rename all references to the code element <ph id="ph1">`Function1`</ph>, click <bpt id="p1">**</bpt>Yes<ept id="p1">**</ept>.</source>
        </trans-unit><trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Rename the function name in the attribute to "SendLocation".</source>
        </trans-unit><trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Delete the contents of the function, except the first line that writes an information message to the logger.</source>
        </trans-unit><trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Create a class to share data between the mobile app and function</source>
        </trans-unit><trans-unit id="128" translate="yes" xml:space="preserve">
          <source>When data is sent to the Azure Functions, it will be sent as JSON.</source>
        </trans-unit><trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The mobile app will serialize data into JSON and the function will deserialize from JSON.</source>
        </trans-unit><trans-unit id="130" translate="yes" xml:space="preserve">
          <source>To keep this data consistent between the mobile app and the function, create a new project that contains a class to hold the location and phone number data.</source>
        </trans-unit><trans-unit id="131" translate="yes" xml:space="preserve">
          <source>This project will then be referenced by the app and function.</source>
        </trans-unit><trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Create a new project under the <ph id="ph1">`ImHere`</ph> solution by right-clicking on the solution and selecting <bpt id="p1">*</bpt>Add &gt; New Project...<ept id="p1">*</ept>.</source>
        </trans-unit><trans-unit id="133" translate="yes" xml:space="preserve">
          <source>From the tree on the left-hand side, select <bpt id="p1">*</bpt>Visual C# &gt; .NET Standard<ept id="p1">*</ept>, and then select <bpt id="p2">*</bpt>Class Library (.NET Standard)<ept id="p2">*</ept> from the panel in the center.</source>
        </trans-unit><trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Name the project "ImHere.Data", and then click <bpt id="p1">**</bpt>OK<ept id="p1">**</ept>.</source>
        </trans-unit><trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The Add New Project dialog</source>
        </trans-unit><trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Delete the auto-generated "Class1.cs" file.</source>
        </trans-unit><trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Right-click on the <ph id="ph1">`ImHere.Data`</ph> project and select <bpt id="p1">*</bpt>Add &gt; Class...<ept id="p1">*</ept> to create a new class.</source>
        </trans-unit><trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Name the new class "PostData" and click <bpt id="p1">**</bpt>OK<ept id="p1">**</ept>.</source>
        </trans-unit><trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Mark this new class as <ph id="ph1">`public`</ph>.</source>
        </trans-unit><trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Add <ph id="ph1">`double`</ph> properties for the latitude and longitude, as well as a <ph id="ph2">`string[]`</ph> property for the phone numbers to send to.</source>
        </trans-unit><trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Add a reference to this project in both the <ph id="ph1">`ImHere.Functions`</ph> and <ph id="ph2">`ImHere`</ph> projects by right-clicking on the project and then selecting <bpt id="p1">*</bpt>Add-&gt;Reference...<ept id="p1">*</ept>. Select <bpt id="p2">*</bpt>Projects<ept id="p2">*</ept> from the tree on the left-hand side, and then check the box next to <bpt id="p3">*</bpt>ImHere.Data<ept id="p3">*</ept>.</source>
        </trans-unit><trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Configuring project references</source>
        </trans-unit><trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Read the data sent to the function</source>
        </trans-unit><trans-unit id="144" translate="yes" xml:space="preserve">
          <source>In the Azure Functions, the <ph id="ph1">`req`</ph> parameter contains the HTTP request that was made and the data inside this request will be a JSON serialized <ph id="ph2">`PostData`</ph> object.</source>
        </trans-unit><trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Open the <ph id="ph1">`SendLocation`</ph> class in the <ph id="ph2">`ImHere.Functions`</ph> project.</source>
        </trans-unit><trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Read the contents of the HTTP request into a string, then deserialize it into a <ph id="ph1">`PostData`</ph> object, adding a using directive for the <ph id="ph2">`ImHere.Data`</ph> namespace.</source>
        </trans-unit><trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Construct a Google Maps URL using the latitude and longitude from the <ph id="ph1">`PostData`</ph>.</source>
        </trans-unit><trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Log the URL.</source>
        </trans-unit><trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Return a 200 status code to show the function completed without error.</source>
        </trans-unit><trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The complete function is shown below.</source>
        </trans-unit><trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Run the Azure Functions locally</source>
        </trans-unit><trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Functions can be run locally using a local storage account and local Azure Functions runtime.</source>
        </trans-unit><trans-unit id="153" translate="yes" xml:space="preserve">
          <source>This local runtime allows you to test out your function before deploying it to Azure.</source>
        </trans-unit><trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Right-click on the <ph id="ph1">`ImHere.Functions`</ph> project in the solution explorer, and then select <bpt id="p1">*</bpt>Set as StartUp project<ept id="p1">*</ept>.</source>
        </trans-unit><trans-unit id="155" translate="yes" xml:space="preserve">
          <source>From the <bpt id="p1">*</bpt>Debug<ept id="p1">*</ept> menu, select <bpt id="p2">*</bpt>Start Without Debugging<ept id="p2">*</ept>.</source>
        </trans-unit><trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The local Azure Functions runtime will launch inside a console window and start your function, listening on an available port on <ph id="ph1">`localhost`</ph>.</source>
        </trans-unit><trans-unit id="157" translate="yes" xml:space="preserve">
          <source>If you see a dialog asking for firewall access, allow access to private networks (the default option).</source>
        </trans-unit><trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The Azure Functions running locally</source>
        </trans-unit><trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Take a note of the port that the function is listening on.</source>
        </trans-unit><trans-unit id="160" translate="yes" xml:space="preserve">
          <source>You'll need this in the next unit to test out the mobile app.</source>
        </trans-unit><trans-unit id="161" translate="yes" xml:space="preserve">
          <source>In the image above, the function is listening on port <bpt id="p1">**</bpt>7071<ept id="p1">**</ept>.</source>
        </trans-unit><trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Leave the function running so that you can test the mobile app in the next unit.</source>
        </trans-unit><trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Summary</source>
        </trans-unit><trans-unit id="164" translate="yes" xml:space="preserve">
          <source>In this unit, you learned how to create an Azure Functions project in Visual Studio, added a shared project with a data object to be shared between the mobile app and the function, and learned how to create a basic implementation of the function to deserialize the data passed in.</source>
        </trans-unit><trans-unit id="165" translate="yes" xml:space="preserve">
          <source>You also learned how to run the Azure Functions locally.</source>
        </trans-unit><trans-unit id="166" translate="yes" xml:space="preserve">
          <source>In the next unit, you'll call the Azure Functions from the mobile app.</source>
        </trans-unit></group></body></file></xliff>