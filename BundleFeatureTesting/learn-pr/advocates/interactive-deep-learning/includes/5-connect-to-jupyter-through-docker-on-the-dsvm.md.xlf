<?xml version="1.0"?><xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd"><file datatype="xml" original="5-connect-to-jupyter-through-docker-on-the-dsvm.md" source-language="en-US" target-language="en-US"><header><tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1931010" tool-company="Microsoft" /><xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5-connect-to-jupyter-through-docker-on-the-dsvm.cf88748380650f65c922c67661b70de70491d0ae.skl</xliffext:skl_file_name><xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version><xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8bfa0c72512a79d87afbb70641377162f89be6c6</xliffext:ms.openlocfilehash><xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">05/13/2019</xliffext:ms.lasthandoff><xliffext:ms.openlocfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">learn-pr\advocates\interactive-deep-learning\includes\5-connect-to-jupyter-through-docker-on-the-dsvm.md</xliffext:ms.openlocfilepath></header><body><group id="content" extype="content"><trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Now that you have your Data Science Virtual Machine up and running, you decide to train your first deep learning model.</source>
        </trans-unit><trans-unit id="102" translate="yes" xml:space="preserve">
          <source>You want to run your experiments in isolation from everything else on your server.</source>
        </trans-unit><trans-unit id="103" translate="yes" xml:space="preserve">
          <source>To do that, you run them within a Docker container.</source>
        </trans-unit><trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Connect to the VM with ssh</source>
        </trans-unit><trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Make sure you're still connected to your VM through ssh.</source>
        </trans-unit><trans-unit id="106" translate="yes" xml:space="preserve">
          <source>If not, just run this command again to remote back into the virtual machine.</source>
        </trans-unit><trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Execute the following command in Azure Cloud Shell to sign into the VM.</source>
        </trans-unit><trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Replace  <ph id="ph1">`&lt;USERNAME&gt;`</ph> with the admin account name you defined when creating the VM.</source>
        </trans-unit><trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Replace <ph id="ph1">`&lt;IP&gt;`</ph> with the IP address of the VM you saved in the preceding exercise.</source>
        </trans-unit><trans-unit id="110" translate="yes" xml:space="preserve">
          <source>When prompted, enter your password for the admin account to complete the sign-in process.</source>
        </trans-unit><trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Run a Jupyter Notebook server in a Docker container in the VM</source>
        </trans-unit><trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Since we only have an admin, or root, account on our VM, we have to run all Docker commands as root using <ph id="ph1">`sudo`</ph></source>
        </trans-unit><trans-unit id="113" translate="yes" xml:space="preserve">
          <source>To see what Docker containers exist on the VM, run the following command at the command prompt.</source>
        </trans-unit><trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Run the following command at the command prompt to create a new container for our experiments.</source>
        </trans-unit><trans-unit id="115" translate="yes" xml:space="preserve">
          <source>This command will run for quite a while.</source>
        </trans-unit><trans-unit id="116" translate="yes" xml:space="preserve">
          <source>So, while we have some time, let's discuss what the command does.</source>
        </trans-unit><trans-unit id="117" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`docker run`</ph> runs a command in a new container.</source>
        </trans-unit><trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The Docker image being used is pytorch/pytorch.</source>
        </trans-unit><trans-unit id="119" translate="yes" xml:space="preserve">
          <source>It first creates a writeable container layer over the specified image, and then starts it using the specified command.</source>
        </trans-unit><trans-unit id="120" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`--rm`</ph> will remove the container once it exits.</source>
        </trans-unit><trans-unit id="121" translate="yes" xml:space="preserve">
          <source>If you want to keep the container around, drop this argument.</source>
        </trans-unit><trans-unit id="122" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`--entrypoint 'bin/sh'`</ph> overwrites the default entry point of the image to be the Bash shell</source>
        </trans-unit><trans-unit id="123" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`-c`</ph> defines what command to run when the container starts.</source>
        </trans-unit><trans-unit id="124" translate="yes" xml:space="preserve">
          <source>In this case, it's running three commands:</source>
        </trans-unit><trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Installs Jupyter and matplotlib</source>
        </trans-unit><trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Copies a notebook (cifar10_tutorial.ipynb) from pytorch.org to a file in the container called <ph id="ph1">`first_pytorch_classifier.ipynb`</ph></source>
        </trans-unit><trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Starts the notebook server in the container in the same way as the preceding exercise.</source>
        </trans-unit><trans-unit id="128" translate="yes" xml:space="preserve">
          <source>No browser is started, allow the notebook to be accessed by root and listen on all ports.</source>
        </trans-unit><trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The notebook server listens on all ports for that container.</source>
        </trans-unit><trans-unit id="130" translate="yes" xml:space="preserve">
          <source>But, how will traffic come from outside the container?</source>
        </trans-unit><trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`-p 8888:8888`</ph> argument binds port <ph id="ph2">`8888`</ph> of the container to TCP port 8888 on the host machine.</source>
        </trans-unit><trans-unit id="132" translate="yes" xml:space="preserve">
          <source>So, traffic coming to the VM over port 8888 will be picked up by the container.</source>
        </trans-unit><trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Connect to the Jupyter Notebook server from a remote browser</source>
        </trans-unit><trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Once the Jupyter notebook is running in the container, you'll  see a message similar to the following message.</source>
        </trans-unit><trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Copy/paste this URL into your browser when you connect for the first time, to login with a token: http://(5b8783e7911d or 127.0.0.1):8888/?token={sometoken}<ept id="p1">*</ept></source>
        </trans-unit><trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Replace the <bpt id="p1">**</bpt>http://(5b8783e7911d or 127.0.0.1)<ept id="p1">**</ept> part of the URL with the Fully Qualified Domain Name (FQDN) or the IP address of the VM and navigate to the address in a new tab of your browser.</source>
        </trans-unit><trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Screenshot showing Jupyter Notebooks dashboard.</source>
        </trans-unit><trans-unit id="138" translate="yes" xml:space="preserve">
          <source>You can get the FQDN and IP address of your VM with the following command:</source>
        </trans-unit><trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Remember to replace <ph id="ph1">`&lt;HOSTNAME&gt;`</ph> with the name you gave your VM.</source>
        </trans-unit><trans-unit id="140" translate="yes" xml:space="preserve">
          <source>This time we only see a single notebook.</source>
        </trans-unit><trans-unit id="141" translate="yes" xml:space="preserve">
          <source>That's because we're in a container and only copied down this notebook.</source>
        </trans-unit><trans-unit id="142" translate="yes" xml:space="preserve">
          <source>In the next exercise, we'll experiment with this notebook.</source>
        </trans-unit><trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Don't shut down the notebook server just yet.</source>
        </trans-unit><trans-unit id="144" translate="yes" xml:space="preserve">
          <source>We'll look at the <ph id="ph1">`first_pytorch_classifier.ipynb`</ph> notebook in the next exercise.</source>
        </trans-unit></group></body></file></xliff>