<?xml version="1.0"?><xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd"><file datatype="xml" original="6-create-the-respondtoslackcommand-function.md" source-language="en-US" target-language="en-US"><header><tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1931010" tool-company="Microsoft" /><xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6-create-the-respondtoslackcommand-function.e8b81db9df9c6b17a88dc1619f07cf46f11e1d91.skl</xliffext:skl_file_name><xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version><xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">41ea6f53dd33aff6d2712864b406f520c750d4aa</xliffext:ms.openlocfilehash><xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">05/13/2019</xliffext:ms.lasthandoff><xliffext:ms.openlocfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">learn-pr\advocates\replace-faces-with-emojis-matching-emotion\includes\6-create-the-respondtoslackcommand-function.md</xliffext:ms.openlocfilepath></header><body><group id="content" extype="content"><trans-unit id="101" translate="yes" xml:space="preserve">
          <source>You've created the Azure Function <ph id="ph1">`MojifyImage`</ph>, which returns a mojified image.</source>
        </trans-unit><trans-unit id="102" translate="yes" xml:space="preserve">
          <source>You need a second endpoint that Slack calls whenever someone executes the <ph id="ph1">`/mojify`</ph> command.</source>
        </trans-unit><trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This second endpoint needs to return the URL to the <ph id="ph1">`MojifyImage`</ph> function.</source>
        </trans-unit><trans-unit id="104" translate="yes" xml:space="preserve">
          <source>When you run a Slack command like <ph id="ph1">`/mojify &lt;some-image-url&gt;`</ph>, it makes a POST request to the endpoint you've configured, and passes in <ph id="ph2">`&lt;some-image-url&gt;`</ph> as a <ph id="ph3">`text`</ph> query parameter embedded in the body of the message.</source>
        </trans-unit><trans-unit id="105" translate="yes" xml:space="preserve">
          <source>You're going to create this function, which will coordinate and respond to the Slack commands as <ph id="ph1">`RespondToSlackCommand`</ph>.</source>
        </trans-unit><trans-unit id="106" translate="yes" xml:space="preserve">
          <source>You'll create the HTTP endpoint that uses the format Slack expects for the request, and how to get the function to respond with an image.</source>
        </trans-unit><trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Create the Function Trigger and convert to TypeScript</source>
        </trans-unit><trans-unit id="108" translate="yes" xml:space="preserve">
          <source>You need to create another HTTP-triggered Azure Function.</source>
        </trans-unit><trans-unit id="109" translate="yes" xml:space="preserve">
          <source>These instructions are basically the same as before.</source>
        </trans-unit><trans-unit id="110" translate="yes" xml:space="preserve">
          <source>What's different is that you're calling this function <ph id="ph1">`RespondToSlackCommand`</ph> instead of <ph id="ph2">`MojifyImage`</ph>.</source>
        </trans-unit><trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Click on <bpt id="p1">**</bpt>View<ept id="p1">**</ept> then <bpt id="p2">**</bpt>Command Palette<ept id="p2">**</ept>, then search for and select <bpt id="p3">**</bpt>Azure Functions: Create Function...<ept id="p3">**</ept></source>
        </trans-unit><trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Create New Function dialog in the top of the VS Code window</source>
        </trans-unit><trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Select the folder where you originally created the function project.</source>
        </trans-unit><trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Select Folder dialog showing the current folder location</source>
        </trans-unit><trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Select the <bpt id="p1">**</bpt>HTTP Trigger<ept id="p1">**</ept> option.</source>
        </trans-unit><trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Select HTTP trigger from the list of available triggers, including blob, queue, and timer triggers, along with three options for changing various settings, like project runtime, project language, and template filter</source>
        </trans-unit><trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Type <ph id="ph1">`RespondToSlackCommand`</ph> as the name of your function.</source>
        </trans-unit><trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Choose Name dialog with MojifyImage provided in the text field</source>
        </trans-unit><trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Choose <bpt id="p1">**</bpt>Anonymous<ept id="p1">**</ept> as the authentication level.</source>
        </trans-unit><trans-unit id="120" translate="yes" xml:space="preserve">
          <source>By choosing <bpt id="p1">**</bpt>Anonymous<ept id="p1">**</ept>, the function is open to the world and insecure.</source>
        </trans-unit><trans-unit id="121" translate="yes" xml:space="preserve">
          <source>If you create other functions in the future, this isn't the recommended default behavior.</source>
        </trans-unit><trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Since this is a low-risk exercise with free Azure learning resources, it's not a problem for now.</source>
        </trans-unit><trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Choose authorization level dialog offers anonymous, function, and admin options to select from.</source>
        </trans-unit><trans-unit id="124" translate="yes" xml:space="preserve">
          <source>If it was successful, then you should now have the folder <bpt id="p1">**</bpt>RespondToSlackCommand<ept id="p1">**</ept> in the root directory.</source>
        </trans-unit><trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Now you can convert the file from TypeScript to JavaScript.</source>
        </trans-unit><trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Create a file called <ph id="ph1">`index.ts`</ph> in the <ph id="ph2">`RespondToSlackCommand`</ph> folder.</source>
        </trans-unit><trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Make sure that the <ph id="ph1">`TypeScript`</ph> build process is still running and that it automatically compiled into the <ph id="ph2">`index.js`</ph> and <ph id="ph3">`index.js.map`</ph> files.</source>
        </trans-unit><trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Replace the code in <ph id="ph1">`index.ts`</ph> with the following code:</source>
        </trans-unit><trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Try it out</source>
        </trans-unit><trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Make sure that everything is working by visiting (<ph id="ph1">http://localhost:7071/api/RespondToSlackCommand)</ph> in a browser.</source>
        </trans-unit><trans-unit id="131" translate="yes" xml:space="preserve">
          <source>It should print our <ph id="ph1">`Hello!`</ph>.</source>
        </trans-unit><trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Write the <ph id="ph1">`index`</ph> function</source>
        </trans-unit><trans-unit id="133" translate="yes" xml:space="preserve">
          <source>This <ph id="ph1">`index(context, req)`</ph> TypeScript function is a lot quicker to write than the previous function.</source>
        </trans-unit><trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Set up your <ph id="ph1">`context.res`</ph> object at the top of the function.</source>
        </trans-unit><trans-unit id="135" translate="yes" xml:space="preserve">
          <source>This time, you don't need to set the <ph id="ph1">`isRaw`</ph> property since this defaults to <ph id="ph2">`false`</ph>.</source>
        </trans-unit><trans-unit id="136" translate="yes" xml:space="preserve">
          <source>However, you do need set the content type to be <ph id="ph1">`application/json`</ph>.</source>
        </trans-unit><trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Add the useful library <ph id="ph1">`querystring`</ph>.</source>
        </trans-unit><trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Since Slack sends the image URL, you want to process it as a query string with the key of <ph id="ph1">`text`</ph>.</source>
        </trans-unit><trans-unit id="139" translate="yes" xml:space="preserve">
          <source>It embeds this in the body of the request, so you need to work a little harder to get the right information.</source>
        </trans-unit><trans-unit id="140" translate="yes" xml:space="preserve">
          <source>It's not too hard though!</source>
        </trans-unit><trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Make life easier for yourself by importing the Node.js <ph id="ph1">`querystring`</ph> package.</source>
        </trans-unit><trans-unit id="142" translate="yes" xml:space="preserve">
          <source>This is part of Node.js, so there's no need to install anything extra.</source>
        </trans-unit><trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Add this import statement to the top of the file.</source>
        </trans-unit><trans-unit id="144" translate="yes" xml:space="preserve">
          <source>In your <ph id="ph1">`index(context, req)`</ph> function, convert the <ph id="ph2">`req.body`</ph> into an object from which you'll extract the <ph id="ph3">`text`</ph> property.</source>
        </trans-unit><trans-unit id="145" translate="yes" xml:space="preserve">
          <source>If a user types the command properly, then the text should contain the URL of an image.</source>
        </trans-unit><trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Add some basic validation to it to make sure it works.</source>
        </trans-unit><trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The Slack command is calling <ph id="ph1">`https://somedomain.com/api/RespondToSlackCommand`</ph>.</source>
        </trans-unit><trans-unit id="148" translate="yes" xml:space="preserve">
          <source>It needs to respond with the MojifyImage URL, which we assume will be on the same domain.</source>
        </trans-unit><trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Extract the domain from the request <ph id="ph1">`MojifyImage`</ph> request URL.</source>
        </trans-unit><trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Finally, set the body of the response to the Slack-specific format at the bottom of the <ph id="ph1">`index(context, req)`</ph> function.</source>
        </trans-unit><trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`image_url`</ph> in the <ph id="ph2">`attachments`</ph> property needs to be set to return the <ph id="ph3">`mojifyUrl`</ph>, passing in the URL the user supplied in the command as the <ph id="ph4">`imageUrl`</ph> query parameter.</source>
        </trans-unit><trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Try it out</source>
        </trans-unit><trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Make sure that the local Azure function application is running using one of the methods you previously used: either use <ph id="ph1">`func host start`</ph> or run it from the debug menu using the <bpt id="p1">**</bpt>Attach to JavaScript Function<ept id="p1">**</ept> task.</source>
        </trans-unit><trans-unit id="154" translate="yes" xml:space="preserve">
          <source>If the function app started correctly, then the output window should show something like this:</source>
        </trans-unit><trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Make sure that everything is working by visiting <ph id="ph1">http://localhost:7071/api/RespondToSlackCommand</ph> in your browser.</source>
        </trans-unit><trans-unit id="156" translate="yes" xml:space="preserve">
          <source>It should now print some json.</source>
        </trans-unit></group></body></file></xliff>