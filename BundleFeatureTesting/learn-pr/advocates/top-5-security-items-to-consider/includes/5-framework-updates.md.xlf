<?xml version="1.0"?><xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd"><file datatype="xml" original="5-framework-updates.md" source-language="en-US" target-language="en-US"><header><tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1931010" tool-company="Microsoft" /><xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5-framework-updates.e02b910e08a13a4c2abb4cc0f2cdb6f120985733.skl</xliffext:skl_file_name><xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version><xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">de8388ea41c71013b8f986cba8ea3166bed80b11</xliffext:ms.openlocfilehash><xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">05/13/2019</xliffext:ms.lasthandoff><xliffext:ms.openlocfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">learn-pr\advocates\top-5-security-items-to-consider\includes\5-framework-updates.md</xliffext:ms.openlocfilepath></header><body><group id="content" extype="content"><trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Many developers consider the frameworks and libraries they use to build their software with to be primarily decided by features or personal preference.</source>
        </trans-unit><trans-unit id="102" translate="yes" xml:space="preserve">
          <source>However, the framework that you choose is an important decision, not only from a design and functionality perspective but also from a <bpt id="p1">_</bpt>security<ept id="p1">_</ept> perspective.</source>
        </trans-unit><trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Choosing a framework with modern security features and keeping it up to date is one of the best ways to ensure your apps are secure.</source>
        </trans-unit><trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Choose your framework carefully</source>
        </trans-unit><trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The most important factor regarding security when choosing a framework is how well supported it is.</source>
        </trans-unit><trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The best frameworks have stated security arrangements and are supported by large communities who improve and test the framework.</source>
        </trans-unit><trans-unit id="107" translate="yes" xml:space="preserve">
          <source>No software is 100% bug-free or totally secure, but when a vulnerability is identified, we want to be certain that it will be closed or have a workaround provided quickly.</source>
        </trans-unit><trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Often "well supported" is synonymous with "modern".</source>
        </trans-unit><trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Older frameworks tend to either be replaced or eventually fade in popularity.</source>
        </trans-unit><trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Even if you have significant experience with (or many apps written in) an older framework, you'll be better off choosing a modern library that has the features you need.</source>
        </trans-unit><trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Modern frameworks tend to build on the lessons learned by earlier iterations which makes choosing them for new apps a form of threat surface reduction.</source>
        </trans-unit><trans-unit id="112" translate="yes" xml:space="preserve">
          <source>You will have one more app to worry about if a vulnerability is discovered in the older framework that your legacy applications are written in.</source>
        </trans-unit><trans-unit id="113" translate="yes" xml:space="preserve">
          <source>For more information on secure design and reducing threat surface, see <bpt id="p1">[</bpt>Design For Security in Azure<ept id="p1">](/learn/azure/design-for-security-in-azure/index.yml)</ept>.</source>
        </trans-unit><trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Keep your framework updated</source>
        </trans-unit><trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Software development frameworks, such as Java Spring and .NET Core release updates and new versions regularly.</source>
        </trans-unit><trans-unit id="116" translate="yes" xml:space="preserve">
          <source>These updates include new features, removal of old features, and often security fixes or improvements.</source>
        </trans-unit><trans-unit id="117" translate="yes" xml:space="preserve">
          <source>When we allow our frameworks to become out of date, it creates "technical debt".</source>
        </trans-unit><trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The further out of date we get, the harder and riskier it will be to bring our code up to the latest version.</source>
        </trans-unit><trans-unit id="119" translate="yes" xml:space="preserve">
          <source>In addition, much like the initial framework choice, staying on older versions of the framework open you up to more security threats which have been fixed in newer releases of the framework.</source>
        </trans-unit><trans-unit id="120" translate="yes" xml:space="preserve">
          <source>As an example, from 2016-2017, <bpt id="p1">[</bpt>over 30 vulnerabilities<ept id="p1">](https://www.cvedetails.com/product/6117/Apache-Struts.html?vendor_id=45)</ept> were found in the Apache Struts framework.</source>
        </trans-unit><trans-unit id="121" translate="yes" xml:space="preserve">
          <source>These were quickly addressed by the development team, but some companies didn't apply the patches and <bpt id="p1">[</bpt>paid the price in the form of a data breach<ept id="p1">](https://www.zdnet.com/article/equifax-confirms-apache-struts-flaw-it-failed-to-patch-was-to-blame-for-data-breach/)</ept>.</source>
        </trans-unit><trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Make sure to keep your frameworks and libraries up to date<ept id="p1">**</ept>.</source>
        </trans-unit><trans-unit id="123" translate="yes" xml:space="preserve">
          <source>How do I update my framework?</source>
        </trans-unit><trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Some frameworks, like Java or .NET, require an install and tend to release on a known cadence.</source>
        </trans-unit><trans-unit id="125" translate="yes" xml:space="preserve">
          <source>It's a good idea to watch for new releases and plan to make a branch of your code to try it out when it's released.</source>
        </trans-unit><trans-unit id="126" translate="yes" xml:space="preserve">
          <source>As an example, .NET Core maintains a <bpt id="p1">[</bpt>release notes page<ept id="p1">](https://github.com/dotnet/core/tree/master/release-notes)</ept> which you can check to find the latest versions available.</source>
        </trans-unit><trans-unit id="127" translate="yes" xml:space="preserve">
          <source>More specialized libraries such as JavaScript frameworks, or .NET components can be updated through a package manager.</source>
        </trans-unit><trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>NPM<ept id="p1">**</ept> and <bpt id="p2">**</bpt>Webpack<ept id="p2">**</ept> are popular choices for web projects and are supported by most IDEs or build tools.</source>
        </trans-unit><trans-unit id="129" translate="yes" xml:space="preserve">
          <source>In .NET, we use <bpt id="p1">**</bpt>NuGet<ept id="p1">**</ept> to manage our component dependencies.</source>
        </trans-unit><trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Much like updating the core framework, branching your code, updating the components and testing is a good technique to validate a new version of a dependency.</source>
        </trans-unit><trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`dotnet`</ph> command-line tool has an <ph id="ph2">`add package`</ph> and <ph id="ph3">`remove package`</ph> option to add or remove NuGet packages but doesn't have a corresponding <ph id="ph4">`update package`</ph> command.</source>
        </trans-unit><trans-unit id="132" translate="yes" xml:space="preserve">
          <source>However, it turns out you can run <ph id="ph1">`dotnet add package &lt;package-name&gt;`</ph> in your project and it will automatically <bpt id="p1">_</bpt>upgrade<ept id="p1">_</ept> the package to the latest version.</source>
        </trans-unit><trans-unit id="133" translate="yes" xml:space="preserve">
          <source>This is an easy way to update dependencies without having to open the IDE.</source>
        </trans-unit><trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Take advantage of built-in security</source>
        </trans-unit><trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Always check to see what security features your frameworks offer.</source>
        </trans-unit><trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Never<ept id="p1">**</ept> roll your own security if there's a standard technique or capability built in.</source>
        </trans-unit><trans-unit id="137" translate="yes" xml:space="preserve">
          <source>In addition, rely on proven algorithms and workflows because these have often been scrutinized by a lot of experts, critiqued and strengthened so you can be assured that they are reliable and secure.</source>
        </trans-unit><trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The .NET Core framework has countless security features, here are a few core starting places in the documentation.</source>
        </trans-unit><trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Authentication -Identity Management<ept id="p1">](https://docs.microsoft.com/aspnet/core/security/authentication/index?view=aspnetcore-2.1)</ept></source>
        </trans-unit><trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Authorization<ept id="p1">](https://docs.microsoft.com/aspnet/core/security/authorization/index?view=aspnetcore-2.1)</ept></source>
        </trans-unit><trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Data Protection<ept id="p1">](https://docs.microsoft.com/aspnet/core/security/data-protection/index?view=aspnetcore-2.1)</ept></source>
        </trans-unit><trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Secure Configuration<ept id="p1">](https://docs.microsoft.com/aspnet/core/security/data-protection/configuration/index?view=aspnetcore-2.1)</ept></source>
        </trans-unit><trans-unit id="143" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Security Extensibility APIs<ept id="p1">](https://docs.microsoft.com/aspnet/core/security/data-protection/extensibility/index?view=aspnetcore-2.1)</ept></source>
        </trans-unit><trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Each one of these features was written by experts in their field, and then battered with tests to ensure that it works as intended, and only as intended.</source>
        </trans-unit><trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Other frameworks offer similar features - check with the vendor that provides the framework to find out what they have in each category.</source>
        </trans-unit><trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Writing your own security controls, instead of using those provided by your framework, is not only wasting time, it's less secure.</source>
        </trans-unit><trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Azure Security Center</source>
        </trans-unit><trans-unit id="148" translate="yes" xml:space="preserve">
          <source>When using Azure to host your web applications Security Center will warn you if your frameworks are out of date as part of the recommendations tab.  Don't forget to look there from time to time to see if there are any warnings related to your apps.</source>
        </trans-unit><trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Azure Security Center recommending a framework upgrade.</source>
        </trans-unit><trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Summary</source>
        </trans-unit><trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Whenever possible, choose a modern framework to build your apps, always use the built-in security features, and make sure you keep it up to date.</source>
        </trans-unit><trans-unit id="152" translate="yes" xml:space="preserve">
          <source>These simple rules will help to ensure your application starts on a solid foundation.</source>
        </trans-unit></group></body></file></xliff>