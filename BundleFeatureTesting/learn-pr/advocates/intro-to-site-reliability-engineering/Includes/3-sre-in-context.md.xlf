<?xml version="1.0"?><xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd"><file datatype="xml" original="3-sre-in-context.md" source-language="en-US" target-language="en-US"><header><tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1931010" tool-company="Microsoft" /><xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3-sre-in-context.07fddeda827633364156bf082191d427118326fc.skl</xliffext:skl_file_name><xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version><xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">335e7631e16959256448432c5e507202ff16b429</xliffext:ms.openlocfilehash><xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">05/13/2019</xliffext:ms.lasthandoff><xliffext:ms.openlocfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">learn-pr\advocates\intro-to-site-reliability-engineering\Includes\3-sre-in-context.md</xliffext:ms.openlocfilepath></header><body><group id="content" extype="content"><trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Before we explore some of the practices associated with SRE, it would be good to place some of the ideas we just learned in the previous unit into context.</source>
        </trans-unit><trans-unit id="102" translate="yes" xml:space="preserve">
          <source>In this short unit, we’ll learn some of the history behind SRE and how it relates to other operations practices you may be familiar with.</source>
        </trans-unit><trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This will set us up for greater success later because those practices will make more sense in context.</source>
        </trans-unit><trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Also, when your friends ask “How is SRE different from ...” you’ll have a ready answer.</source>
        </trans-unit><trans-unit id="105" translate="yes" xml:space="preserve">
          <source>History</source>
        </trans-unit><trans-unit id="106" translate="yes" xml:space="preserve">
          <source>A highly condensed history of SRE begins with its origins at Google in 2003.</source>
        </trans-unit><trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Ben Treynor, now Treynor Sloss, took over leadership of Google’s “Production Team” (then only seven software engineers) and created the idea he famously described as “what happens when you ask a software engineer to design an operations function.”</source>
        </trans-unit><trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The history here is useful to understand because it helps explain why SRE can feel very “software engineering” to operations people who meet it for the first time.</source>
        </trans-unit><trans-unit id="109" translate="yes" xml:space="preserve">
          <source>It has adopted values and tools from that field like the importance of coding and source control systems as a fundamental tool.</source>
        </trans-unit><trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The initial and current implementation of Google SRE is well documented in their two books published by O'Reilly (see the Getting Started unit).</source>
        </trans-unit><trans-unit id="111" translate="yes" xml:space="preserve">
          <source>As people from Google left the company (and people in the company talked more about their practices publicly), SRE started to spread to more organizations in the industry.</source>
        </trans-unit><trans-unit id="112" translate="yes" xml:space="preserve">
          <source>As SRE spread to new organizations, those organizations adopted and adapted the SRE principles and practices to fit their local culture.</source>
        </trans-unit><trans-unit id="113" translate="yes" xml:space="preserve">
          <source>This expansion process has yielded a number of different implementations of SRE in the field.</source>
        </trans-unit><trans-unit id="114" translate="yes" xml:space="preserve">
          <source>DevOps and SRE</source>
        </trans-unit><trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The broader industry faced the same challenges around scaling, development velocity vs. operational stability, and other software delivery issues that spawned the site reliability engineering movement.</source>
        </trans-unit><trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Parallel efforts to address them outside of Google (and a few larger companies at that time) yielded DevOps.</source>
        </trans-unit><trans-unit id="117" translate="yes" xml:space="preserve">
          <source>For lots of good information about DevOps, see <bpt id="p1">[</bpt><ph id="ph1">https://docs.microsoft.com/azure/devops/learn/</ph><ept id="p1">](https://docs.microsoft.com/azure/devops/learn/)</ept>.</source>
        </trans-unit><trans-unit id="118" translate="yes" xml:space="preserve">
          <source>It is important to note that DevOps and SRE are two different parallel attempts to address the same challenges.</source>
        </trans-unit><trans-unit id="119" translate="yes" xml:space="preserve">
          <source>SRE is not the next evolutionary step after DevOps.</source>
        </trans-unit><trans-unit id="120" translate="yes" xml:space="preserve">
          <source>SRE was not created to be "the future of DevOps."</source>
        </trans-unit><trans-unit id="121" translate="yes" xml:space="preserve">
          <source>How SRE and DevOps differ is a topic still under considerable discussion in the field.</source>
        </trans-unit><trans-unit id="122" translate="yes" xml:space="preserve">
          <source>There are some broadly agreed upon differences, including:</source>
        </trans-unit><trans-unit id="123" translate="yes" xml:space="preserve">
          <source>SRE is an engineering discipline that focuses on reliability, DevOps is a cultural movement that emerged from the urge to break down the silos typically associated with separate Development and Operations organizations.</source>
        </trans-unit><trans-unit id="124" translate="yes" xml:space="preserve">
          <source>SRE can be the name of a role as in "I’m a site reliability engineer (SRE)", DevOps can't.</source>
        </trans-unit><trans-unit id="125" translate="yes" xml:space="preserve">
          <source>No one, strictly speaking, is a "DevOps" for a living.</source>
        </trans-unit><trans-unit id="126" translate="yes" xml:space="preserve">
          <source>SRE tends to be more prescriptive, DevOps is intentionally not so.</source>
        </trans-unit><trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Nearly universal adoption of continuous integration/continuous delivery and Agile principles are the closest it comes in this regard.</source>
        </trans-unit><trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The two operations practices, DevOps and SRE, share a mutual love of monitoring/observability and automation (perhaps for different reasons).</source>
        </trans-unit><trans-unit id="129" translate="yes" xml:space="preserve">
          <source>This is one reason why it can often be easier to import SRE practices and principles into an organization with an existing DevOps practice.</source>
        </trans-unit><trans-unit id="130" translate="yes" xml:space="preserve">
          <source>That process has to be done with care and intent.</source>
        </trans-unit><trans-unit id="131" translate="yes" xml:space="preserve">
          <source>It also can and should be implemented incrementally, one does not have to make a sudden switch.</source>
        </trans-unit><trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Just swapping titles for people in the organization is an implementation strategy that almost never succeeds.</source>
        </trans-unit><trans-unit id="133" translate="yes" xml:space="preserve">
          <source>It will not yield the benefits SRE has to offer.</source>
        </trans-unit><trans-unit id="134" translate="yes" xml:space="preserve">
          <source>See the Getting Started section of this unit for some better suggestions.</source>
        </trans-unit><trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Conclusion</source>
        </trans-unit><trans-unit id="136" translate="yes" xml:space="preserve">
          <source>This short unit has sought to place a small amount of context around SRE and DevOps.</source>
        </trans-unit><trans-unit id="137" translate="yes" xml:space="preserve">
          <source>SRE and DevOps are adjacent operations schools of thought and are best thought of in those terms.</source>
        </trans-unit><trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Now that we've briefly looked at some of the background behind SRE, let’s move right to some of its core principles.</source>
        </trans-unit></group></body></file></xliff>