<?xml version="1.0"?><xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd"><file datatype="xml" original="2-simple-log-regression-model.md" source-language="en-US" target-language="en-US"><header><tool tool-id="mdxliff" tool-name="mdxliff"  tool-company="Microsoft" /><xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2-simple-log-regression-model.863acb.7f0078f7ec29b21c51b2463b514ba81c94c915ee.skl</xliffext:skl_file_name><xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version><xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7f0078f7ec29b21c51b2463b514ba81c94c915ee</xliffext:ms.openlocfilehash><xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ba7e452ac39d7f09a5646044b44de0e1cdc54982</xliffext:ms.sourcegitcommit><xliffext:ms.openlocfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">learn-pr\data-ai-cert\train-local-model-with-azure-mls\includes\2-simple-log-regression-model.md</xliffext:ms.openlocfilepath></header><body><group id="content" extype="content"><trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Let's start by getting the sample data we'll use to train our ML models.</source>
        </trans-unit><trans-unit id="102" translate="yes" xml:space="preserve">
          <source>We'll use Python to retrieve the data.</source>
        </trans-unit><trans-unit id="103" translate="yes" xml:space="preserve">
          <source>You can run the code from this module in several ways.</source>
        </trans-unit><trans-unit id="104" translate="yes" xml:space="preserve">
          <source>You can use an Azure Data Science VM which has all the required tools preinstalled.</source>
        </trans-unit><trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Alternatively, you can use <bpt id="p1">[</bpt>Azure Notebooks<ept id="p1">](https://notebooks.azure.com/)</ept> which also has all the packages and tools available.</source>
        </trans-unit><trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Finally, you can execute it locally as long as you install the necessary packages.</source>
        </trans-unit><trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Using a local development install</source>
        </trans-unit><trans-unit id="108" translate="yes" xml:space="preserve">
          <source>We'll process the sample data using <bpt id="p1">[</bpt>NumPy<ept id="p1">](http://www.numpy.org/)</ept> and <bpt id="p2">[</bpt>scikit-learn<ept id="p2">](https://scikit-learn.org/stable/index.html)</ept> which are common scientific package for Python.</source>
        </trans-unit><trans-unit id="109" translate="yes" xml:space="preserve">
          <source>You will need these package installed into your Python environment if you plan to execute the code locally.</source>
        </trans-unit><trans-unit id="110" translate="yes" xml:space="preserve">
          <source>We'll also need the Azure Machine Learning SDK for Python to connect our Python code to the Azure Machine Learning service.</source>
        </trans-unit><trans-unit id="111" translate="yes" xml:space="preserve">
          <source>You can execute the following commands to install the required packages into your Python environment.</source>
        </trans-unit><trans-unit id="112" translate="yes" xml:space="preserve">
          <source>This installs several related packages which are useful in processing data in Python.</source>
        </trans-unit><trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Retrieve the MNIST data</source>
        </trans-unit><trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Run the following code in your Python editor of choice to retrieve the MNIST dataset and save it to a local <bpt id="p1">**</bpt>data<ept id="p1">**</ept> folder.</source>
        </trans-unit><trans-unit id="115" translate="yes" xml:space="preserve">
          <source>You will see output similar to this: <ph id="ph1">`('./data/test-labels.gz', &lt;http.client.HTTPMessage object at 0x00000247D0FE6080&gt;)`</ph>.</source>
        </trans-unit><trans-unit id="116" translate="yes" xml:space="preserve">
          <source>A folder named <bpt id="p1">**</bpt>data<ept id="p1">**</ept> will be created that will have four Gzipped files containing the image and label test and training data.</source>
        </trans-unit><trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Split out the datasets</source>
        </trans-unit><trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The next step is to split the data into training and test sets.</source>
        </trans-unit><trans-unit id="119" translate="yes" xml:space="preserve">
          <source>We'll need a function to load the compressed file and return numpy arrays we can process.</source>
        </trans-unit><trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Save the following code off to a file named <bpt id="p1">**</bpt>utils.py<ept id="p1">**</ept>.</source>
        </trans-unit><trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Next, add the following code to your Python app, make sure <bpt id="p1">**</bpt>utils.py<ept id="p1">**</ept> is in the current folder so you can import the <ph id="ph1">`load_data`</ph> function.</source>
        </trans-unit><trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Display sample images</source>
        </trans-unit><trans-unit id="123" translate="yes" xml:space="preserve">
          <source>To verify we've loaded the data, let's display one of the sample images + labels using matplotlib.</source>
        </trans-unit><trans-unit id="124" translate="yes" xml:space="preserve">
          <source>It should display an image which looks something like this:</source>
        </trans-unit><trans-unit id="125" translate="yes" xml:space="preserve">
          <source>In this screenshot, numbers in the top row correspond to handwritten pictures in the bottom row.</source>
        </trans-unit><trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The numbers in the top row are the labels, and the handwritten pictures are in the second row.</source>
        </trans-unit></group></body></file></xliff>