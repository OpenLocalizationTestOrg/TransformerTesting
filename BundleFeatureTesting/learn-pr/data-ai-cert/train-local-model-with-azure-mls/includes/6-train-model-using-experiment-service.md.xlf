<?xml version="1.0"?><xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd"><file datatype="xml" original="6-train-model-using-experiment-service.md" source-language="en-US" target-language="en-US"><header><tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1931010" tool-company="Microsoft" /><xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6-train-model-using-experiment-service.c461f2ef5032a24bf118c604da5b8be991f485bf.skl</xliffext:skl_file_name><xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version><xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7f9d25c628dcada4e84e30e3f8c7381b3ce04dfe</xliffext:ms.openlocfilehash><xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/24/2019</xliffext:ms.lasthandoff><xliffext:ms.openlocfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">learn-pr\data-ai-cert\train-local-model-with-azure-mls\includes\6-train-model-using-experiment-service.md</xliffext:ms.openlocfilepath></header><body><group id="content" extype="content"><trans-unit id="101" translate="yes" xml:space="preserve">
          <source>You learned that a <bpt id="p1">*</bpt>compute target<ept id="p1">*</ept> is the compute resource to run a training script or to host a service deployment.</source>
        </trans-unit><trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Here you will create an Azure Machine Learning Compute (AmlCompute) as the compute resource.</source>
        </trans-unit><trans-unit id="103" translate="yes" xml:space="preserve">
          <source>An AmlCompute is a compute target optimized for machine learning workloads that's managed directly by Azure Machine Learning service.</source>
        </trans-unit><trans-unit id="104" translate="yes" xml:space="preserve">
          <source>You don't need to connect or configure these targets - the system takes care of them for you.</source>
        </trans-unit><trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The first step is to create a remote compute target:</source>
        </trans-unit><trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Load data and create a modeling script</source>
        </trans-unit><trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Depending on the location and format of the data source, there are various ways to pipe data into the model.</source>
        </trans-unit><trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For example, we can use the created <ph id="ph1">`Workspace`</ph> object to obtain the default datastore and upload the data into Azure Blob storage.</source>
        </trans-unit><trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Then you create a directory to save your training Python code:</source>
        </trans-unit><trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Finally, let's prepare our model training script (note that in this script, you are defining three parameters):</source>
        </trans-unit><trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The first parameter is for finding the data in the cloud or for the path.</source>
        </trans-unit><trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The other two parameters define the <bpt id="p1">**</bpt>k<ept id="p1">**</ept> parameter in the <bpt id="p2">**</bpt>kNN<ept id="p2">**</ept> algorithm.</source>
        </trans-unit><trans-unit id="113" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`kmax`</ph> limits the maximum value of <bpt id="p1">**</bpt>k<ept id="p1">**</ept>.</source>
        </trans-unit><trans-unit id="114" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`kinterval`</ph> decides the interval between each <bpt id="p1">**</bpt>k<ept id="p1">**</ept>.</source>
        </trans-unit><trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Now, you must add a <bpt id="p1">**</bpt>utils<ept id="p1">**</ept> script, as shown below, for loading data and creating an estimator so that it's easier to scale your work in the future.</source>
        </trans-unit><trans-unit id="116" translate="yes" xml:space="preserve">
          <source>An estimator object is used to submit the run.</source>
        </trans-unit><trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Create your estimator by running the following code to define:</source>
        </trans-unit><trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The name of the estimator object, <ph id="ph1">`est`</ph>.</source>
        </trans-unit><trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The directory that contains your scripts.</source>
        </trans-unit><trans-unit id="120" translate="yes" xml:space="preserve">
          <source>All the files in this directory are uploaded into the cluster nodes for running.</source>
        </trans-unit><trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The compute target.</source>
        </trans-unit><trans-unit id="122" translate="yes" xml:space="preserve">
          <source>In this case, you use the Azure Machine Learning compute cluster that you created.</source>
        </trans-unit><trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The training script name, <bpt id="p1">**</bpt>train.py<ept id="p1">**</ept>.</source>
        </trans-unit><trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Parameters that the training script requires.</source>
        </trans-unit><trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Python packages that are necessary for training.</source>
        </trans-unit><trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Submit the model, monitor the run, and retrieve the results</source>
        </trans-unit><trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The last step is running the model.</source>
        </trans-unit><trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Sign in with your Azure account if prompted to do so.</source>
        </trans-unit><trans-unit id="129" translate="yes" xml:space="preserve">
          <source>You can see the running experiment in the portal:</source>
        </trans-unit><trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The screenshot depicts the my-first-experiment status as Queued.</source>
        </trans-unit><trans-unit id="131" translate="yes" xml:space="preserve">
          <source>You could use the widgets module from the <bpt id="p1">**</bpt>azureml<ept id="p1">**</ept> package to monitor your run:</source>
        </trans-unit><trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The following screenshot depicts the status when remote resources are running.</source>
        </trans-unit><trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The screenshot depicts a remotely running job.</source>
        </trans-unit><trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The following screenshot depicts the status of the completed job.</source>
        </trans-unit><trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Highlighted in the red box, you can see that you got the same results as you did earlier on the local machine.</source>
        </trans-unit><trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The screenshot depicts a remotely completed job.</source>
        </trans-unit><trans-unit id="137" translate="yes" xml:space="preserve">
          <source>After this run finishes, you can print the results.</source>
        </trans-unit><trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The results were logged because you wrote the code in the training script.</source>
        </trans-unit></group></body></file></xliff>