<?xml version="1.0"?><xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd"><file datatype="xml" original="4-query-dw-using-ssms.md" source-language="en-US" target-language="en-US"><header><tool tool-id="mdxliff" tool-name="mdxliff"  tool-company="Microsoft" /><xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4-query-dw-using-ssms.9252eb.b1a21b609adef3da0576a7559e7744b469da8993.skl</xliffext:skl_file_name><xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version><xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b1a21b609adef3da0576a7559e7744b469da8993</xliffext:ms.openlocfilehash><xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ba7e452ac39d7f09a5646044b44de0e1cdc54982</xliffext:ms.sourcegitcommit><xliffext:ms.openlocfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">learn-pr\data-ai-cert\query-azure-sql-data-warehouse\includes\4-query-dw-using-ssms.md</xliffext:ms.openlocfilepath></header><body><group id="content" extype="content"><trans-unit id="101" translate="yes" xml:space="preserve">
          <source>To extract data from the database, we need to form a <bpt id="p1">_</bpt>database query<ept id="p1">_</ept>.</source>
        </trans-unit><trans-unit id="102" translate="yes" xml:space="preserve">
          <source>This query is a textual command expressed in one or more SQL statements.</source>
        </trans-unit><trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Microsoft's variant of SQL is called T-SQL.</source>
        </trans-unit><trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Although T-SQL is a sophisticated programming language, the most commonly used data queries are straightforward.</source>
        </trans-unit><trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The pattern of the query to read data is:</source>
        </trans-unit><trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Compose a T-SQL query step by step against the existing fact table <bpt id="p1">**</bpt>FactResellerSales<ept id="p1">**</ept>.</source>
        </trans-unit><trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Expand the <bpt id="p1">**</bpt>demodw<ept id="p1">**</ept> database node in the SQL Server Management Studio Object Explorer.</source>
        </trans-unit><trans-unit id="108" translate="yes" xml:space="preserve">
          <source>All the tables that are available to you are listed.</source>
        </trans-unit><trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Find the fact table <bpt id="p1">**</bpt>FactResellerSales<ept id="p1">**</ept> and the dimension table <bpt id="p2">**</bpt>DimReseller<ept id="p2">**</ept>.</source>
        </trans-unit><trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Expand these two tables to see their columns.</source>
        </trans-unit><trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Right-click each of the tables, and select <bpt id="p1">**</bpt>Select Top 1000 Rows<ept id="p1">**</ept> to view the data in the tables.</source>
        </trans-unit><trans-unit id="112" translate="yes" xml:space="preserve">
          <source>How to issue a query</source>
        </trans-unit><trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The column view in Object Explorer provides information about the table structure.</source>
        </trans-unit><trans-unit id="114" translate="yes" xml:space="preserve">
          <source>For example, from here you can see that the column <bpt id="p1">**</bpt>ResellerKey<ept id="p1">**</ept> in <bpt id="p2">**</bpt>FactResellerSales<ept id="p2">**</ept> and the column <bpt id="p3">**</bpt>ResellerKey<ept id="p3">**</ept> of <bpt id="p4">**</bpt>DimReseller<ept id="p4">**</ept> are the links on which the two tables can join together.</source>
        </trans-unit><trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Create a new query</source>
        </trans-unit><trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Now create a custom query.</source>
        </trans-unit><trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Start by querying the fact table, which holds the central data.</source>
        </trans-unit><trans-unit id="118" translate="yes" xml:space="preserve">
          <source>With the <bpt id="p1">**</bpt>FactResellerSales<ept id="p1">**</ept> table selected in the tree, select <bpt id="p2">**</bpt>New Query<ept id="p2">**</ept> on the toolbar to open a new query editor.</source>
        </trans-unit><trans-unit id="119" translate="yes" xml:space="preserve">
          <source>You might get a warning about unsupported features, such as transactions.</source>
        </trans-unit><trans-unit id="120" translate="yes" xml:space="preserve">
          <source>That's okay.</source>
        </trans-unit><trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Just dismiss the warning.</source>
        </trans-unit><trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Enter the following SQL into the editor to retrieve the sales information:</source>
        </trans-unit><trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Notice the use of aliases in this query.</source>
        </trans-unit><trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The table <ph id="ph1">`FactResellerSales`</ph> is aliased as <ph id="ph2">`S`</ph> so that it's easier to reference in other parts of the query.</source>
        </trans-unit><trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The column <ph id="ph1">`SalesAmount`</ph> is aliased as <ph id="ph2">`Sales`</ph> to change its name in the output.</source>
        </trans-unit><trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Select <bpt id="p1">**</bpt>Execute<ept id="p1">**</ept> on the toolbar, or select <bpt id="p2">&lt;kbd&gt;</bpt>F5<ept id="p2">&lt;/kbd&gt;</ept>.</source>
        </trans-unit><trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The query is sent to the Azure SQL Data Warehouse server where it runs.</source>
        </trans-unit><trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The results are sent back and displayed in the bottom pane of the query window.</source>
        </trans-unit><trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Run a query by using the SQL Server Management Studio tool</source>
        </trans-unit><trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Bring the dimension table in by using the shared column.</source>
        </trans-unit><trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Enter the following query into the editor:</source>
        </trans-unit><trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The fact table and dimension table are joined together by the <ph id="ph1">`ResellerKey`</ph> columns, which provide the relationship between them.</source>
        </trans-unit><trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Run the query.</source>
        </trans-unit><trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Here are the first few rows.</source>
        </trans-unit><trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Look at the values in the <ph id="ph1">`BusinessType`</ph> column.</source>
        </trans-unit><trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The resellers fall into three types of businesses: Specialty Bike Shop, Warehouse, and Value Added Reseller.</source>
        </trans-unit><trans-unit id="137" translate="yes" xml:space="preserve">
          <source>To focus on <bpt id="p1">_</bpt>warehouse resellers<ept id="p1">_</ept>, add a <ph id="ph1">`WHERE`</ph> condition to the source data.</source>
        </trans-unit><trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Add a <ph id="ph1">`WHERE`</ph> clause to the query that looks something like the following:</source>
        </trans-unit><trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Run the query to limit the results.</source>
        </trans-unit><trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Because there are only <bpt id="p1">_</bpt>warehouse resellers<ept id="p1">_</ept> left, the <ph id="ph1">`BusinessType`</ph> column in the query result isn't needed.</source>
        </trans-unit><trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Go ahead and remove it.</source>
        </trans-unit><trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Perform aggregate calculations</source>
        </trans-unit><trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Most of the data analysis tasks involve aggregation calculations, which include minimum and maximum values, totals, summations, and averaging data.</source>
        </trans-unit><trans-unit id="144" translate="yes" xml:space="preserve">
          <source>For example, if you want to know the sales performance of each reseller, calculate the total sales amount for each of the resellers.</source>
        </trans-unit><trans-unit id="145" translate="yes" xml:space="preserve">
          <source>In T-SQL, use the <ph id="ph1">`GROUP BY`</ph> clause and the <ph id="ph2">`SUM`</ph> aggregation function.</source>
        </trans-unit><trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Enter the following query into the editor:</source>
        </trans-unit><trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The following results are returned:</source>
        </trans-unit><trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Filter aggregated results</source>
        </trans-unit><trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Based on the aggregated data, you might want to keep only the resellers whose total sales amounts are greater than $700,000.</source>
        </trans-unit><trans-unit id="150" translate="yes" xml:space="preserve">
          <source>In this case, the <ph id="ph1">`WHERE`</ph> clause won't help because it's used to filter only the <bpt id="p1">_</bpt>source data<ept id="p1">_</ept>.</source>
        </trans-unit><trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Although the aggregated total sales amount doesn't exist in the source data, it <bpt id="p1">_</bpt>is<ept id="p1">_</ept> part of the query result.</source>
        </trans-unit><trans-unit id="152" translate="yes" xml:space="preserve">
          <source>To filter the query result, add a <ph id="ph1">`HAVING`</ph> clause to the query.</source>
        </trans-unit><trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Adjust the query to include a <ph id="ph1">`HAVING`</ph> clause that looks like this:</source>
        </trans-unit><trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Notice that the <ph id="ph1">`SUM(S.[SalesAmount])`</ph> aggregation appears twice, both in <ph id="ph2">`SELECT`</ph> and <ph id="ph3">`HAVING`</ph>.</source>
        </trans-unit><trans-unit id="155" translate="yes" xml:space="preserve">
          <source>So far, T-SQL doesn't support the use of a column alias in the <ph id="ph1">`HAVING`</ph> clause.</source>
        </trans-unit><trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Sort results</source>
        </trans-unit><trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Notice that the results aren't sorted.</source>
        </trans-unit><trans-unit id="158" translate="yes" xml:space="preserve">
          <source>We need to fix that.</source>
        </trans-unit><trans-unit id="159" translate="yes" xml:space="preserve">
          <source>To sort the query result, use the <ph id="ph1">`ORDER BY`</ph> clause.</source>
        </trans-unit><trans-unit id="160" translate="yes" xml:space="preserve">
          <source>With an optional <ph id="ph1">`ASC`</ph> argument, the <ph id="ph2">`ORDER BY`</ph> clause sorts the query result in ascending order.</source>
        </trans-unit><trans-unit id="161" translate="yes" xml:space="preserve">
          <source>In contrast, using <ph id="ph1">`ORDER BY`</ph> with the <ph id="ph2">`DESC`</ph> argument sorts the query result in descending order.</source>
        </trans-unit><trans-unit id="162" translate="yes" xml:space="preserve">
          <source>To highlight the high-performance resellers, sort the query result in descending order.</source>
        </trans-unit><trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Change the query to look like the following:</source>
        </trans-unit><trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Run the query.</source>
        </trans-unit><trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The descended sorted result appears.</source>
        </trans-unit><trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Select the top section of data</source>
        </trans-unit><trans-unit id="167" translate="yes" xml:space="preserve">
          <source>What if you need to find the "Top 10" best resellers?</source>
        </trans-unit><trans-unit id="168" translate="yes" xml:space="preserve">
          <source>In SQL, use the <ph id="ph1">`TOP`</ph> argument of <ph id="ph2">`SELECT`</ph>.</source>
        </trans-unit><trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Remove the <ph id="ph1">`HAVING`</ph> clause, and add <ph id="ph2">`TOP 10`</ph> between the <ph id="ph3">`SELECT`</ph> keyword and the <ph id="ph4">`SUM`</ph> function call.</source>
        </trans-unit><trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The query should look something like the following:</source>
        </trans-unit><trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Run the query.</source>
        </trans-unit><trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The top 10 best warehouse resellers are listed.</source>
        </trans-unit><trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`TOP`</ph> filtering occurs later than <ph id="ph2">`ORDER BY`</ph>, which is why the result is the top 10 best warehouse resellers.</source>
        </trans-unit><trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Export results</source>
        </trans-unit><trans-unit id="175" translate="yes" xml:space="preserve">
          <source>You can export results directly from the query window by choosing to:</source>
        </trans-unit><trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Copy as text.</source>
        </trans-unit><trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Copy as text with headers.</source>
        </trans-unit><trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Save results to a file, which is typically comma-delimited.</source>
        </trans-unit><trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Right-click the data grid of the query result, and select <bpt id="p1">**</bpt>Select All<ept id="p1">**</ept>.</source>
        </trans-unit><trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Right-click the data grid again, and select <bpt id="p1">**</bpt>Copy with Headers<ept id="p1">**</ept>.</source>
        </trans-unit><trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Paste these results wherever necessary.</source>
        </trans-unit><trans-unit id="182" translate="yes" xml:space="preserve">
          <source>For example, you can paste results to an Excel sheet.</source>
        </trans-unit><trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Then you can visualize the data either with a pie chart or a bar chart to gain business insight.</source>
        </trans-unit><trans-unit id="184" translate="yes" xml:space="preserve">
          <source>You can even use an Excel PivotTable to go further.</source>
        </trans-unit><trans-unit id="185" translate="yes" xml:space="preserve">
          <source>This option is beyond the scope of this course.</source>
        </trans-unit><trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Screenshot of Observing Pie Chart</source>
        </trans-unit><trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Screenshot of Observing Pie Chart</source>
        </trans-unit></group></body></file></xliff>