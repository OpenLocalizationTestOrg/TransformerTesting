<?xml version="1.0"?><xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd"><file datatype="xml" original="5-table-geometries.md" source-language="en-US" target-language="en-US"><header><tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1931010" tool-company="Microsoft" /><xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5-table-geometries.4ed734e9ecc285545e7fecb3dd6f8048d3ed69de.skl</xliffext:skl_file_name><xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version><xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3cc74bcbe8166a66d0b217310de7ba21b815f26a</xliffext:ms.openlocfilehash><xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/24/2019</xliffext:ms.lasthandoff><xliffext:ms.openlocfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">learn-pr\data-ai-cert\design-azure-sql-data-warehouse\includes\5-table-geometries.md</xliffext:ms.openlocfilepath></header><body><group id="content" extype="content"><trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Azure SQL Data Warehouse uses Azure Storage to keep user data safe.</source>
        </trans-unit><trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Because data is stored and managed by Azure Storage, SQL Data Warehouse charges separately for storage consumption.</source>
        </trans-unit><trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The data is sharded into distributions to optimize system performance.</source>
        </trans-unit><trans-unit id="104" translate="yes" xml:space="preserve">
          <source>When you define the table, you can choose which sharding pattern to use to distribute the data.</source>
        </trans-unit><trans-unit id="105" translate="yes" xml:space="preserve">
          <source>SQL Data Warehouse supports these sharding patterns:</source>
        </trans-unit><trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Hash</source>
        </trans-unit><trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Round-robin</source>
        </trans-unit><trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Replicated</source>
        </trans-unit><trans-unit id="109" translate="yes" xml:space="preserve">
          <source>You can use the following strategies to determine which pattern is most suitable for your scenario:</source>
        </trans-unit><trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Type</source>
        </trans-unit><trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Great fit for...</source>
        </trans-unit><trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Watch out if...</source>
        </trans-unit><trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Replicated<ept id="p1">**</ept></source>
        </trans-unit><trans-unit id="114" translate="yes" xml:space="preserve">
          <source>✅ Small-dimension tables in a star schema with less than 2GB of storage after compression (~5x compression).</source>
        </trans-unit><trans-unit id="115" translate="yes" xml:space="preserve">
          <source>⛔ Many write transactions are on the table (insert/update/delete).</source>
        </trans-unit><trans-unit id="116" translate="yes" xml:space="preserve">
          <source>⛔ You change DWU provisioning frequently.</source>
        </trans-unit><trans-unit id="117" translate="yes" xml:space="preserve">
          <source>⛔ You use only 2-3 columns, but your table has many columns.</source>
        </trans-unit><trans-unit id="118" translate="yes" xml:space="preserve">
          <source>⛔ You index a replicated table.</source>
        </trans-unit><trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Round-robin (default)<ept id="p1">**</ept></source>
        </trans-unit><trans-unit id="120" translate="yes" xml:space="preserve">
          <source>✅ Temporary/Staging table</source>
        </trans-unit><trans-unit id="121" translate="yes" xml:space="preserve">
          <source>✅ No obvious joining key or good candidate column.</source>
        </trans-unit><trans-unit id="122" translate="yes" xml:space="preserve">
          <source>⛔ Performance is slow due to data movement.</source>
        </trans-unit><trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Hash<ept id="p1">**</ept></source>
        </trans-unit><trans-unit id="124" translate="yes" xml:space="preserve">
          <source>✅ Fact tables.</source>
        </trans-unit><trans-unit id="125" translate="yes" xml:space="preserve">
          <source>✅ Large-dimension tables.</source>
        </trans-unit><trans-unit id="126" translate="yes" xml:space="preserve">
          <source>⛔ The distribution key can't be updated.</source>
        </trans-unit><trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Here are some tips that can help you choose a strategy:</source>
        </trans-unit><trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Start with round-robin, but aspire to a hash-distribution strategy to take advantage of a massively parallel processing (MPP) architecture.</source>
        </trans-unit><trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Make sure that common hash keys have the same data format.</source>
        </trans-unit><trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Don't distribute on <ph id="ph1">`varchar`</ph> format.</source>
        </trans-unit><trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Use a common hash key between dimension tables and the associated fact table to allow join operations to be hash-distributed.</source>
        </trans-unit><trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Use <ph id="ph1">`sys.dm_pdw_request_steps`</ph> to analyze data movements behind queries and monitor how long broadcast and shuffle operations take.</source>
        </trans-unit><trans-unit id="133" translate="yes" xml:space="preserve">
          <source>This is helpful when you review your distribution strategy.</source>
        </trans-unit><trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Hash-distributed tables</source>
        </trans-unit><trans-unit id="135" translate="yes" xml:space="preserve">
          <source>A hash-distributed table can deliver the highest query performance for joins and aggregations on large tables.</source>
        </trans-unit><trans-unit id="136" translate="yes" xml:space="preserve">
          <source>To shard data into a hash-distributed table, SQL Data Warehouse uses a hash function to assign each row to one distribution deterministically.</source>
        </trans-unit><trans-unit id="137" translate="yes" xml:space="preserve">
          <source>In the table definition, one of the columns is designated the distribution column.</source>
        </trans-unit><trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The hash function uses the values in the distribution column to assign each row to a distribution.</source>
        </trans-unit><trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Here's an example of a <ph id="ph1">`CREATE TABLE`</ph> statement that defines a hash distribution:</source>
        </trans-unit><trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Round-robin distributed tables</source>
        </trans-unit><trans-unit id="141" translate="yes" xml:space="preserve">
          <source>A round-robin table is the most straightforward table you can use to create and deliver fast performance in a staging table for loads.</source>
        </trans-unit><trans-unit id="142" translate="yes" xml:space="preserve">
          <source>A round-robin distributed table distributes data evenly across the table but without additional optimization.</source>
        </trans-unit><trans-unit id="143" translate="yes" xml:space="preserve">
          <source>A distribution is first chosen at random.</source>
        </trans-unit><trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Then, buffers of rows are assigned to distributions sequentially.</source>
        </trans-unit><trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Loading data into a round-robin table is quick, but query performance often is better in hash-distributed tables.</source>
        </trans-unit><trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Joins on round-robin tables require reshuffling data and this takes more time.</source>
        </trans-unit><trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Here's an example of a <ph id="ph1">`CREATE TABLE`</ph> statement that defines a round-robin distribution:</source>
        </trans-unit><trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Replicated tables</source>
        </trans-unit><trans-unit id="149" translate="yes" xml:space="preserve">
          <source>A replicated table provides the fastest query performance for small tables.</source>
        </trans-unit><trans-unit id="150" translate="yes" xml:space="preserve">
          <source>A table that is replicated caches a full copy on each compute node.</source>
        </trans-unit><trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Consequently, replicating a table removes the need to transfer data among compute nodes before a join or aggregation.</source>
        </trans-unit><trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Replicated tables work best in small tables.</source>
        </trans-unit><trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Extra storage is required, and additional overhead is incurred when writing data, which make large tables impractical.</source>
        </trans-unit><trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Here's an example of a <ph id="ph1">`CREATE TABLE`</ph> statement that defines a replicated distribution:</source>
        </trans-unit></group></body></file></xliff>