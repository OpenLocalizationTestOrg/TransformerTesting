<?xml version="1.0"?><xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd"><file datatype="xml" original="2-types-of-dw-solutions.md" source-language="en-US" target-language="en-US"><header><tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1931010" tool-company="Microsoft" /><xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2-types-of-dw-solutions.a17673621453a62f430eb375efe475629ebdf7f3.skl</xliffext:skl_file_name><xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version><xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">10d7a6885156fe215542c202b7232a31b98aea18</xliffext:ms.openlocfilehash><xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">05/13/2019</xliffext:ms.lasthandoff><xliffext:ms.openlocfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">learn-pr\data-ai-cert\design-azure-sql-data-warehouse\includes\2-types-of-dw-solutions.md</xliffext:ms.openlocfilepath></header><body><group id="content" extype="content"><trans-unit id="101" translate="yes" xml:space="preserve">
          <source>There are three common types of data warehouse solutions:</source>
        </trans-unit><trans-unit id="102" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Enterprise data warehouse<ept id="p1">**</ept>: An enterprise data warehouse (EDW) is a centralized data store that provides analytics and decision support services across the entire enterprise.</source>
        </trans-unit><trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Data flows into the warehouse from multiple transactional systems, relational databases, and other data sources on a periodic basis.</source>
        </trans-unit><trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The stored data is used for historical and trend analysis reporting.</source>
        </trans-unit><trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The data warehouse acts as a central repository for many subject areas.</source>
        </trans-unit><trans-unit id="106" translate="yes" xml:space="preserve">
          <source>It contains the "single source of truth."</source>
        </trans-unit><trans-unit id="107" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Data mart<ept id="p1">**</ept>: A data mart serves the same purpose as a data warehouse, but it's designed for the needs of a <bpt id="p2">_</bpt>single team or business unit<ept id="p2">_</ept>, like sales or human resources.</source>
        </trans-unit><trans-unit id="108" translate="yes" xml:space="preserve">
          <source>A data mart is smaller and more focused, and it tends to serve a single subject area.</source>
        </trans-unit><trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Operational data store<ept id="p1">**</ept>: An operational data store (ODS) is an interim store that's used to integrate real-time or near real-time data from multiple sources for additional operations on the data.</source>
        </trans-unit><trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Because the data is refreshed in real time, it's widely preferred for performing routine activities like storing the records of employees or aggregating data from multiple sites for real-time reporting.</source>
        </trans-unit><trans-unit id="111" translate="yes" xml:space="preserve">
          <source>A data warehouse is useful when the goal is to reduce stress on production systems and to reorganize, index, or filter multiple data sources into a single storage area.</source>
        </trans-unit><trans-unit id="112" translate="yes" xml:space="preserve">
          <source>To accomplish this goal, the organization should deliberately think about and design how it organizes and structures its data.</source>
        </trans-unit><trans-unit id="113" translate="yes" xml:space="preserve">
          <source>A data warehouse isn't an unstructured dumping ground for tables from various sources.</source>
        </trans-unit><trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Designing a data warehouse solution</source>
        </trans-unit><trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Data warehouse solutions can be classified by their technical <bpt id="p1">_</bpt>relational constructs<ept id="p1">_</ept> and the methodologies that are used to define them.</source>
        </trans-unit><trans-unit id="116" translate="yes" xml:space="preserve">
          <source>There are two typical architectural approaches used to design data warehouses:</source>
        </trans-unit><trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Bottom-Up Architectural Design, by Ralph Kimball</source>
        </trans-unit><trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Bottom-up architectural design is based on <bpt id="p1">_</bpt>connected data marts<ept id="p1">_</ept>.</source>
        </trans-unit><trans-unit id="119" translate="yes" xml:space="preserve">
          <source>You start creating your data warehouse by building individual data marts for departmental subject areas.</source>
        </trans-unit><trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Then, you connect the data marts via a <bpt id="p1">_</bpt>data warehouse bus<ept id="p1">_</ept> by using <bpt id="p2">_</bpt>conforming dimensions<ept id="p2">_</ept>.</source>
        </trans-unit><trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The core building blocks of this approach are dependent on the star schema model that provides the multidimensional OLAP cube capabilities for data analysis within a relational database and SQL.</source>
        </trans-unit><trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The benefit of this approach is that you can start small.</source>
        </trans-unit><trans-unit id="123" translate="yes" xml:space="preserve">
          <source>You gradually build up the larger data warehouse through relatively smaller investments over a period of time.</source>
        </trans-unit><trans-unit id="124" translate="yes" xml:space="preserve">
          <source>This option provides a quicker path to return on investment (ROI) in the solution.</source>
        </trans-unit><trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Top-Down Architectural Design, by Bill Inmon</source>
        </trans-unit><trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The top-down architectural approach is about creating a single, integrated <bpt id="p1">_</bpt>normalized warehouse<ept id="p1">_</ept>.</source>
        </trans-unit><trans-unit id="127" translate="yes" xml:space="preserve">
          <source>In a normalized warehouse, the internal relational constructs follow the rules of normalization.</source>
        </trans-unit><trans-unit id="128" translate="yes" xml:space="preserve">
          <source>This architectural style supports transitional integrity because the data comes directly from the OLTP source systems.</source>
        </trans-unit><trans-unit id="129" translate="yes" xml:space="preserve">
          <source>This approach can provide more consistent and reliable data, but it requires rigorous design, development, and testing.</source>
        </trans-unit><trans-unit id="130" translate="yes" xml:space="preserve">
          <source>This approach also requires substantial financial investments early on, and the ROI doesn't start until the entire data warehouse becomes fully functional.</source>
        </trans-unit><trans-unit id="131" translate="yes" xml:space="preserve">
          <source>A common myth is that bottom-up and top-down architectures are incompatible.</source>
        </trans-unit><trans-unit id="132" translate="yes" xml:space="preserve">
          <source>However, the principles described by Kimball and Inmon can be used together as needed to provide a better solution.</source>
        </trans-unit></group></body></file></xliff>