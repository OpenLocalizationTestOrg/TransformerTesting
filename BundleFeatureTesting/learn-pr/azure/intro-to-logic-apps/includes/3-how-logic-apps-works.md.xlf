<?xml version="1.0"?><xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd"><file datatype="xml" original="3-how-logic-apps-works.md" source-language="en-US" target-language="en-US"><header><tool tool-id="mdxliff" tool-name="mdxliff"  tool-company="Microsoft" /><xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3-how-logic-apps-works.a8a074.44b3bef0030febf35c6c224be277f0dc17263bdb.skl</xliffext:skl_file_name><xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version><xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">44b3bef0030febf35c6c224be277f0dc17263bdb</xliffext:ms.openlocfilehash><xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ba7e452ac39d7f09a5646044b44de0e1cdc54982</xliffext:ms.sourcegitcommit><xliffext:ms.openlocfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">learn-pr\azure\intro-to-logic-apps\includes\3-how-logic-apps-works.md</xliffext:ms.openlocfilepath></header><body><group id="content" extype="content"><trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Now that we know the basics of Logic Apps, let's see how it works behind the scenes.</source>
        </trans-unit><trans-unit id="102" translate="yes" xml:space="preserve">
          <source>This information should help you decide whether Logic Apps will work for you without any customization.</source>
        </trans-unit><trans-unit id="103" translate="yes" xml:space="preserve">
          <source>In cases where you do need create custom components, you'll be able to determine how difficult it will be.</source>
        </trans-unit><trans-unit id="104" translate="yes" xml:space="preserve">
          <source>What is a connector?</source>
        </trans-unit><trans-unit id="105" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">*</bpt>connector<ept id="p1">*</ept> is a component that provides an interface to an external service.</source>
        </trans-unit><trans-unit id="106" translate="yes" xml:space="preserve">
          <source>For example, the Twitter connector allows you to send and retrieve tweets, while the Office 365 Outlook connector lets you manage your email, calendar, and contacts.</source>
        </trans-unit><trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Logic Apps provides hundreds of pre-built connectors that you can use to create your apps.</source>
        </trans-unit><trans-unit id="108" translate="yes" xml:space="preserve">
          <source>A connector uses the external service's REST or SOAP API to do its work.</source>
        </trans-unit><trans-unit id="109" translate="yes" xml:space="preserve">
          <source>When you use a connector in your Logic App, the connector calls the service's underlying API for you.</source>
        </trans-unit><trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The following illustration shows the Twitter connector and its use of the Twitter REST API.</source>
        </trans-unit><trans-unit id="111" translate="yes" xml:space="preserve">
          <source>An illustration showing the Twitter connector calling methods in the Twitter API.</source>
        </trans-unit><trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Custom connectors</source>
        </trans-unit><trans-unit id="113" translate="yes" xml:space="preserve">
          <source>You can write custom connectors to access services that don't have pre-built connectors.</source>
        </trans-unit><trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The services must have a REST or SOAP API.</source>
        </trans-unit><trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The requirement that the services provide an API shouldn't be too surprising since connectors are essentially wrappers around that underlying API.</source>
        </trans-unit><trans-unit id="116" translate="yes" xml:space="preserve">
          <source>To create a custom connector, you first generate an OpenAPI or Postman description of the API.</source>
        </trans-unit><trans-unit id="117" translate="yes" xml:space="preserve">
          <source>You then use that API description to create a Custom Connector resource in the Azure portal.</source>
        </trans-unit><trans-unit id="118" translate="yes" xml:space="preserve">
          <source>You can give your connector a name, an icon, and a description for each operation.</source>
        </trans-unit><trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The following illustration shows an example of the process.</source>
        </trans-unit><trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Notice that there's no coding involved.</source>
        </trans-unit><trans-unit id="121" translate="yes" xml:space="preserve">
          <source>An illustration showing the steps required to create a custom connector to a service that has an existing REST API.</source>
        </trans-unit><trans-unit id="122" translate="yes" xml:space="preserve">
          <source>You can use your new connector in your own apps and share it with other people in your organization.</source>
        </trans-unit><trans-unit id="123" translate="yes" xml:space="preserve">
          <source>You can also submit your connector to Microsoft for certification.</source>
        </trans-unit><trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Once your connector is certified, it will be included in the set of connectors available to all users.</source>
        </trans-unit><trans-unit id="125" translate="yes" xml:space="preserve">
          <source>What are triggers and actions?</source>
        </trans-unit><trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Workflows are built from different types of tasks.</source>
        </trans-unit><trans-unit id="127" translate="yes" xml:space="preserve">
          <source>For example, in our social-media monitor scenario we start the workflow when a new tweet is posted, perform work like detect the sentiment, and make a decision based on the sentiment score.</source>
        </trans-unit><trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Logic Apps uses the terms <bpt id="p1">*</bpt>trigger<ept id="p1">*</ept>, <bpt id="p2">*</bpt>action<ept id="p2">*</ept>, and <bpt id="p3">*</bpt>control action<ept id="p3">*</ept> for these concepts.</source>
        </trans-unit><trans-unit id="129" translate="yes" xml:space="preserve">
          <source>These operations are the building blocks of Logic Apps.</source>
        </trans-unit><trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The following illustration shows how we use each type of step in the social-media monitor app.</source>
        </trans-unit><trans-unit id="131" translate="yes" xml:space="preserve">
          <source>An illustration showing the flowchart for the shoe company social-media monitor app.</source>
        </trans-unit><trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Each step is labeled with whether it's a trigger, an action, or a control action.</source>
        </trans-unit><trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Let's be more specific about the definitions for trigger and action:</source>
        </trans-unit><trans-unit id="134" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">*</bpt>trigger<ept id="p1">*</ept> is an event that occurs when a specific set of conditions is satisfied.</source>
        </trans-unit><trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Triggers activate automatically when conditions are met.</source>
        </trans-unit><trans-unit id="136" translate="yes" xml:space="preserve">
          <source>For example, when a timer expires or data becomes available.</source>
        </trans-unit><trans-unit id="137" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">*</bpt>action<ept id="p1">*</ept> is an operation that executes a task in your business process.</source>
        </trans-unit><trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Actions run when a trigger activates or another action completes.</source>
        </trans-unit><trans-unit id="139" translate="yes" xml:space="preserve">
          <source>A connector is a container for related triggers and actions.</source>
        </trans-unit><trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Let's look at a few examples.</source>
        </trans-unit><trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The Twitter connector lets your Logic App interact with Twitter.</source>
        </trans-unit><trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The social-media monitor app would use a trigger from the Twitter connector to determine when new relevant tweets are available.</source>
        </trans-unit><trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The following illustration shows the Twitter connector with its trigger and actions.</source>
        </trans-unit><trans-unit id="144" translate="yes" xml:space="preserve">
          <source>An illustration showing the Twitter connector.</source>
        </trans-unit><trans-unit id="145" translate="yes" xml:space="preserve">
          <source>It provides a trigger to notify you of new tweets and actions to let you send tweets and manage your account.</source>
        </trans-unit><trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Next, we have the Dropbox connector.</source>
        </trans-unit><trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Suppose you were working with a small team on a project that stored its shared data in Dropbox.</source>
        </trans-unit><trans-unit id="148" translate="yes" xml:space="preserve">
          <source>You could build a workflow that detects when someone modifies any of your files and sends a notification to the other team members.</source>
        </trans-unit><trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The following illustration shows the Dropbox connector with its triggers and actions.</source>
        </trans-unit><trans-unit id="150" translate="yes" xml:space="preserve">
          <source>An illustration showing the Dropbox connector.</source>
        </trans-unit><trans-unit id="151" translate="yes" xml:space="preserve">
          <source>It provides triggers to notify you when files are created or modified and actions to manage files.</source>
        </trans-unit><trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Finally, let's look at the Twilio connector.</source>
        </trans-unit><trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Most connectors offer both triggers and actions, but this one only has actions.</source>
        </trans-unit><trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The Twilio connector is great whenever you want to send text messages for notifications.</source>
        </trans-unit><trans-unit id="155" translate="yes" xml:space="preserve">
          <source>For example, you could use it in the Dropbox scenario to let team members know that a shared file had changed.</source>
        </trans-unit><trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The following illustration shows the Twilio connector and its actions.</source>
        </trans-unit><trans-unit id="157" translate="yes" xml:space="preserve">
          <source>An illustration showing the Twilio connector.</source>
        </trans-unit><trans-unit id="158" translate="yes" xml:space="preserve">
          <source>It provides actions to send and retrieve text messages but doesn't include any triggers.</source>
        </trans-unit><trans-unit id="159" translate="yes" xml:space="preserve">
          <source>How to build Logic Apps from triggers and actions</source>
        </trans-unit><trans-unit id="160" translate="yes" xml:space="preserve">
          <source>You build a Logic App from triggers and actions.</source>
        </trans-unit><trans-unit id="161" translate="yes" xml:space="preserve">
          <source>An app must begin with a trigger.</source>
        </trans-unit><trans-unit id="162" translate="yes" xml:space="preserve">
          <source>After the trigger, you include as many actions as you need to implement your workflow.</source>
        </trans-unit><trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The following illustration shows the trigger and actions used in the social-media monitor app.</source>
        </trans-unit><trans-unit id="164" translate="yes" xml:space="preserve">
          <source>An illustration of the trigger and actions in the social-media monitor Logic App.</source>
        </trans-unit><trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The illustration shows the use of the "When a new tweet is posted" Twitter trigger to launch the Logic App.</source>
        </trans-unit><trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The trigger is followed by three actions: "Detect sentiment" from the Text Analytics service, "Insert row" from SQL Server, and "Send email" from Outlook.com.</source>
        </trans-unit><trans-unit id="167" translate="yes" xml:space="preserve">
          <source>How do triggers and actions work together?</source>
        </trans-unit><trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Triggers and actions are essentially function calls to an underlying API operation.</source>
        </trans-unit><trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Each operation has inputs and outputs.</source>
        </trans-unit><trans-unit id="170" translate="yes" xml:space="preserve">
          <source>For example, the "When a new tweet is posted" Twitter trigger takes in a search string and returns the tweets that contain that string.</source>
        </trans-unit><trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The "Detect sentiment" action takes a string as input and returns the sentiment score as a floating-point number.</source>
        </trans-unit><trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The following illustration shows these two operations.</source>
        </trans-unit><trans-unit id="173" translate="yes" xml:space="preserve">
          <source>An illustration of the input and output of the "When a new tweet is posted" trigger and the "Detect sentiment" action.</source>
        </trans-unit><trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Logic Apps automatically makes the return values available throughout the rest of the operations.</source>
        </trans-unit><trans-unit id="175" translate="yes" xml:space="preserve">
          <source>This feature lets you pass the results from one operation as input to the next operation.</source>
        </trans-unit><trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The following illustration shows the data flow for the first two operations in the social-media monitor app.</source>
        </trans-unit><trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Notice that the results from an operation are available in all of the following steps.</source>
        </trans-unit><trans-unit id="178" translate="yes" xml:space="preserve">
          <source>An illustration showing how the results of all preceding operations are available to all later steps of the Logic App.</source>
        </trans-unit><trans-unit id="179" translate="yes" xml:space="preserve">
          <source>What are control actions?</source>
        </trans-unit><trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Most workflows need to do different actions based on the data being processed.</source>
        </trans-unit><trans-unit id="181" translate="yes" xml:space="preserve">
          <source>For example, an expense report might be routed to a different manager based on the amount.</source>
        </trans-unit><trans-unit id="182" translate="yes" xml:space="preserve">
          <source>In the social-media monitor app, we need to branch based on the sentiment score of the tweet.</source>
        </trans-unit><trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The following illustration shows the flowchart for the social-media monitor app with the control logic highlighted.</source>
        </trans-unit><trans-unit id="184" translate="yes" xml:space="preserve">
          <source>An illustration showing how the social-media monitor app branches based on the sentiment of the tweet.</source>
        </trans-unit><trans-unit id="185" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Control actions<ept id="p1">*</ept> are special actions built-in to Logic Apps that provides these control constructs:</source>
        </trans-unit><trans-unit id="186" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Condition<ept id="p1">*</ept> statements controlled by a Boolean expression</source>
        </trans-unit><trans-unit id="187" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Switch<ept id="p1">*</ept> statements</source>
        </trans-unit><trans-unit id="188" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>For each<ept id="p1">*</ept> and <bpt id="p2">*</bpt>Until<ept id="p2">*</ept> loops</source>
        </trans-unit><trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Unconditional <bpt id="p1">*</bpt>Branch<ept id="p1">*</ept> instructions.</source>
        </trans-unit><trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The following illustration shows the use of a <bpt id="p1">*</bpt>Condition<ept id="p1">*</ept> statement in the social-media monitoring application.</source>
        </trans-unit><trans-unit id="191" translate="yes" xml:space="preserve">
          <source>An illustration showing the Logic Apps control action used to branch the social-media monitor app based on the sentiment of the tweet.</source>
        </trans-unit><trans-unit id="192" translate="yes" xml:space="preserve">
          <source>What is the Logic Apps Designer?</source>
        </trans-unit><trans-unit id="193" translate="yes" xml:space="preserve">
          <source>The Logic Apps Designer is a graphical tool for creating your workflows.</source>
        </trans-unit><trans-unit id="194" translate="yes" xml:space="preserve">
          <source>It gives you a design canvas that you use to add a trigger and actions to your app.</source>
        </trans-unit><trans-unit id="195" translate="yes" xml:space="preserve">
          <source>For example, the social-media monitor app uses the <bpt id="p1">_</bpt>When a new tweet is posted<ept id="p1">_</ept> trigger, a <bpt id="p2">_</bpt>Condition<ept id="p2">_</ept> to branch, and the <bpt id="p3">_</bpt>Detect Sentiment<ept id="p3">_</ept>, <bpt id="p4">_</bpt>Insert row<ept id="p4">_</ept>, and <bpt id="p5">_</bpt>Send an email<ept id="p5">_</ept> actions.</source>
        </trans-unit><trans-unit id="196" translate="yes" xml:space="preserve">
          <source>The following screenshot shows the social-media monitor Logic App displayed in the Designer.</source>
        </trans-unit><trans-unit id="197" translate="yes" xml:space="preserve">
          <source>A screenshot showing an example Logic App in the Logic App Designer.</source>
        </trans-unit><trans-unit id="198" translate="yes" xml:space="preserve">
          <source>The app is displayed using rectangular areas to represent the starting trigger and each of the actions.</source>
        </trans-unit><trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Arrows connect the rectangles to show the execution flow through the app.</source>
        </trans-unit></group></body></file></xliff>