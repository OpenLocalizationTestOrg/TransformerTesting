<?xml version="1.0"?><xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd"><file datatype="xml" original="5-exercise-configure-applications-to-send-or-receive-messages-through-an-event-hub.md" source-language="en-US" target-language="en-US"><header><tool tool-id="mdxliff" tool-name="mdxliff"  tool-company="Microsoft" /><xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5-exercise-configure-applications-to-send-or-receive-messages-through-an-event-hub.dd6860.d9d06eca137a4dea4da1ece8c3405447384afa1f.skl</xliffext:skl_file_name><xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version><xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d9d06eca137a4dea4da1ece8c3405447384afa1f</xliffext:ms.openlocfilehash><xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ba7e452ac39d7f09a5646044b44de0e1cdc54982</xliffext:ms.sourcegitcommit><xliffext:ms.openlocfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">learn-pr\azure\enable-reliable-messaging-for-big-data-apps-using-event-hubs\includes\5-exercise-configure-applications-to-send-or-receive-messages-through-an-event-hub.md</xliffext:ms.openlocfilepath></header><body><group id="content" extype="content"><trans-unit id="101" translate="yes" xml:space="preserve">
          <source>You're now ready to configure your publisher and consumer applications for your Event Hub.</source>
        </trans-unit><trans-unit id="102" translate="yes" xml:space="preserve">
          <source>In this unit, you'll configure these applications to send or receive messages through your Event Hub.</source>
        </trans-unit><trans-unit id="103" translate="yes" xml:space="preserve">
          <source>These applications are stored in a GitHub repository.</source>
        </trans-unit><trans-unit id="104" translate="yes" xml:space="preserve">
          <source>You'll configure two separate applications; one acts as the message sender (<bpt id="p1">**</bpt>SimpleSend<ept id="p1">**</ept>), the other as the message receiver (<bpt id="p2">**</bpt>EventProcessorSample<ept id="p2">**</ept>).</source>
        </trans-unit><trans-unit id="105" translate="yes" xml:space="preserve">
          <source>These are Java applications, which enable you to do everything within the browser.</source>
        </trans-unit><trans-unit id="106" translate="yes" xml:space="preserve">
          <source>However, the same configuration is needed for any platform, such as .NET.</source>
        </trans-unit><trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Create a general-purpose, standard storage account</source>
        </trans-unit><trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The Java receiver application, that you'll configure in this unit, stores messages in Azure Blob Storage.</source>
        </trans-unit><trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Blob Storage requires a storage account.</source>
        </trans-unit><trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Create a storage account (general-purpose V2) using the <ph id="ph1">`storage account create`</ph> command.</source>
        </trans-unit><trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Remember we set a default resource group and location, so even though those parameters are normally <bpt id="p1">_</bpt>required<ept id="p1">_</ept>, we can leave them off.</source>
        </trans-unit><trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Parameter</source>
        </trans-unit><trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit><trans-unit id="114" translate="yes" xml:space="preserve">
          <source>--name (required)</source>
        </trans-unit><trans-unit id="115" translate="yes" xml:space="preserve">
          <source>A name for your storage account.</source>
        </trans-unit><trans-unit id="116" translate="yes" xml:space="preserve">
          <source>--resource-group (required)</source>
        </trans-unit><trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The resource group owner.</source>
        </trans-unit><trans-unit id="118" translate="yes" xml:space="preserve">
          <source>We'll use the pre-created sandbox resource group.</source>
        </trans-unit><trans-unit id="119" translate="yes" xml:space="preserve">
          <source>--location (optional)</source>
        </trans-unit><trans-unit id="120" translate="yes" xml:space="preserve">
          <source>An optional location if you want the storage account in a specific place vs. the resource group location.</source>
        </trans-unit><trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Set the storage account name into a variable.</source>
        </trans-unit><trans-unit id="122" translate="yes" xml:space="preserve">
          <source>It must be composed of all lower-case letters, numbers, with hyphen separators allowed.</source>
        </trans-unit><trans-unit id="123" translate="yes" xml:space="preserve">
          <source>It also must be unique within Azure.</source>
        </trans-unit><trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Then use this command to create the storage account.</source>
        </trans-unit><trans-unit id="125" translate="yes" xml:space="preserve">
          <source>If the storage account creation fails, change your environment variable and try again.</source>
        </trans-unit><trans-unit id="126" translate="yes" xml:space="preserve">
          <source>List all the access keys associated with your storage account using the <ph id="ph1">`account keys list`</ph> command.</source>
        </trans-unit><trans-unit id="127" translate="yes" xml:space="preserve">
          <source>It takes your account name and the resource group (which is defaulted).</source>
        </trans-unit><trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Access keys associated with your storage account are listed.</source>
        </trans-unit><trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Copy and save the value of <bpt id="p1">**</bpt>key<ept id="p1">**</ept> for future use.</source>
        </trans-unit><trans-unit id="130" translate="yes" xml:space="preserve">
          <source>You'll need this key to access your storage account.</source>
        </trans-unit><trans-unit id="131" translate="yes" xml:space="preserve">
          <source>View the connections string for your storage account using the following command:</source>
        </trans-unit><trans-unit id="132" translate="yes" xml:space="preserve">
          <source>This command returns the connection details for the storage account.</source>
        </trans-unit><trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Copy and save the <bpt id="p1">_</bpt>value<ept id="p1">_</ept> of <bpt id="p2">**</bpt>connectionString<ept id="p2">**</ept>.</source>
        </trans-unit><trans-unit id="134" translate="yes" xml:space="preserve">
          <source>It should look something like:</source>
        </trans-unit><trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Create a container called <bpt id="p1">**</bpt>messages<ept id="p1">**</ept> in your storage account using the following command.</source>
        </trans-unit><trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Use the <bpt id="p1">**</bpt>connectionString<ept id="p1">**</ept> you copied in the previous step:</source>
        </trans-unit><trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Clone the Event Hubs GitHub repository</source>
        </trans-unit><trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Use the following steps to clone the Event Hubs GitHub repository with <ph id="ph1">`git`</ph>.</source>
        </trans-unit><trans-unit id="139" translate="yes" xml:space="preserve">
          <source>You can execute this right in the Cloud Shell.</source>
        </trans-unit><trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The source files for the applications that you'll build in this unit are located in a <bpt id="p1">[</bpt>GitHub repository<ept id="p1">](https://github.com/Azure/azure-event-hubs)</ept>.</source>
        </trans-unit><trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Use the following commands to make sure that you are in your home directory in Cloud Shell, and then to clone this repository:</source>
        </trans-unit><trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The repository is cloned to your home folder.</source>
        </trans-unit><trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Edit SimpleSend.java</source>
        </trans-unit><trans-unit id="144" translate="yes" xml:space="preserve">
          <source>We're going to use the built-in Cloud Shell Code editor.</source>
        </trans-unit><trans-unit id="145" translate="yes" xml:space="preserve">
          <source>This is based on the Monaco editor and is similar to Visual Studio Code, but completely online.</source>
        </trans-unit><trans-unit id="146" translate="yes" xml:space="preserve">
          <source>We'll use the editor to modify the SimpleSend application and add your Event Hubs namespace, Event Hub name, shared access policy name, and primary key.</source>
        </trans-unit><trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The main commands are displayed at the bottom of the editor window.</source>
        </trans-unit><trans-unit id="148" translate="yes" xml:space="preserve">
          <source>You'll need to write out your edits using <bpt id="p1">&lt;kbd&gt;</bpt>Ctrl+O<ept id="p1">&lt;/kbd&gt;</ept>, and then <bpt id="p2">&lt;kbd&gt;</bpt>ENTER<ept id="p2">&lt;/kbd&gt;</ept> to confirm the output file name, and exit the editor using <bpt id="p3">&lt;kbd&gt;</bpt>Ctrl+X<ept id="p3">&lt;/kbd&gt;</ept>.</source>
        </trans-unit><trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Alternatively, the editor has a "..." menu in the top/right corner for all the editing commands.</source>
        </trans-unit><trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Change to the <bpt id="p1">**</bpt>SimpleSend<ept id="p1">**</ept> folder.</source>
        </trans-unit><trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Open the code editor in the current folder.</source>
        </trans-unit><trans-unit id="152" translate="yes" xml:space="preserve">
          <source>This will show a list of files on the left and an editor space on the right.</source>
        </trans-unit><trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Open the <bpt id="p1">**</bpt>SimpleSend.java<ept id="p1">**</ept> file by selecting it from the file list.</source>
        </trans-unit><trans-unit id="154" translate="yes" xml:space="preserve">
          <source>In the editor, locate and replace the following strings:</source>
        </trans-unit><trans-unit id="155" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`"Your Event Hubs namespace name"`</ph> with the name of your Event Hub namespace.</source>
        </trans-unit><trans-unit id="156" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`"Your Event Hub"`</ph> with the name of your Event Hub.</source>
        </trans-unit><trans-unit id="157" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`"Your policy name"`</ph> with <bpt id="p1">**</bpt>RootManageSharedAccessKey<ept id="p1">**</ept>.</source>
        </trans-unit><trans-unit id="158" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`"Your primary SAS key"`</ph> with the value of the <bpt id="p1">**</bpt>primaryKey<ept id="p1">**</ept> key for your Event Hub namespace that you saved earlier.</source>
        </trans-unit><trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Unlike the terminal window, the editor can use typical copy/paste keyboard accelerator keys for your OS.</source>
        </trans-unit><trans-unit id="160" translate="yes" xml:space="preserve">
          <source>If you've forgotten some of them, you can switch down to the terminal window below the editor and use the <ph id="ph1">`echo`</ph> command to list out one of the environment variables.</source>
        </trans-unit><trans-unit id="161" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit><trans-unit id="162" translate="yes" xml:space="preserve">
          <source>When you create an Event Hubs namespace, a 256-bit SAS key called <bpt id="p1">**</bpt>RootManageSharedAccessKey<ept id="p1">**</ept> is created that has an associated pair of primary and secondary keys that grant send, listen, and manage rights to the namespace.</source>
        </trans-unit><trans-unit id="163" translate="yes" xml:space="preserve">
          <source>In the previous unit, you displayed the key using an Azure CLI command, and you can also find this key by opening the <bpt id="p1">**</bpt>Shared access policies<ept id="p1">**</ept> page for your Event Hubs namespace in the Azure portal.</source>
        </trans-unit><trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Save <bpt id="p1">**</bpt>SimpleSend.java<ept id="p1">**</ept> either through the "..." menu, or the accelerator key (<bpt id="p2">&lt;kbd&gt;</bpt>Ctrl+S<ept id="p2">&lt;/kbd&gt;</ept> on Windows and Linux, <bpt id="p3">&lt;kbd&gt;</bpt>Cmd+S<ept id="p3">&lt;/kbd&gt;</ept> on macOS).</source>
        </trans-unit><trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Close the editor through the "..." menu, or the accelerator key <bpt id="p1">&lt;kbd&gt;</bpt>CTRL+Q<ept id="p1">&lt;/kbd&gt;</ept>.</source>
        </trans-unit><trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Use Maven to build SimpleSend.java</source>
        </trans-unit><trans-unit id="167" translate="yes" xml:space="preserve">
          <source>You'll now build the Java application using <bpt id="p1">**</bpt>mvn<ept id="p1">**</ept> commands.</source>
        </trans-unit><trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Change back to the main <bpt id="p1">**</bpt>SimpleSend<ept id="p1">**</ept> folder.</source>
        </trans-unit><trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Build the Java SimpleSend application.</source>
        </trans-unit><trans-unit id="170" translate="yes" xml:space="preserve">
          <source>This ensures that your application  uses the connection details for your Event Hub:</source>
        </trans-unit><trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The build process may take several minutes to complete.</source>
        </trans-unit><trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Ensure that you see the <bpt id="p1">**</bpt>[INFO] BUILD SUCCESS<ept id="p1">**</ept> message before continuing.</source>
        </trans-unit><trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Build results for sender application</source>
        </trans-unit><trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Edit EventProcessorSample.java</source>
        </trans-unit><trans-unit id="175" translate="yes" xml:space="preserve">
          <source>You'll now configure a <bpt id="p1">**</bpt>receiver<ept id="p1">**</ept> (also known as <bpt id="p2">**</bpt>subscribers<ept id="p2">**</ept> or <bpt id="p3">**</bpt>consumers<ept id="p3">**</ept>) application to ingest data from your Event Hub.</source>
        </trans-unit><trans-unit id="176" translate="yes" xml:space="preserve">
          <source>For the receiver application, two methods are available; <bpt id="p1">**</bpt>EventHubReceiver<ept id="p1">**</ept> and <bpt id="p2">**</bpt>EventProcessorHost<ept id="p2">**</ept>.</source>
        </trans-unit><trans-unit id="177" translate="yes" xml:space="preserve">
          <source>EventProcessorHost is built on top of EventHubReceiver, but provides simpler programmatic interface than EventHubReceiver.</source>
        </trans-unit><trans-unit id="178" translate="yes" xml:space="preserve">
          <source>EventProcessorHost can automatically distribute message partitions across multiple instances of EventProcessorHost using the same storage account.</source>
        </trans-unit><trans-unit id="179" translate="yes" xml:space="preserve">
          <source>In this unit, you’ll use the EventProcessorHost method.</source>
        </trans-unit><trans-unit id="180" translate="yes" xml:space="preserve">
          <source>You'll edit the EventProcessorSample application to add your Event Hubs namespace, Event Hub name, shared access policy name and primary key, storage account name, connection string, and container name.</source>
        </trans-unit><trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Change to the <bpt id="p1">**</bpt>EventProcessorSample<ept id="p1">**</ept> folder using the following command:</source>
        </trans-unit><trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Open the code editor.</source>
        </trans-unit><trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Select the <bpt id="p1">**</bpt>EventProcessorSample.java<ept id="p1">**</ept> file.</source>
        </trans-unit><trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Locate and replace the following strings in the editor:</source>
        </trans-unit><trans-unit id="185" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`----ServiceBusNamespaceName----`</ph> with the name of your Event Hubs namespace.</source>
        </trans-unit><trans-unit id="186" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`----EventHubName----`</ph> with the name of your Event Hub.</source>
        </trans-unit><trans-unit id="187" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`----SharedAccessSignatureKeyName----`</ph> with <bpt id="p1">**</bpt>RootManageSharedAccessKey<ept id="p1">**</ept>.</source>
        </trans-unit><trans-unit id="188" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`----SharedAccessSignatureKey----`</ph> with the value of the <bpt id="p1">**</bpt>primaryKey<ept id="p1">**</ept> key for your Event Hubs namespace that you saved earlier.</source>
        </trans-unit><trans-unit id="189" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`----AzureStorageConnectionString----`</ph> with your storage account connection string that you saved earlier.</source>
        </trans-unit><trans-unit id="190" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`----StorageContainerName----`</ph> with <bpt id="p1">**</bpt>messages<ept id="p1">**</ept>.</source>
        </trans-unit><trans-unit id="191" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`----HostNamePrefix----`</ph> with the name of your storage account.</source>
        </trans-unit><trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Save <bpt id="p1">**</bpt>EventProcessorSample.java<ept id="p1">**</ept> either through the "..." menu, or the accelerator key (<bpt id="p2">&lt;kbd&gt;</bpt>Ctrl+S<ept id="p2">&lt;/kbd&gt;</ept> on Windows and Linux, <bpt id="p3">&lt;kbd&gt;</bpt>Cmd+S<ept id="p3">&lt;/kbd&gt;</ept> on macOS).</source>
        </trans-unit><trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Close the editor.</source>
        </trans-unit><trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Use Maven to build EventProcessorSample.java</source>
        </trans-unit><trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Change to the main <bpt id="p1">**</bpt>EventProcessorSample<ept id="p1">**</ept> folder using the following command:</source>
        </trans-unit><trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Build the Java SimpleSend application using the following command.</source>
        </trans-unit><trans-unit id="197" translate="yes" xml:space="preserve">
          <source>This ensures that your application uses the connection details for your Event Hub:</source>
        </trans-unit><trans-unit id="198" translate="yes" xml:space="preserve">
          <source>The build process may take several minutes to complete.</source>
        </trans-unit><trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Ensure that you see a <bpt id="p1">**</bpt>[INFO] BUILD SUCCESS<ept id="p1">**</ept> message before continuing.</source>
        </trans-unit><trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Build results for receiver application</source>
        </trans-unit><trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Start the sender and receiver apps</source>
        </trans-unit><trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Run Java application from the command line by using the <bpt id="p1">**</bpt>java<ept id="p1">**</ept> command, and specifying a .jar package.</source>
        </trans-unit><trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Use the following commands to start the SimpleSend application:</source>
        </trans-unit><trans-unit id="204" translate="yes" xml:space="preserve">
          <source>When you see <bpt id="p1">**</bpt>Send Complete...<ept id="p1">**</ept>, press <bpt id="p2">&lt;kbd&gt;</bpt>ENTER<ept id="p2">&lt;/kbd&gt;</ept>.</source>
        </trans-unit><trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Start the EventProcessorSample application using the following command.</source>
        </trans-unit><trans-unit id="206" translate="yes" xml:space="preserve">
          <source>When messages stop being displayed to the console, press <bpt id="p1">&lt;kbd&gt;</bpt>ENTER<ept id="p1">&lt;/kbd&gt;</ept> or <bpt id="p2">&lt;kbd&gt;</bpt>CTRL+C<ept id="p2">&lt;/kbd&gt;</ept> to end the program.</source>
        </trans-unit><trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Summary</source>
        </trans-unit><trans-unit id="208" translate="yes" xml:space="preserve">
          <source>You've now configured a sender application ready to send messages to your Event Hub.</source>
        </trans-unit><trans-unit id="209" translate="yes" xml:space="preserve">
          <source>You've also configured a receiver application ready to receive messages from your Event Hub.</source>
        </trans-unit></group></body></file></xliff>