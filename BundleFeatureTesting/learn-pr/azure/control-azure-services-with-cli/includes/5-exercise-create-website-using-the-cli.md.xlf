<?xml version="1.0"?><xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd"><file datatype="xml" original="5-exercise-create-website-using-the-cli.md" source-language="en-US" target-language="en-US"><header><tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1931010" tool-company="Microsoft" /><xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5-exercise-create-website-using-the-cli.9dc522b30544e987f34e0dc8464e20bb55ea161d.skl</xliffext:skl_file_name><xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version><xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">11989812d2bacae49ac7b4156389d2437f457e50</xliffext:ms.openlocfilehash><xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/24/2019</xliffext:ms.lasthandoff><xliffext:ms.openlocfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">learn-pr\azure\control-azure-services-with-cli\includes\5-exercise-create-website-using-the-cli.md</xliffext:ms.openlocfilepath></header><body><group id="content" extype="content"><trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Next, let's use the Azure CLI to create a resource group, and then to deploy a web app into this resource group.</source>
        </trans-unit><trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Using a resource group</source>
        </trans-unit><trans-unit id="103" translate="yes" xml:space="preserve">
          <source>When you are working with your own machine and Azure subscription you will need to first login to Azure using the <ph id="ph1">`az login`</ph> command.</source>
        </trans-unit><trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This is unnecessary with the Cloud Shell environment.</source>
        </trans-unit><trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Next, you would normally create a resource group for all your related Azure resources with an <ph id="ph1">`az group create`</ph> command, but for these exercises one has been created for you.</source>
        </trans-unit><trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Use <bpt id="p1">**</bpt><bpt id="p2">&lt;rgn&gt;</bpt>[sandbox resource group name]<ept id="p2">&lt;/rgn&gt;</ept><ept id="p1">**</ept> for your resource group.</source>
        </trans-unit><trans-unit id="107" translate="yes" xml:space="preserve">
          <source>You can ask the Azure CLI to list all your resource groups in a table.</source>
        </trans-unit><trans-unit id="108" translate="yes" xml:space="preserve">
          <source>There should just be one while you are in the free Azure sandbox.</source>
        </trans-unit><trans-unit id="109" translate="yes" xml:space="preserve">
          <source>As you do more Azure development, you can end up with several resource groups.</source>
        </trans-unit><trans-unit id="110" translate="yes" xml:space="preserve">
          <source>If you have several items in the group list, you can filter the return values by adding a <ph id="ph1">`--query`</ph> option.</source>
        </trans-unit><trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Try this command:</source>
        </trans-unit><trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The query is formated using <bpt id="p1">**</bpt>JMESPath<ept id="p1">**</ept> which is a standard query language for JSON requests.</source>
        </trans-unit><trans-unit id="113" translate="yes" xml:space="preserve">
          <source>You can learn more about this powerful filter language at <ph id="ph1">&lt;http://jmespath.org/&gt;</ph>.</source>
        </trans-unit><trans-unit id="114" translate="yes" xml:space="preserve">
          <source>We also cover queries in more depth in the <bpt id="p1">**</bpt>Manage VMs with the Azure CLI<ept id="p1">**</ept> module.</source>
        </trans-unit><trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Steps to create a service plan</source>
        </trans-unit><trans-unit id="116" translate="yes" xml:space="preserve">
          <source>When you run Web Apps, using the Azure App Service, you pay for the Azure compute resources used by the app, and this depends on the App Service plan associated with your Web Apps.</source>
        </trans-unit><trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Service plans determine the region used for the app datacenter, number of VMs used, and pricing tier.</source>
        </trans-unit><trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Create an App Service plan to run your app.</source>
        </trans-unit><trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The following command does not specify a pricing tier or VM instance details, so by default, you'll get a <bpt id="p1">**</bpt>Basic<ept id="p1">**</ept> plan with 1 <bpt id="p2">**</bpt>Small<ept id="p2">**</ept> VM instance.</source>
        </trans-unit><trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The name of the app and plan must be <bpt id="p1">_</bpt>unique<ept id="p1">_</ept>, so add a suffix to the name and replace the <ph id="ph1">`&lt;unique&gt;`</ph> text in the command below with a set of numbers, your initials, or some other piece of text to make sure it's unique in all of Azure.</source>
        </trans-unit><trans-unit id="121" translate="yes" xml:space="preserve">
          <source>For the <ph id="ph1">`--location`</ph> parameter, use one of the below location values.</source>
        </trans-unit><trans-unit id="122" translate="yes" xml:space="preserve">
          <source>This command can take several minutes to complete.</source>
        </trans-unit><trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Verify that the service plan was created successfully by listing all your plans in a table.</source>
        </trans-unit><trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Steps to create a web app</source>
        </trans-unit><trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Next, you'll create the web app in your service plan.</source>
        </trans-unit><trans-unit id="126" translate="yes" xml:space="preserve">
          <source>You can deploy the code at the same time, but for our example, we'll do this as separate steps.</source>
        </trans-unit><trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Create the web app, supply the name of the plan you created above.</source>
        </trans-unit><trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Just like the plan, the app name must be unique<ept id="p1">**</ept>, replace the <ph id="ph1">`&lt;unique&gt;`</ph> marker with some text to make the name globally unique.</source>
        </trans-unit><trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Verify that the app was created successfully by listing all your apps in a table.</source>
        </trans-unit><trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Make a note of the <bpt id="p1">**</bpt>DefaultHostName<ept id="p1">**</ept> listed in the table; this is the reachable web address for the new website.</source>
        </trans-unit><trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Azure will make your website available through the unique app name in the <ph id="ph1">`azurewebsites.net`</ph> domain.</source>
        </trans-unit><trans-unit id="132" translate="yes" xml:space="preserve">
          <source>For example, if my app name was "popupwebapp-mslearn123", then my website URL would be: <ph id="ph1">`http://popupwebapp-mslearn123.azurewebsites.net`</ph>.</source>
        </trans-unit><trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Your site has a "QuickStart" page created by Azure that you can see either in a browser, or with CURL, just use the <bpt id="p1">**</bpt>DefaultHostName<ept id="p1">**</ept>:</source>
        </trans-unit><trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Steps to deploy code from GitHub</source>
        </trans-unit><trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The final step is to deploy code from a GitHub repository to the web app.</source>
        </trans-unit><trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Let's use a simple PHP page available in the Azure Samples Github repository that displays "HelloWorld!"</source>
        </trans-unit><trans-unit id="137" translate="yes" xml:space="preserve">
          <source>when it executes.</source>
        </trans-unit><trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Make sure to use the web app name you created.</source>
        </trans-unit><trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Once it's deployed, hit your site again with a browser or CURL.</source>
        </trans-unit><trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The page displays "Hello World!"</source>
        </trans-unit><trans-unit id="141" translate="yes" xml:space="preserve">
          <source>This exercise demonstrated a typical pattern for an interactive Azure CLI session.</source>
        </trans-unit><trans-unit id="142" translate="yes" xml:space="preserve">
          <source>You first used a standard command to create a new resource group.</source>
        </trans-unit><trans-unit id="143" translate="yes" xml:space="preserve">
          <source>You then used a set of commands to deploy a resource (in this example, a web app) into this resource group.</source>
        </trans-unit><trans-unit id="144" translate="yes" xml:space="preserve">
          <source>This set of commands could easily be combined into a shell script, and executed every time you need to create the same resource.</source>
        </trans-unit></group></body></file></xliff>