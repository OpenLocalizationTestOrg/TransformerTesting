<?xml version="1.0"?><xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd"><file datatype="xml" original="6-exercise-add-a-durable-timer-to-manage-a-long-running-task.md" source-language="en-US" target-language="en-US"><header><tool tool-id="mdxliff" tool-name="mdxliff"  tool-company="Microsoft" /><xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6-exercise-add-a-durable-timer-to-manage-a-long-running-task.88a7d6.cf3ecd484ad99d57251382fc763effd6cc3330bf.skl</xliffext:skl_file_name><xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version><xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cf3ecd484ad99d57251382fc763effd6cc3330bf</xliffext:ms.openlocfilehash><xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ba7e452ac39d7f09a5646044b44de0e1cdc54982</xliffext:ms.sourcegitcommit><xliffext:ms.openlocfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">learn-pr\azure\create-long-running-serverless-workflow-with-durable-functions\includes\6-exercise-add-a-durable-timer-to-manage-a-long-running-task.md</xliffext:ms.openlocfilepath></header><body><group id="content" extype="content"><trans-unit id="101" translate="yes" xml:space="preserve">
          <source>The company has asked you to amend your new workflow to incorporate an escalation step to take an action, if a project design proposal isn't approved in a timely fashion.</source>
        </trans-unit><trans-unit id="102" translate="yes" xml:space="preserve">
          <source>In this unit, you'll add a timer to control timeout during the execution of your workflow.</source>
        </trans-unit><trans-unit id="103" translate="yes" xml:space="preserve">
          <source>You'll also learn how to use the timeout to control which execution path the workflow takes.</source>
        </trans-unit><trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Add moment npm package to your function app</source>
        </trans-unit><trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Before changing our workflow, we'll add the <bpt id="p1">**</bpt>moment<ept id="p1">**</ept> npm package to our function app through the Kudo console.</source>
        </trans-unit><trans-unit id="106" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">[</bpt>Azure portal<ept id="p1">](https://portal.azure.com/learn.docs.microsoft.com?azure-portal=true)</ept> , go to the function app that you created in the previous exercise.</source>
        </trans-unit><trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Select your function app's name, click <bpt id="p1">**</bpt>Platform Features<ept id="p1">**</ept>, and then select <bpt id="p2">**</bpt>Advanced tools (Kudu)<ept id="p2">**</ept>.</source>
        </trans-unit><trans-unit id="108" translate="yes" xml:space="preserve">
          <source>In the Kudu console, on the <bpt id="p1">**</bpt>Debug console<ept id="p1">**</ept> menu, select <bpt id="p2">**</bpt>CMD<ept id="p2">**</ept>.</source>
        </trans-unit><trans-unit id="109" translate="yes" xml:space="preserve">
          <source>In the Explorer window, navigate to the <bpt id="p1">**</bpt>site/wwwroot<ept id="p1">**</ept> folder.</source>
        </trans-unit><trans-unit id="110" translate="yes" xml:space="preserve">
          <source>In the command prompt window, run the following command.</source>
        </trans-unit><trans-unit id="111" translate="yes" xml:space="preserve">
          <source>This command installs the <bpt id="p1">**</bpt>moment.js<ept id="p1">**</ept> library.</source>
        </trans-unit><trans-unit id="112" translate="yes" xml:space="preserve">
          <source>This library contains date/time functions that you can use with durable functions.</source>
        </trans-unit><trans-unit id="113" translate="yes" xml:space="preserve">
          <source>You can ignore the warnings that are displayed.</source>
        </trans-unit><trans-unit id="114" translate="yes" xml:space="preserve">
          <source>When installation is complete, close the Kudu console and return to the Azure portal displaying your function app.</source>
        </trans-unit><trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Add an escalation activity to your function app</source>
        </trans-unit><trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Expand your function app and select the <bpt id="p1">**</bpt><ph id="ph1">+</ph><ept id="p1">**</ept> button next to <bpt id="p2">**</bpt>Functions<ept id="p2">**</ept>.</source>
        </trans-unit><trans-unit id="117" translate="yes" xml:space="preserve">
          <source>In the search field, type <bpt id="p1">**</bpt>durable<ept id="p1">**</ept>, and then select the <bpt id="p2">**</bpt>Durable Functions activity<ept id="p2">**</ept> template.</source>
        </trans-unit><trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Name the function <bpt id="p1">**</bpt>Escalation<ept id="p1">**</ept>, and then select <bpt id="p2">**</bpt>Create<ept id="p2">**</ept>.</source>
        </trans-unit><trans-unit id="119" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Index.js<ept id="p1">**</ept> JavaScript file, replace the code with the following snippet.</source>
        </trans-unit><trans-unit id="120" translate="yes" xml:space="preserve">
          <source>This code returns a message indicating that the workflow has been escalated.</source>
        </trans-unit><trans-unit id="121" translate="yes" xml:space="preserve">
          <source>In a production system, this function would contain the logic to remind the recipient, or reassign the task.</source>
        </trans-unit><trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Select <bpt id="p1">**</bpt>Save<ept id="p1">**</ept> to save our new function.</source>
        </trans-unit><trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Update the orchestration function to use the escalation function</source>
        </trans-unit><trans-unit id="124" translate="yes" xml:space="preserve">
          <source>In our function app, select the  orchestration function, which we earlier named <bpt id="p1">**</bpt>OrchFunction<ept id="p1">**</ept>.</source>
        </trans-unit><trans-unit id="125" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>undex.js<ept id="p1">**</ept> code file, add a reference to the <bpt id="p2">**</bpt>moment<ept id="p2">**</ept> library</source>
        </trans-unit><trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Replace the b ody of the function with the following code.</source>
        </trans-unit><trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The logic tests whether the deadline for approval has passed.</source>
        </trans-unit><trans-unit id="128" translate="yes" xml:space="preserve">
          <source>To keep things brief for the purposes of this exercise, if the <bpt id="p1">**</bpt>Approval<ept id="p1">**</ept> function doesn't respond within 20 seconds, the <bpt id="p2">**</bpt>Escalation<ept id="p2">**</ept> function is called.</source>
        </trans-unit><trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The code also changes the call to <bpt id="p1">**</bpt>Approval<ept id="p1">**</ept> to wait for an external input.</source>
        </trans-unit><trans-unit id="130" translate="yes" xml:space="preserve">
          <source>This way we can control when the response comes back for testing purposes.</source>
        </trans-unit><trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Select <bpt id="p1">**</bpt>Save<ept id="p1">**</ept>.</source>
        </trans-unit><trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Verify that the Durable Functions workflow starts</source>
        </trans-unit><trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Select the <bpt id="p1">**</bpt>HttpStart<ept id="p1">**</ept> function we created in the preceding exercise, the select **&lt;/&gt; Get function URL, and copy the URL.</source>
        </trans-unit><trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Open another browser window and move to the URL that you copied, replacing <bpt id="p1">**</bpt>{functionName}<ept id="p1">**</ept> with <bpt id="p2">**</bpt>OrchFunction<ept id="p2">**</ept>.</source>
        </trans-unit><trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The response message contains a set of URI endpoints that you can use to monitor and manage the execution, which looks like the following example:</source>
        </trans-unit><trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Copy the <bpt id="p1">**</bpt>statusQueryGetUri<ept id="p1">**</ept> value, and navigate to this URL in the browser</source>
        </trans-unit><trans-unit id="137" translate="yes" xml:space="preserve">
          <source>You should see a response that shows the instance is pending as it is waiting for the timer to countdown to 20 seconds:</source>
        </trans-unit><trans-unit id="138" translate="yes" xml:space="preserve">
          <source>If you wait for 20 seconds and refresh the browser window, the timeout should have been reached and the workflow will call the <bpt id="p1">**</bpt>Escalate<ept id="p1">**</ept> activity.</source>
        </trans-unit><trans-unit id="139" translate="yes" xml:space="preserve">
          <source>You'll see a response like this:</source>
        </trans-unit></group></body></file></xliff>