<?xml version="1.0"?><xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd"><file datatype="xml" original="2-restrict-network-access.md" source-language="en-US" target-language="en-US"><header><tool tool-id="mdxliff" tool-name="mdxliff"  tool-company="Microsoft" /><xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2-restrict-network-access.50ac50.36ce6c537bb9cad4b8a34509bf258a2ed72ff254.skl</xliffext:skl_file_name><xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version><xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">36ce6c537bb9cad4b8a34509bf258a2ed72ff254</xliffext:ms.openlocfilehash><xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ba7e452ac39d7f09a5646044b44de0e1cdc54982</xliffext:ms.sourcegitcommit><xliffext:ms.openlocfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">learn-pr\azure\secure-your-azure-sql-database\includes\2-restrict-network-access.md</xliffext:ms.openlocfilepath></header><body><group id="content" extype="content"><trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Users will connect to our app server to enter orders, update their account, and perform similar activities, which will in turn update the database with these changes.</source>
        </trans-unit><trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Because we have personal data stored in the database it's critical to ensure that we only allow access from trusted and necessary resources.</source>
        </trans-unit><trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Let's take a look at a number of ways you can control access to your SQL database over the network.</source>
        </trans-unit><trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Firewall rules</source>
        </trans-unit><trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Azure SQL Database has a built-in firewall that is used to allow and deny network access to both the database server itself, as well as individual databases.</source>
        </trans-unit><trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Firewall rules are configured at the server and/or database level, and will specifically state which network resources are allowed to establish a connection to the database.</source>
        </trans-unit><trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Depending on the level, the rules you can apply will be as follows:</source>
        </trans-unit><trans-unit id="108" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Server-level firewall rules<ept id="p1">**</ept></source>
        </trans-unit><trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Allow access to Azure services</source>
        </trans-unit><trans-unit id="110" translate="yes" xml:space="preserve">
          <source>IP address rules</source>
        </trans-unit><trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Virtual network rules</source>
        </trans-unit><trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Database-level firewall rules<ept id="p1">**</ept></source>
        </trans-unit><trans-unit id="113" translate="yes" xml:space="preserve">
          <source>IP address rules</source>
        </trans-unit><trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Let's take a closer look at how these rules work.</source>
        </trans-unit><trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Server-level firewall rules</source>
        </trans-unit><trans-unit id="116" translate="yes" xml:space="preserve">
          <source>These rules enable clients to access your entire Azure SQL server, that is, all the databases within the same logical server.</source>
        </trans-unit><trans-unit id="117" translate="yes" xml:space="preserve">
          <source>There are three types of rules that can be applied at the server level.</source>
        </trans-unit><trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Allow access to Azure services<ept id="p1">**</ept> rule allows services within Azure to connect to your Azure SQL Database.</source>
        </trans-unit><trans-unit id="119" translate="yes" xml:space="preserve">
          <source>When enabled, this setting allows communications from all Azure public IP addresses.</source>
        </trans-unit><trans-unit id="120" translate="yes" xml:space="preserve">
          <source>This includes all Azure Platform as a Service (PaaS) services, such as Azure App Service and Azure Container Service, as well as Azure VMs that have outbound internet access.</source>
        </trans-unit><trans-unit id="121" translate="yes" xml:space="preserve">
          <source>This rule can be configured through the <bpt id="p1">**</bpt>ON/OFF<ept id="p1">**</ept> option in the firewall pane in the portal, or by an IP rule that has 0.0.0.0 as the start and end IP addresses.</source>
        </trans-unit><trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Allow access to Azure services network diagram</source>
        </trans-unit><trans-unit id="123" translate="yes" xml:space="preserve">
          <source>This rule is used when you have applications running on PaaS services in Azure, such as Azure Logic Apps or Azure Functions, that need to access your Azure SQL Database.</source>
        </trans-unit><trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Many of these services don't have a static IP address, so this rule is needed to ensure they are able to connect to the database.</source>
        </trans-unit><trans-unit id="125" translate="yes" xml:space="preserve">
          <source>This option configures the firewall to allow all connections from Azure including connections from the subscriptions of other customers.</source>
        </trans-unit><trans-unit id="126" translate="yes" xml:space="preserve">
          <source>When selecting this option, make sure your login and user permissions limit access to only authorized users.</source>
        </trans-unit><trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>IP address rules<ept id="p1">**</ept> are rules that are based on specific public IP address ranges.</source>
        </trans-unit><trans-unit id="128" translate="yes" xml:space="preserve">
          <source>IP addresses connecting from an allowed public IP range will be permitted to connect to the database.</source>
        </trans-unit><trans-unit id="129" translate="yes" xml:space="preserve">
          <source>IP address rule network diagram</source>
        </trans-unit><trans-unit id="130" translate="yes" xml:space="preserve">
          <source>These rules can be used when you have a static public IP address that needs to access your database.</source>
        </trans-unit><trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Virtual network rules<ept id="p1">**</ept> allow you to explicitly allow connection from specified subnets inside one or more Azure virtual networks (VNets).</source>
        </trans-unit><trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Virtual network rules can provide greater access control to your databases and can be a preferred option depending on your scenario.</source>
        </trans-unit><trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Since Azure VNet address spaces are private, you can effectively eliminate exposure to public IP addresses and secure connectivity to those addresses you control.</source>
        </trans-unit><trans-unit id="134" translate="yes" xml:space="preserve">
          <source>VNet rule network diagram</source>
        </trans-unit><trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Virtual network rules are used when you have Azure VMs that need to access your database.</source>
        </trans-unit><trans-unit id="136" translate="yes" xml:space="preserve">
          <source>For server-level rules, all of the above can be created and manipulated through the portal, PowerShell, the CLI and through Transact-SQL (T-SQL).</source>
        </trans-unit><trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Database-level firewall rules</source>
        </trans-unit><trans-unit id="138" translate="yes" xml:space="preserve">
          <source>These rules allow access to an individual database on a logical server and are stored in the database itself.</source>
        </trans-unit><trans-unit id="139" translate="yes" xml:space="preserve">
          <source>For database-level rules, only <bpt id="p1">**</bpt>IP address rules<ept id="p1">**</ept> can be configured.</source>
        </trans-unit><trans-unit id="140" translate="yes" xml:space="preserve">
          <source>They function the same as when applied at the server-level, but are scoped to the database only.</source>
        </trans-unit><trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Database IP address rule network diagram</source>
        </trans-unit><trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The benefits of database-level rules are their portability.</source>
        </trans-unit><trans-unit id="143" translate="yes" xml:space="preserve">
          <source>When replicating a database to another server, the database-level rules will be replicated, since they are stored in the database itself.</source>
        </trans-unit><trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The downside to database-level rules is that you can only use IP address rules.</source>
        </trans-unit><trans-unit id="145" translate="yes" xml:space="preserve">
          <source>This may limit the flexibility you have and can increase administrative overhead.</source>
        </trans-unit><trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Lastly, database-level firewall rules can be created and manipulated only through T-SQL.</source>
        </trans-unit><trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Restricting network access in practice</source>
        </trans-unit><trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Let's take a look at how these work in practice, and how you can secure network access to only allow what is necessary.</source>
        </trans-unit><trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Recall that we created an Azure SQL Database logical server, a database, and the <bpt id="p1">_</bpt>appServer<ept id="p1">_</ept> Linux VM acting as an application server.</source>
        </trans-unit><trans-unit id="150" translate="yes" xml:space="preserve">
          <source>This scenario is often seen when a database has been migrated to Azure SQL Database and resources inside of a virtual network need to access it.</source>
        </trans-unit><trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The firewall feature of Azure SQL Database can be used in many scenarios, but this is an example that has practical applicability and demonstrates how each of the rules functions.</source>
        </trans-unit><trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Let's go through the firewall settings and see how they work.</source>
        </trans-unit><trans-unit id="153" translate="yes" xml:space="preserve">
          <source>We'll use both the cloud shell and the portal for these exercises.</source>
        </trans-unit><trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The database we created currently does not allow access from any connections.</source>
        </trans-unit><trans-unit id="155" translate="yes" xml:space="preserve">
          <source>This is by design based on the commands that we ran to create the logical server and database.</source>
        </trans-unit><trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Let's confirm this.</source>
        </trans-unit><trans-unit id="157" translate="yes" xml:space="preserve">
          <source>In the cloud shell, SSH into your Linux VM if you aren't already connected.</source>
        </trans-unit><trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Recall the <ph id="ph1">`sqlcmd`</ph> command we retrieved earlier.</source>
        </trans-unit><trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Go ahead and run it to attempt to connect to the database.</source>
        </trans-unit><trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Make sure you replace <ph id="ph1">`&lt;username&gt;`</ph> and <ph id="ph2">`&lt;password&gt;`</ph> with the <ph id="ph3">`ADMINUSER`</ph> credentials you specified in the previous unit.</source>
        </trans-unit><trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Make sure to keep the single quotes around the username and password so that any special characters aren't misinterpreted by the shell.</source>
        </trans-unit><trans-unit id="162" translate="yes" xml:space="preserve">
          <source>You should receive an error when trying to connect.</source>
        </trans-unit><trans-unit id="163" translate="yes" xml:space="preserve">
          <source>This is expected since we've not allowed any access to the database.</source>
        </trans-unit><trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Let's grant access so we can connect.</source>
        </trans-unit><trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Use the server-level allow access to Azure services rule</source>
        </trans-unit><trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Since our VM has outbound internet access, we can use the <bpt id="p1">**</bpt>Allow access to Azure services<ept id="p1">**</ept> rule to allow access from our VM.</source>
        </trans-unit><trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Sign into the <bpt id="p1">[</bpt>Azure portal<ept id="p1">](https://portal.azure.com/learn.docs.microsoft.com?azure-portal=true)</ept> using the same account you activated the sandbox with.</source>
        </trans-unit><trans-unit id="168" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Search resources, services, and docs<ept id="p1">**</ept> box at the top, search for your database server name, <ph id="ph1">`server&lt;12345&gt;`</ph>.</source>
        </trans-unit><trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Select the SQL server.</source>
        </trans-unit><trans-unit id="170" translate="yes" xml:space="preserve">
          <source>In the SQL server panel, in the <bpt id="p1">**</bpt>Security<ept id="p1">**</ept> section in the left menu, select <bpt id="p2">**</bpt>Firewalls and virtual networks<ept id="p2">**</ept>.</source>
        </trans-unit><trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Set <bpt id="p1">**</bpt>Allow access to Azure services<ept id="p1">**</ept> to <bpt id="p2">**</bpt>ON<ept id="p2">**</ept> and click <bpt id="p3">**</bpt>Save<ept id="p3">**</ept>.</source>
        </trans-unit><trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Back in your SSH session, let's try to connect to your database again.</source>
        </trans-unit><trans-unit id="173" translate="yes" xml:space="preserve">
          <source>At this point, you should be able to connect.</source>
        </trans-unit><trans-unit id="174" translate="yes" xml:space="preserve">
          <source>If it's successful, you should see a sqlcmd prompt.</source>
        </trans-unit><trans-unit id="175" translate="yes" xml:space="preserve">
          <source>So we've opened up connectivity, but this setting currently allows access from <bpt id="p1">_</bpt>any<ept id="p1">_</ept> Azure resource, including resources outside of our subscription.</source>
        </trans-unit><trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Let's restrict this further to limit network access to only resources that are within our control.</source>
        </trans-unit><trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Use a database-level IP address rule</source>
        </trans-unit><trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Recall that database-level IP address rules allow only access to an individual database on a logical server.</source>
        </trans-unit><trans-unit id="179" translate="yes" xml:space="preserve">
          <source>We'll use one here to grant access to the static IP of our <bpt id="p1">_</bpt>appServer<ept id="p1">_</ept> VM.</source>
        </trans-unit><trans-unit id="180" translate="yes" xml:space="preserve">
          <source>To create a database-level IP rule, we'll need to run some T-SQL commands.</source>
        </trans-unit><trans-unit id="181" translate="yes" xml:space="preserve">
          <source>You'll create a database rule using the following convention, where you pass in the rule name, the starting IP address, and the ending IP address.</source>
        </trans-unit><trans-unit id="182" translate="yes" xml:space="preserve">
          <source>By specifying the start and end IP to be the same, we're limiting access to a single IP, though we could expand the range if we had a larger block of addresses that required access.</source>
        </trans-unit><trans-unit id="183" translate="yes" xml:space="preserve">
          <source>While still at the sqlcmd prompt, run the following command, replacing the public IP address of your <bpt id="p1">_</bpt>appServer<ept id="p1">_</ept> VM in both locations below.</source>
        </trans-unit><trans-unit id="184" translate="yes" xml:space="preserve">
          <source>When running T-SQL commands such as the following, the <ph id="ph1">`GO`</ph> on the second line may not copy through to the <ph id="ph2">`sqlcmd`</ph> prompt, so you will likely need to type this out. The T-SQL command won't execute without it, so make sure to run the <ph id="ph3">`GO`</ph> command.</source>
        </trans-unit><trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Once the command completes, type <ph id="ph1">`exit`</ph> to exit sqlcmd.</source>
        </trans-unit><trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Remain connected via SSH.</source>
        </trans-unit><trans-unit id="187" translate="yes" xml:space="preserve">
          <source>In the portal, on the <bpt id="p1">**</bpt>Firewalls and virtual networks<ept id="p1">**</ept> panel for your SQL server, set <bpt id="p2">**</bpt>Allow access to Azure services<ept id="p2">**</ept> to <bpt id="p3">**</bpt>OFF<ept id="p3">**</ept> and click <bpt id="p4">**</bpt>Save<ept id="p4">**</ept>.</source>
        </trans-unit><trans-unit id="188" translate="yes" xml:space="preserve">
          <source>This will disable access from all Azure services, but we'll still be able to connect since we have a database-level IP rule for our server.</source>
        </trans-unit><trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Back in cloud shell, in the VM you are connected via SSH to, try connecting to your database again.</source>
        </trans-unit><trans-unit id="190" translate="yes" xml:space="preserve">
          <source>At this point, you should be able to connect.</source>
        </trans-unit><trans-unit id="191" translate="yes" xml:space="preserve">
          <source>If it's successful, you should see a sqlcmd prompt.</source>
        </trans-unit><trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Using a database-level rule allows access to be isolated specifically to the database.</source>
        </trans-unit><trans-unit id="193" translate="yes" xml:space="preserve">
          <source>This can be useful if you'd like to keep your network access configured per database.</source>
        </trans-unit><trans-unit id="194" translate="yes" xml:space="preserve">
          <source>If multiple databases share the same level of network access, you can simplify administration by using a server-level rule to apply the same access to all databases on the server.</source>
        </trans-unit><trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Use a server-level IP address rule</source>
        </trans-unit><trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Database-level rules are a great option, but what if we had multiple databases on the same server that our <bpt id="p1">_</bpt>appServer<ept id="p1">_</ept> VM needed to connect to?</source>
        </trans-unit><trans-unit id="197" translate="yes" xml:space="preserve">
          <source>We could add a database-level rule to each database, this can take more work as we add more databases.</source>
        </trans-unit><trans-unit id="198" translate="yes" xml:space="preserve">
          <source>It would reduce our administration efforts to allow access with a server-level rule, which would apply to all databases on the server.</source>
        </trans-unit><trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Let's now use a server-level IP rule to restrict the systems that can connect.</source>
        </trans-unit><trans-unit id="200" translate="yes" xml:space="preserve">
          <source>While still at the sqlcmd prompt, run the following command to delete the database-level IP address rule.</source>
        </trans-unit><trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Once the command completes, type <ph id="ph1">`exit`</ph> to exit sqlcmd.</source>
        </trans-unit><trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Remain connected via SSH.</source>
        </trans-unit><trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Back in the portal, on the <bpt id="p1">**</bpt>Firewalls and virtual networks<ept id="p1">**</ept> panel for your SQL server,  add a new rule with a <bpt id="p2">**</bpt>RULE NAME<ept id="p2">**</ept> of <bpt id="p3">**</bpt>Allow appServer<ept id="p3">**</ept> and with the <bpt id="p4">**</bpt>START IP<ept id="p4">**</ept> and <bpt id="p5">**</bpt>END IP<ept id="p5">**</ept> set to the public IP address of the <bpt id="p6">_</bpt>appServer<ept id="p6">_</ept> VM.</source>
        </trans-unit><trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>Save<ept id="p1">**</ept></source>
        </trans-unit><trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Screenshot of the Azure portal showing the server firewall rule creation with a described IP restriction configuration added.</source>
        </trans-unit><trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Back in cloud shell, on your <bpt id="p1">_</bpt>appServer<ept id="p1">_</ept> VM, try connecting to your database again.</source>
        </trans-unit><trans-unit id="207" translate="yes" xml:space="preserve">
          <source>At this point you should be able to connect, since the server-level rule is allowing access based on the public IP address of the <bpt id="p1">_</bpt>appServer<ept id="p1">_</ept> VM.</source>
        </trans-unit><trans-unit id="208" translate="yes" xml:space="preserve">
          <source>If it's successful, you should see a sqlcmd prompt.</source>
        </trans-unit><trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Type <ph id="ph1">`exit`</ph> to exit sqlcmd.</source>
        </trans-unit><trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Remain connected via SSH.</source>
        </trans-unit><trans-unit id="211" translate="yes" xml:space="preserve">
          <source>So we've isolated connectivity to only the IP address we specified in the rule.</source>
        </trans-unit><trans-unit id="212" translate="yes" xml:space="preserve">
          <source>This works great, but can still be an administrative challenge as you add more systems that need to connect.</source>
        </trans-unit><trans-unit id="213" translate="yes" xml:space="preserve">
          <source>It also requires a static IP or an IP from a defined IP address range; if the IP is dynamic and changes, we'd have to update the rule to ensure connectivity.</source>
        </trans-unit><trans-unit id="214" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">_</bpt>appServer<ept id="p1">_</ept> VM is currently configured with a dynamic IP address, so this IP address is likely to change at some point, breaking our access as soon as that happens.</source>
        </trans-unit><trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Let's now look at how virtual network rules can be beneficial in our configuration.</source>
        </trans-unit><trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Use a server-level virtual network rule</source>
        </trans-unit><trans-unit id="217" translate="yes" xml:space="preserve">
          <source>In this case, since our VM is running in Azure, we can use a server-level virtual network rule to isolate access and make it easy to enable future services to gain access to the database.</source>
        </trans-unit><trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Back in the portal and still on the <bpt id="p1">**</bpt>Firewalls and virtual networks<ept id="p1">**</ept> panel, in the <bpt id="p2">**</bpt>Virtual networks<ept id="p2">**</ept> section click the <bpt id="p3">**</bpt>+ Add existing virtual network<ept id="p3">**</ept> option.</source>
        </trans-unit><trans-unit id="219" translate="yes" xml:space="preserve">
          <source>The Create/Update virtual network rule dialog will show.</source>
        </trans-unit><trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Set the following values:</source>
        </trans-unit><trans-unit id="221" translate="yes" xml:space="preserve">
          <source><bpt id="p1">_</bpt>Setting<ept id="p1">_</ept></source>
        </trans-unit><trans-unit id="222" translate="yes" xml:space="preserve">
          <source><bpt id="p1">_</bpt>Value<ept id="p1">_</ept></source>
        </trans-unit><trans-unit id="223" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Name<ept id="p1">**</ept></source>
        </trans-unit><trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Leave the default value</source>
        </trans-unit><trans-unit id="225" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Subscription<ept id="p1">**</ept></source>
        </trans-unit><trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Concierge Subscription</source>
        </trans-unit><trans-unit id="227" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Virtual network<ept id="p1">**</ept></source>
        </trans-unit><trans-unit id="228" translate="yes" xml:space="preserve">
          <source>appServerVNET</source>
        </trans-unit><trans-unit id="229" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Subnet name / Address prefix<ept id="p1">**</ept></source>
        </trans-unit><trans-unit id="230" translate="yes" xml:space="preserve">
          <source>appServerSubnet / 10.0.0.0/24</source>
        </trans-unit><trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>Enable<ept id="p1">**</ept> to enable the service endpoint on the subnet, then <bpt id="p2">**</bpt>OK<ept id="p2">**</ept> once the endpoint is enabled to create the rule.</source>
        </trans-unit><trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Now, let's remove the IP address rule.</source>
        </trans-unit><trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Click the <bpt id="p1">**</bpt>...<ept id="p1">**</ept> next to your <bpt id="p2">**</bpt>Allow appServer<ept id="p2">**</ept> rule and click <bpt id="p3">**</bpt>Delete<ept id="p3">**</ept>, then click <bpt id="p4">**</bpt>Save<ept id="p4">**</ept>.</source>
        </trans-unit><trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Back in cloud shell, on your <bpt id="p1">_</bpt>appServer<ept id="p1">_</ept> VM, try connecting to your database again.</source>
        </trans-unit><trans-unit id="235" translate="yes" xml:space="preserve">
          <source>At this point, you should be able to connect.</source>
        </trans-unit><trans-unit id="236" translate="yes" xml:space="preserve">
          <source>If it's successful, you should see a sqlcmd prompt.</source>
        </trans-unit><trans-unit id="237" translate="yes" xml:space="preserve">
          <source>What we've done here effectively removes any public access to the SQL server, and only permits access from the specific subnet in the Azure VNet we defined.</source>
        </trans-unit><trans-unit id="238" translate="yes" xml:space="preserve">
          <source>If we were to add additional app servers in that subnet, no additional configuration would be necessary, as any server in that subnet would have the ability to connect to the SQL server.</source>
        </trans-unit><trans-unit id="239" translate="yes" xml:space="preserve">
          <source>This limits our exposure to services outside of our scope of control, and eases administration if we were to add additional servers.</source>
        </trans-unit><trans-unit id="240" translate="yes" xml:space="preserve">
          <source>This is an effective method of securing network access to an Azure SQL Database.</source>
        </trans-unit></group></body></file></xliff>