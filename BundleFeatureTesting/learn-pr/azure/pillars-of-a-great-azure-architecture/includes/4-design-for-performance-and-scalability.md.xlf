<?xml version="1.0"?><xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd"><file datatype="xml" original="4-design-for-performance-and-scalability.md" source-language="en-US" target-language="en-US"><header><tool tool-id="mdxliff" tool-name="mdxliff"  tool-company="Microsoft" /><xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4-design-for-performance-and-scalability.9b51f9.1059650d18ab257b9aafd52cd3b0cad77284f1e4.skl</xliffext:skl_file_name><xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version><xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1059650d18ab257b9aafd52cd3b0cad77284f1e4</xliffext:ms.openlocfilehash><xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ba7e452ac39d7f09a5646044b44de0e1cdc54982</xliffext:ms.sourcegitcommit><xliffext:ms.openlocfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">learn-pr\azure\pillars-of-a-great-azure-architecture\includes\4-design-for-performance-and-scalability.md</xliffext:ms.openlocfilepath></header><body><group id="content" extype="content"><trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Imagine a news story has just been published covering your organization's breakthrough cancer treatment.</source>
        </trans-unit><trans-unit id="102" translate="yes" xml:space="preserve">
          <source>This is a terrific milestone, and will undoubtedly bring a large influx of traffic to your website.</source>
        </trans-unit><trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Will the website handle this traffic increase, or will the load cause the site to be slow or unresponsive?</source>
        </trans-unit><trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Here, we'll look at some of the basic principles of ensuring outstanding application performance using scaling and optimization principles.</source>
        </trans-unit><trans-unit id="105" translate="yes" xml:space="preserve">
          <source>What is scaling and performance optimization?</source>
        </trans-unit><trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Scaling and performance optimization are about matching the resources available to an application with the demand it is receiving.</source>
        </trans-unit><trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Performance optimization includes scaling resources, identifying and optimizing potential bottlenecks, and optimizing your application code for peak performance.</source>
        </trans-unit><trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Scaling</source>
        </trans-unit><trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Compute resources can be scaled in two different directions:</source>
        </trans-unit><trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Scaling <bpt id="p1">*</bpt>up<ept id="p1">*</ept> is the action of adding more resources to a single instance.</source>
        </trans-unit><trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Scaling <bpt id="p1">*</bpt>out<ept id="p1">*</ept> is the addition of instances.</source>
        </trans-unit><trans-unit id="112" translate="yes" xml:space="preserve">
          <source>An illustration showing scaling up and scaling out of a virtual machine to increase the performance capabilities.</source>
        </trans-unit><trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Scaling up is concerned with adding more resources, such as CPU or memory, to a single instance.</source>
        </trans-unit><trans-unit id="114" translate="yes" xml:space="preserve">
          <source>This instance could be a virtual machine or a PaaS service.</source>
        </trans-unit><trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The act of adding more capacity to the instance increases the resources available to your application, but it does come with a limit.</source>
        </trans-unit><trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Virtual machines are limited to the capacity of the host they run on, and hosts themselves have physical limitations.</source>
        </trans-unit><trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Eventually, when you scale up an instance, you can run into these limits, restricting your ability to add further resources to the instance.</source>
        </trans-unit><trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Scaling out is concerned with adding additional instances to a service.</source>
        </trans-unit><trans-unit id="119" translate="yes" xml:space="preserve">
          <source>These can be virtual machines or PaaS services, but instead of adding more capacity by making a single instance more powerful, we add capacity by increasing the overall total number of instances.</source>
        </trans-unit><trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The advantage of scaling out is that you can conceivably scale out forever if you have more machines to add to the architecture.</source>
        </trans-unit><trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Scaling out requires some type of load distribution.</source>
        </trans-unit><trans-unit id="122" translate="yes" xml:space="preserve">
          <source>This could be in the form of a load balancer distributing requests across available servers, or a service discovery mechanism for identifying active servers to send requests to.</source>
        </trans-unit><trans-unit id="123" translate="yes" xml:space="preserve">
          <source>In both cases, resources can be reduced, bringing cost optimization into the picture.</source>
        </trans-unit><trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Performance optimization</source>
        </trans-unit><trans-unit id="125" translate="yes" xml:space="preserve">
          <source>When optimizing for performance, you'll look at network and storage to ensure performance is acceptable.</source>
        </trans-unit><trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Both can impact the response time of your application.</source>
        </trans-unit><trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Selecting the right networking and storage technologies for your architecture will help you ensure you're providing the best experience for your consumers.</source>
        </trans-unit><trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Performance optimization will also include understanding how the applications themselves are performing.</source>
        </trans-unit><trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Errors, poorly performing code, and bottlenecks in dependent systems can all be uncovered through an application performance management tool.</source>
        </trans-unit><trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Often, these issues may be hidden or obfuscated for end users, developers, and administrators, but can have adverse impact on the overall performance of your application.</source>
        </trans-unit><trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Scalability and performance patterns and practices</source>
        </trans-unit><trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Let's take a look at some patterns and practices that can be leveraged to enhance the scalability and performance of your application.</source>
        </trans-unit><trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Data partitioning</source>
        </trans-unit><trans-unit id="134" translate="yes" xml:space="preserve">
          <source>In many large-scale solutions, data is divided into separate partitions that can be managed and accessed separately.</source>
        </trans-unit><trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The partitioning strategy must be chosen carefully to maximize the benefits while minimizing adverse effects.</source>
        </trans-unit><trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Partitioning can help improve scalability, reduce contention, and optimize performance.</source>
        </trans-unit><trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Caching</source>
        </trans-unit><trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Use caching in your architecture can help improve performance.</source>
        </trans-unit><trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Caching is a mechanism to store frequently used data or assets (web pages, images) for faster retrieval.</source>
        </trans-unit><trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Caching can be used at different layers of your application.</source>
        </trans-unit><trans-unit id="141" translate="yes" xml:space="preserve">
          <source>You can use caching between your application servers and a database, to decrease data retrieval times.</source>
        </trans-unit><trans-unit id="142" translate="yes" xml:space="preserve">
          <source>You could also use caching between your end users and your web servers, placing static content closer to the user and decreasing the time it takes to return web pages to the end user.</source>
        </trans-unit><trans-unit id="143" translate="yes" xml:space="preserve">
          <source>This also has a secondary effect of offloading requests from your database or web servers, increasing the performance for other requests.</source>
        </trans-unit><trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Autoscaling</source>
        </trans-unit><trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Autoscaling is the process of dynamically allocating resources to match performance requirements.</source>
        </trans-unit><trans-unit id="146" translate="yes" xml:space="preserve">
          <source>As the volume of work grows, an application may need additional resources to maintain the desired performance levels and satisfy service-level agreements (SLAs).</source>
        </trans-unit><trans-unit id="147" translate="yes" xml:space="preserve">
          <source>As demand slackens and the additional resources are no longer needed, they can be de-allocated to minimize costs.</source>
        </trans-unit><trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Autoscaling takes advantage of the elasticity of cloud-hosted environments while easing management overhead.</source>
        </trans-unit><trans-unit id="149" translate="yes" xml:space="preserve">
          <source>It reduces the need for an operator to continually monitor the performance of a system and make decisions about adding or removing resources.</source>
        </trans-unit><trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Decouple resource-intensive tasks as background jobs</source>
        </trans-unit><trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Many types of applications require background tasks that run independently of the user interface (UI).</source>
        </trans-unit><trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Examples include batch jobs, intensive processing tasks, and long-running processes such as workflows.</source>
        </trans-unit><trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Background jobs can be executed without requiring user interaction--the application can start the job and then continue to process interactive requests from users.</source>
        </trans-unit><trans-unit id="154" translate="yes" xml:space="preserve">
          <source>This can help to minimize the load on the application UI, which can improve availability and reduce interactive response times.</source>
        </trans-unit><trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Use a messaging layer between services</source>
        </trans-unit><trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Adding a messaging layer in between services can have a benefit to performance and scalability.</source>
        </trans-unit><trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Adding a messaging layer creates a buffer for requests between the services so that requests can continue to flow in without error if the application can’t keep up.</source>
        </trans-unit><trans-unit id="158" translate="yes" xml:space="preserve">
          <source>As the application works through the requests, they will be answered in the order in which they were received.</source>
        </trans-unit><trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Implement scale units</source>
        </trans-unit><trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Scale as a unit.</source>
        </trans-unit><trans-unit id="161" translate="yes" xml:space="preserve">
          <source>For each resource, determine the impact that a scaling activity may have on dependent systems.</source>
        </trans-unit><trans-unit id="162" translate="yes" xml:space="preserve">
          <source>This makes applying scale-out operations easier, and less prone to negative impact on the application.</source>
        </trans-unit><trans-unit id="163" translate="yes" xml:space="preserve">
          <source>For example, adding x number of web and worker roles might require y number of additional queues and z number of storage accounts to handle the additional workload generated by the roles.</source>
        </trans-unit><trans-unit id="164" translate="yes" xml:space="preserve">
          <source>A scale unit could consist of x web and worker roles, y queues, and z storage accounts.</source>
        </trans-unit><trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Design the application so that it's easily scaled by adding one or more scale units.</source>
        </trans-unit><trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Performance monitoring</source>
        </trans-unit><trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Distributed applications and services running in the cloud are, by their nature, complex pieces of software that comprise many moving parts.</source>
        </trans-unit><trans-unit id="168" translate="yes" xml:space="preserve">
          <source>In a production environment, it's important to be able to track the way in which users utilize your system, trace resource utilization, and generally monitor the health and performance of your system.</source>
        </trans-unit><trans-unit id="169" translate="yes" xml:space="preserve">
          <source>You can use this information as a diagnostic aid to detect and correct issues, and also to help spot potential problems and prevent them from occurring.</source>
        </trans-unit><trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Look across all layers of your application and identify and remediate performance bottlenecks in your application.</source>
        </trans-unit><trans-unit id="171" translate="yes" xml:space="preserve">
          <source>These bottlenecks could be poor memory handling in your application, or even the process of adding indexes into your database.</source>
        </trans-unit><trans-unit id="172" translate="yes" xml:space="preserve">
          <source>It may be an iterative process as you relieve one bottleneck and then uncover another that you were unaware of.</source>
        </trans-unit><trans-unit id="173" translate="yes" xml:space="preserve">
          <source>With a thorough approach to performance monitoring, you'll be able to determine what types of patterns and practices your architecture will benefit from.</source>
        </trans-unit></group></body></file></xliff>