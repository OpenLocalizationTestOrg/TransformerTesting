<?xml version="1.0"?><xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd"><file datatype="xml" original="2-azure-policy.md" source-language="en-US" target-language="en-US"><header><tool tool-id="mdxliff" tool-name="mdxliff"  tool-company="Microsoft" /><xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2-azure-policy.49b51c.bbc2932b42a14047f6898cc064af09064fc40b78.skl</xliffext:skl_file_name><xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version><xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bbc2932b42a14047f6898cc064af09064fc40b78</xliffext:ms.openlocfilehash><xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ba7e452ac39d7f09a5646044b44de0e1cdc54982</xliffext:ms.sourcegitcommit><xliffext:ms.openlocfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">learn-pr\azure\intro-to-governance\includes\2-azure-policy.md</xliffext:ms.openlocfilepath></header><body><group id="content" extype="content"><trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Planning out a consistent cloud infrastructure starts with setting up policy.</source>
        </trans-unit><trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Your policies will enforce your rules for created resources, so your infrastructure stays compliant with your corporate standards, cost requirements, and service-level agreements (SLAs) you have with your customers.</source>
        </trans-unit><trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Icon representing Azure Blueprint</source>
        </trans-unit><trans-unit id="104" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Azure Policy<ept id="p1">**</ept> is a service in Azure that you use to define, assign, and, manage standards for resources in your environment.</source>
        </trans-unit><trans-unit id="105" translate="yes" xml:space="preserve">
          <source>It can prevent the creation of disallowed resources, ensure new resources have specific settings applied, and run evaluations of your existing resources to scan for non-compliance.</source>
        </trans-unit><trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Azure Policy comes with many built-in policy and initiative definitions that you can use, under categories such as Storage, Networking, Compute, Security Center, and Monitoring.</source>
        </trans-unit><trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Imagine we allow anyone in our organization to create virtual machines (VMs).</source>
        </trans-unit><trans-unit id="108" translate="yes" xml:space="preserve">
          <source>We want to control costs, so the administrator of our Azure tenant defines a policy that prohibits the creation of any VM with more than 4 CPUs.</source>
        </trans-unit><trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Once the policy is implemented, Azure Policy will stop anyone from creating a new VM outside the list of allowed SKUs.</source>
        </trans-unit><trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Also, if you try to <bpt id="p1">_</bpt>update<ept id="p1">_</ept> an existing VM, it will be checked against policy.</source>
        </trans-unit><trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Finally, Azure Policy will audit all the existing VMs in our organization to ensure our policy is enforced.</source>
        </trans-unit><trans-unit id="112" translate="yes" xml:space="preserve">
          <source>It can audit non-compliant resources, alter the resource properties, or stop the resource from being created.</source>
        </trans-unit><trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Azure Policy can integrate with Azure DevOps, by applying any continuous integration and delivery pipeline policies that affect the pre-deployment and post-deployment of your applications.</source>
        </trans-unit><trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Creating a policy</source>
        </trans-unit><trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The process of creating and implementing an Azure Policy begins with creating a <bpt id="p1">_</bpt>policy definition<ept id="p1">_</ept>.</source>
        </trans-unit><trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Every policy definition has conditions under which it is enforced.</source>
        </trans-unit><trans-unit id="117" translate="yes" xml:space="preserve">
          <source>And, it has an accompanying effect that takes place if the conditions are met.</source>
        </trans-unit><trans-unit id="118" translate="yes" xml:space="preserve">
          <source>To apply a policy, you will:</source>
        </trans-unit><trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Create a policy definition</source>
        </trans-unit><trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Assign a definition to a scope of resources</source>
        </trans-unit><trans-unit id="121" translate="yes" xml:space="preserve">
          <source>View policy evaluation results</source>
        </trans-unit><trans-unit id="122" translate="yes" xml:space="preserve">
          <source>What is a policy definition?</source>
        </trans-unit><trans-unit id="123" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">*</bpt>policy definition<ept id="p1">*</ept> expresses what to evaluate and what action to take.</source>
        </trans-unit><trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For example, you could ensure all public websites are secured with HTTPS, prevent a particular storage type from being created, or force a specific version of SQL Server to be used.</source>
        </trans-unit><trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Here are some of the most common policy definitions you can apply.</source>
        </trans-unit><trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Policy definition</source>
        </trans-unit><trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit><trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Allowed Storage Account SKUs</source>
        </trans-unit><trans-unit id="129" translate="yes" xml:space="preserve">
          <source>This policy definition has a set of conditions/rules that determine whether a storage account that is being deployed is within a set of SKU sizes.</source>
        </trans-unit><trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Its effect is to deny all storage accounts that do not adhere to the set of defined SKU sizes.</source>
        </trans-unit><trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Allowed Resource Type</source>
        </trans-unit><trans-unit id="132" translate="yes" xml:space="preserve">
          <source>This policy definition has a set of conditions/rules to specify the resource types that your organization can deploy.</source>
        </trans-unit><trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Its effect is to deny all resources that are not part of this defined list.</source>
        </trans-unit><trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Allowed Locations</source>
        </trans-unit><trans-unit id="135" translate="yes" xml:space="preserve">
          <source>This policy enables you to restrict the locations that your organization can specify when deploying resources.</source>
        </trans-unit><trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Its effect is used to enforce your geographic compliance requirements.</source>
        </trans-unit><trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Allowed Virtual Machine SKUs</source>
        </trans-unit><trans-unit id="138" translate="yes" xml:space="preserve">
          <source>This policy enables you to specify a set of VM SKUs that your organization can deploy.</source>
        </trans-unit><trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Not allowed resource types</source>
        </trans-unit><trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Prevents a list of resource types from being deployed.</source>
        </trans-unit><trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The policy definition itself is represented as a JSON file - you can use one of the pre-defined definitions in the portal or create your own (either modifying an existing one or starting from scratch).</source>
        </trans-unit><trans-unit id="142" translate="yes" xml:space="preserve">
          <source>There are <bpt id="p1">[</bpt>hundreds of samples available on GitHub<ept id="p1">](https://github.com/Azure/azure-policy)</ept>.</source>
        </trans-unit><trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Here is an example of a Compute policy that only allows specific virtual machine sizes:</source>
        </trans-unit><trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Notice the <ph id="ph1">`[parameters('listofAllowedSKUs')]`</ph> value; this is a replacement token that will be filled in when the policy definition is applied to a scope.</source>
        </trans-unit><trans-unit id="145" translate="yes" xml:space="preserve">
          <source>When a parameter is defined, it's given a name and optionally given a value.</source>
        </trans-unit><trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Assign a definition to a scope of resources</source>
        </trans-unit><trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Once you've defined one or more policy definitions, you'll need to assign them.</source>
        </trans-unit><trans-unit id="148" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">_</bpt>policy assignment<ept id="p1">_</ept> is a policy definition that has been assigned to take place within a specific scope.</source>
        </trans-unit><trans-unit id="149" translate="yes" xml:space="preserve">
          <source>This scope could range from a full subscription down to a resource group.</source>
        </trans-unit><trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Policy assignments are inherited by all child resources.</source>
        </trans-unit><trans-unit id="151" translate="yes" xml:space="preserve">
          <source>This means that if a policy is applied to a resource group, it is applied to all the resources within that resource group.</source>
        </trans-unit><trans-unit id="152" translate="yes" xml:space="preserve">
          <source>However, you can exclude a subscope from the policy assignment.</source>
        </trans-unit><trans-unit id="153" translate="yes" xml:space="preserve">
          <source>For example, we could enforce a policy for an entire subscription and then exclude a few select resource groups.</source>
        </trans-unit><trans-unit id="154" translate="yes" xml:space="preserve">
          <source>You can assign any of these policies through the Azure portal, PowerShell, or Azure CLI.</source>
        </trans-unit><trans-unit id="155" translate="yes" xml:space="preserve">
          <source>When you assign a policy definition, you will need to supply any parameters which are defined.</source>
        </trans-unit><trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Screenshot showing parameters when assigning a policy to a scope in the Azure Portal</source>
        </trans-unit><trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Policy effects</source>
        </trans-unit><trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Requests to create or update a resource through Azure Resource Manager are evaluated by Azure Policy first.</source>
        </trans-unit><trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Policy creates a list of all assignments that apply to the resource and then evaluates the resource against each definition.</source>
        </trans-unit><trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Policy processes several of the effects before handing the request to the appropriate Resource Provider to avoid any unnecessary processing if the resource violates policy.</source>
        </trans-unit><trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Each policy definition in Azure Policy has a single effect.</source>
        </trans-unit><trans-unit id="162" translate="yes" xml:space="preserve">
          <source>That effect determines what happens when the associated policy rule is matched.</source>
        </trans-unit><trans-unit id="163" translate="yes" xml:space="preserve">
          <source>When that happens, Azure Policy will take a specific action based on the assigned effect.</source>
        </trans-unit><trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Policy Effect</source>
        </trans-unit><trans-unit id="165" translate="yes" xml:space="preserve">
          <source>What happens?</source>
        </trans-unit><trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Deny</source>
        </trans-unit><trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The resource creation/update fails due to policy.</source>
        </trans-unit><trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Disabled</source>
        </trans-unit><trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The policy rule is ignored (disabled).</source>
        </trans-unit><trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Often used for testing.</source>
        </trans-unit><trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Append</source>
        </trans-unit><trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Adds additional parameters/fields to the requested resource during creation or update.</source>
        </trans-unit><trans-unit id="173" translate="yes" xml:space="preserve">
          <source>A common example is adding tags on resources such as Cost Center or specifying allowed IPs for a storage resource.</source>
        </trans-unit><trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Audit, AuditIfNotExists</source>
        </trans-unit><trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Creates a warning event in the activity log when evaluating a non-compliant resource, but it doesn't stop the request.</source>
        </trans-unit><trans-unit id="176" translate="yes" xml:space="preserve">
          <source>DeployIfNotExists</source>
        </trans-unit><trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Executes a template deployment when a specific condition is met.</source>
        </trans-unit><trans-unit id="178" translate="yes" xml:space="preserve">
          <source>For example, if SQL encryption is enabled on a database, then it can run a template after the DB is created to set it up a specific way.</source>
        </trans-unit><trans-unit id="179" translate="yes" xml:space="preserve">
          <source>View policy evaluation results</source>
        </trans-unit><trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Azure Policy can allow a resource to be created even if it doesn't pass validation.</source>
        </trans-unit><trans-unit id="181" translate="yes" xml:space="preserve">
          <source>In these cases, you can have it trigger an audit event which can be viewed in the Azure Policy portal, or through command-line tools.</source>
        </trans-unit><trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The easiest approach is in the portal as it provides a nice graphical overview which you can explore.</source>
        </trans-unit><trans-unit id="183" translate="yes" xml:space="preserve">
          <source>You can find the Azure Policy section through the search field or <bpt id="p1">_</bpt>All Services<ept id="p1">_</ept>.</source>
        </trans-unit><trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Azure portal showing the Azure Portal Overview screen</source>
        </trans-unit><trans-unit id="185" translate="yes" xml:space="preserve">
          <source>From this screen, you can spot resources which are not compliant and take action to correct them.</source>
        </trans-unit><trans-unit id="186" translate="yes" xml:space="preserve">
          <source>If you continue in the Azure Fundamentals learning path, you'll see Azure Policy in more detail in the <bpt id="p1">[</bpt>Control and organize Azure resources with Azure Resource Manager<ept id="p1">](https://docs.microsoft.com/learn/modules/control-and-organize-with-azure-resource-manager/)</ept> module.</source>
        </trans-unit></group></body></file></xliff>