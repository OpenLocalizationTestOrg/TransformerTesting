<?xml version="1.0"?><xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd"><file datatype="xml" original="5-identify-performance-bottlenecks-in-your-application.md" source-language="en-US" target-language="en-US"><header><tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1931010" tool-company="Microsoft" /><xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5-identify-performance-bottlenecks-in-your-application.23ea665744db9f5a6c7b4c472fc282b99b31aab2.skl</xliffext:skl_file_name><xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version><xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1616367e7872162c8712fdeac9096f959f37c824</xliffext:ms.openlocfilehash><xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">05/13/2019</xliffext:ms.lasthandoff><xliffext:ms.openlocfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">learn-pr\azure\design-for-performance-and-scalability-in-azure\includes\5-identify-performance-bottlenecks-in-your-application.md</xliffext:ms.openlocfilepath></header><body><group id="content" extype="content"><trans-unit id="101" translate="yes" xml:space="preserve">
          <source>End users are expecting more from their applications.</source>
        </trans-unit><trans-unit id="102" translate="yes" xml:space="preserve">
          <source>They want to have a great user experience and not be impacted by performance issues.</source>
        </trans-unit><trans-unit id="103" translate="yes" xml:space="preserve">
          <source>How do you integrate performance bottleneck identification into your architecture?</source>
        </trans-unit><trans-unit id="104" translate="yes" xml:space="preserve">
          <source>In this unit, we will look at both processes and tools that can help ensure that your application performs well, and help you track down why if it doesn't.</source>
        </trans-unit><trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Importance of requirements</source>
        </trans-unit><trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Before we talk about performance, it's important to talk about requirements.</source>
        </trans-unit><trans-unit id="107" translate="yes" xml:space="preserve">
          <source>In theory, we could keep improving scalability and performance further and further without end.</source>
        </trans-unit><trans-unit id="108" translate="yes" xml:space="preserve">
          <source>At some point, however, more improvement is prohibitively expensive, difficult, and doesn't have enough business impact to be worthwhile.</source>
        </trans-unit><trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Our <bpt id="p1">**</bpt>non-functional requirements<ept id="p1">**</ept> help us find that point.</source>
        </trans-unit><trans-unit id="110" translate="yes" xml:space="preserve">
          <source>These particular requirements don't tell us what our app must <bpt id="p1">*</bpt>do<ept id="p1">*</ept>.</source>
        </trans-unit><trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Instead, they tell us what quality levels it must meet.</source>
        </trans-unit><trans-unit id="112" translate="yes" xml:space="preserve">
          <source>As examples, we can define these non-functional requirements to tell us:</source>
        </trans-unit><trans-unit id="113" translate="yes" xml:space="preserve">
          <source>How fast a transaction must return under a given load.</source>
        </trans-unit><trans-unit id="114" translate="yes" xml:space="preserve">
          <source>How many simultaneous connections we need to support before we start returning errors.</source>
        </trans-unit><trans-unit id="115" translate="yes" xml:space="preserve">
          <source>In the event of server failure, what is the maximum amount of time our application is allowed be down before a back-up is online.</source>
        </trans-unit><trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Defining these requirements in advance of building your solution is critical to ensure that the application meets expectations but doesn't require more effort or expend more money than necessary.</source>
        </trans-unit><trans-unit id="117" translate="yes" xml:space="preserve">
          <source>We can also plan our monitoring and operations rules around these non-functional requirements.</source>
        </trans-unit><trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Discuss requirements with your stakeholders or customers, document them, and communicate them broadly to ensure that everyone agrees on what "good performance" means.</source>
        </trans-unit><trans-unit id="119" translate="yes" xml:space="preserve">
          <source>DevOps and application performance</source>
        </trans-unit><trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The idea behind DevOps is that we don't have development and infrastructure silos in our organization.</source>
        </trans-unit><trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Instead, they work together to effectively build, deploy, monitor, and maintain apps in streamlined process.</source>
        </trans-unit><trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The planning, development, testing, and monitoring is carried out in an iterative approach.</source>
        </trans-unit><trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Performance and quality of our application become a part of our software development life cycle, rather than an afterthought as we deploy into a live environment.</source>
        </trans-unit><trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The following illustration shows where opportunities for collaboration exist in the software development lifecycle.</source>
        </trans-unit><trans-unit id="125" translate="yes" xml:space="preserve">
          <source>An illustration showing the steps of a software lifecycle arranged into a loop to show how each stage feeds into the next.</source>
        </trans-unit><trans-unit id="126" translate="yes" xml:space="preserve">
          <source>This approach aligns with a DevOps concept called "shifting left".</source>
        </trans-unit><trans-unit id="127" translate="yes" xml:space="preserve">
          <source>In other words, bring your quality control checks earlier into your deployment and release process.</source>
        </trans-unit><trans-unit id="128" translate="yes" xml:space="preserve">
          <source>This allows you to catch end-user impacting issues earlier in the process.</source>
        </trans-unit><trans-unit id="129" translate="yes" xml:space="preserve">
          <source>As we operate in a continuous cycle, we limit the amount of manual interaction and automate as much as possible.</source>
        </trans-unit><trans-unit id="130" translate="yes" xml:space="preserve">
          <source>One way we make performance part of our DevOps process is to carry out performance or load tests to validate that the application meets the non-functional requirements prior to a deployment into production.</source>
        </trans-unit><trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Ideally, we could carry out performance and load tests in an environment that is exactly like production while not impacting our actual production servers.</source>
        </trans-unit><trans-unit id="132" translate="yes" xml:space="preserve">
          <source>When leveraging the cloud, you fully have this ability.</source>
        </trans-unit><trans-unit id="133" translate="yes" xml:space="preserve">
          <source>You can automate the creation of a production-like environment, perform testing, and then destroy the environment to minimize cost.</source>
        </trans-unit><trans-unit id="134" translate="yes" xml:space="preserve">
          <source>This approach to automation can provide reassurance that your application can handle the scale you require now, as well as respond to future growth.</source>
        </trans-unit><trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Application performance monitoring becomes a core part of this.</source>
        </trans-unit><trans-unit id="136" translate="yes" xml:space="preserve">
          <source>If we're running performance and load tests on our application or want to keep our production performance in check, we want to understand what parts of our application may be performing non-optimally.</source>
        </trans-unit><trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Let's take a look at some ways to do this.</source>
        </trans-unit><trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Performance monitoring options in Azure</source>
        </trans-unit><trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Monitoring is the act of collecting and analyzing data to determine the performance, health, and availability of your business application and associated resources.</source>
        </trans-unit><trans-unit id="140" translate="yes" xml:space="preserve">
          <source>We want to be kept informed that our application is running smoothly.</source>
        </trans-unit><trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Proactive notifications can be used to inform about critical issues that arise.</source>
        </trans-unit><trans-unit id="142" translate="yes" xml:space="preserve">
          <source>There are many layers of monitoring to consider, mainly the infrastructure layer and the application layer.</source>
        </trans-unit><trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Azure Monitor</source>
        </trans-unit><trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Azure Monitor provides a single management point for infrastructure-level logs and monitoring for most of your Azure services.</source>
        </trans-unit><trans-unit id="145" translate="yes" xml:space="preserve">
          <source>It collects metrics, activity logs, and diagnostic logs and more.</source>
        </trans-unit><trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Azure Monitor provides us with a range of features including:</source>
        </trans-unit><trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Azure alerts to proactively notify or take action on any breaches to metrics or activities arising.</source>
        </trans-unit><trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Use Azure Dashboards to combine many monitoring sources into one view of our application.</source>
        </trans-unit><trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Azure Monitor is the place to start for all your near real-time resource metric insights.</source>
        </trans-unit><trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Many Azure resources will start outputting metrics automatically once deployed.</source>
        </trans-unit><trans-unit id="151" translate="yes" xml:space="preserve">
          <source>For example, Azure Web App instances will output compute and application request metrics.</source>
        </trans-unit><trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Metrics from Application Insights are also collated here in addition to VM host diagnostic metrics.</source>
        </trans-unit><trans-unit id="153" translate="yes" xml:space="preserve">
          <source>VM guest diagnostic metrics will also appear once you opt in.</source>
        </trans-unit><trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Log Analytics</source>
        </trans-unit><trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Centralized logging can help you uncover hidden issues that may be difficult to track down.</source>
        </trans-unit><trans-unit id="156" translate="yes" xml:space="preserve">
          <source>With Log Analytics you can query and aggregate data across logs.</source>
        </trans-unit><trans-unit id="157" translate="yes" xml:space="preserve">
          <source>This cross-source correlation can help you identify issues or performance problems that may not be evident when looking at logs or metrics individually.</source>
        </trans-unit><trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The following illustration shows how Log Analytics acts as a central hub for monitoring data.</source>
        </trans-unit><trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Log Analytics receives monitoring data from your Azure resources and makes it available to consumers for analysis or visualization.</source>
        </trans-unit><trans-unit id="160" translate="yes" xml:space="preserve">
          <source>An illustration showing the role of Log Analytics in resource monitoring.</source>
        </trans-unit><trans-unit id="161" translate="yes" xml:space="preserve">
          <source>You can collate a wide range of data sources, security logs, Azure activity logs, server, network, and application logs.</source>
        </trans-unit><trans-unit id="162" translate="yes" xml:space="preserve">
          <source>You can also push on-premises System Center Operations Manager data to Log Analytics in hybrid deployment scenarios and have Azure SQL Database send diagnostic information directly into Log Analytics for detailed performance monitoring.</source>
        </trans-unit><trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Centralized logging can be massively beneficial for troubleshooting all types of scenarios, including performance issues.</source>
        </trans-unit><trans-unit id="164" translate="yes" xml:space="preserve">
          <source>It's a key part of a good monitoring strategy for any architecture.</source>
        </trans-unit><trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Application performance management</source>
        </trans-unit><trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Deep application issues are often tricky to track down.</source>
        </trans-unit><trans-unit id="167" translate="yes" xml:space="preserve">
          <source>This is where integrating telemetry into an application by using an application performance management solution (APM) to track down low-level application performance and behavior can be beneficial.</source>
        </trans-unit><trans-unit id="168" translate="yes" xml:space="preserve">
          <source>This telemetry can include individual page request times, exceptions within your application, and even custom metrics to track business logic.</source>
        </trans-unit><trans-unit id="169" translate="yes" xml:space="preserve">
          <source>This telemetry can provide a wealth of insight into what is going on within your application.</source>
        </trans-unit><trans-unit id="170" translate="yes" xml:space="preserve">
          <source>On Azure, Application Insights is a service that provides this deep application performance management.</source>
        </trans-unit><trans-unit id="171" translate="yes" xml:space="preserve">
          <source>You install a small instrumentation package in your application, and set up an Application Insights resource in the Microsoft Azure portal.</source>
        </trans-unit><trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The instrumentation monitors your app and sends telemetry data to the portal.</source>
        </trans-unit><trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Telemetry from the host environments, such as performance counters, Azure diagnostics, and Docker logs, can be ingested.</source>
        </trans-unit><trans-unit id="174" translate="yes" xml:space="preserve">
          <source>You can also set up web tests that periodically send synthetic requests to your web service.</source>
        </trans-unit><trans-unit id="175" translate="yes" xml:space="preserve">
          <source>You could even configure your application to send custom events and metrics that you write yourself in the client or server code.</source>
        </trans-unit><trans-unit id="176" translate="yes" xml:space="preserve">
          <source>For example, application-specific events such as items sold or games won.</source>
        </trans-unit><trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Application Insights stores its data in a common repository, and metrics are shared with Azure Monitor.</source>
        </trans-unit><trans-unit id="178" translate="yes" xml:space="preserve">
          <source>It can take advantage of shared functionality such as alerts, dashboards, and deep analysis with the Log Analytics query language.</source>
        </trans-unit><trans-unit id="179" translate="yes" xml:space="preserve">
          <source>A common pattern used in determining the availability of a web application is the health endpoint monitoring pattern.</source>
        </trans-unit><trans-unit id="180" translate="yes" xml:space="preserve">
          <source>This pattern is used to monitor web applications and associated back-end services, to ensure that they're available and performing correctly.</source>
        </trans-unit><trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The pattern is implemented by querying a particular uri.</source>
        </trans-unit><trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The endpoint checks on the status of many components, including the back-end services that the app depends on, rather than just the availability of the front end itself.</source>
        </trans-unit><trans-unit id="183" translate="yes" xml:space="preserve">
          <source>This acts as a service-level health check that returns an indication of the overall health of the service.</source>
        </trans-unit><trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Use an APM solution such as Application Insights to gain a deep understanding of your application and correlate activity across your application.</source>
        </trans-unit><trans-unit id="185" translate="yes" xml:space="preserve">
          <source>This can help you understand how a specific action works in the client browser, on the server, and through to downstream services.</source>
        </trans-unit><trans-unit id="186" translate="yes" xml:space="preserve">
          <source>It will also provide insight into trends, provide notifications when there is a problem, and help identify where the problem is and how to fix it, before your users are aware.</source>
        </trans-unit><trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Performance monitoring at Lamna Healthcare</source>
        </trans-unit><trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Lamna Healthcare has implemented a web-based patient booking system using virtual machines and an Azure SQL database across two Azure regions.</source>
        </trans-unit><trans-unit id="189" translate="yes" xml:space="preserve">
          <source>They've decided to use the VM Agent and Log Analytics to monitor the performance of the underlying front-end virtual machines.</source>
        </trans-unit><trans-unit id="190" translate="yes" xml:space="preserve">
          <source>They use Azure Monitor to understand the performance of their Azure SQL databases and capture key performance metrics including CPU % and deadlocks.</source>
        </trans-unit><trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Application Insights has been configured to capture availability and telemetry information.</source>
        </trans-unit><trans-unit id="192" translate="yes" xml:space="preserve">
          <source>The team has changed their new booking functionality to send custom event telemetry to Application Insights.</source>
        </trans-unit><trans-unit id="193" translate="yes" xml:space="preserve">
          <source>The team now has an approach to understanding the volume of business-related events taking place, and they can get much better insight into what's going on within their application.</source>
        </trans-unit><trans-unit id="194" translate="yes" xml:space="preserve">
          <source>We've looked at some processes, tools, and best practices to help you track down performance issues and ensure that your application is performing at its best.</source>
        </trans-unit></group></body></file></xliff>