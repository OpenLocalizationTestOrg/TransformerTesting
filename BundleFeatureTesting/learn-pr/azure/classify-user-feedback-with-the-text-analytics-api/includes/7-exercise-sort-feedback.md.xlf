<?xml version="1.0"?><xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd"><file datatype="xml" original="7-exercise-sort-feedback.md" source-language="en-US" target-language="en-US"><header><tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1931010" tool-company="Microsoft" /><xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7-exercise-sort-feedback.9eadfc410eb85f393d59231d88d4910f673fd591.skl</xliffext:skl_file_name><xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version><xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f2b7beff6b8032ba9b176bef703e03239455e4a9</xliffext:ms.openlocfilehash><xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/24/2019</xliffext:ms.lasthandoff><xliffext:ms.openlocfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">learn-pr\azure\classify-user-feedback-with-the-text-analytics-api\includes\7-exercise-sort-feedback.md</xliffext:ms.openlocfilepath></header><body><group id="content" extype="content"><trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Let's look at our solution architecture again.</source>
        </trans-unit><trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Conceptual diagram of a feedback sorting architecture.</source>
        </trans-unit><trans-unit id="103" translate="yes" xml:space="preserve">
          <source>As you can see on the right side of this diagram, we want to send messages to three queues.</source>
        </trans-unit><trans-unit id="104" translate="yes" xml:space="preserve">
          <source>So, we'll define those connections as output bindings in our function.</source>
        </trans-unit><trans-unit id="105" translate="yes" xml:space="preserve">
          <source>We could create those bindings through the <bpt id="p1">**</bpt>Output binding<ept id="p1">**</ept> UI.</source>
        </trans-unit><trans-unit id="106" translate="yes" xml:space="preserve">
          <source>However, to save time, we'll edit the config file directly.</source>
        </trans-unit><trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Add output bindings to function.json</source>
        </trans-unit><trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Select our function, <ph id="ph1">[!INCLUDE [func-name-discover](./func-name-discover.md)]</ph>, in the Function Apps portal.</source>
        </trans-unit><trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Expand the <bpt id="p1">**</bpt>View files<ept id="p1">**</ept> menu on the right of the screen.</source>
        </trans-unit><trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Under the <bpt id="p1">**</bpt>View files<ept id="p1">**</ept> tab, select <bpt id="p2">**</bpt>function.json<ept id="p2">**</ept> to open the config file in the editor.</source>
        </trans-unit><trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Replace the entire contents of <bpt id="p1">**</bpt>function.json<ept id="p1">**</ept> with the following JSON and select <bpt id="p2">**</bpt>Save<ept id="p2">**</ept>.</source>
        </trans-unit><trans-unit id="112" translate="yes" xml:space="preserve">
          <source>We've added three new bindings to the config.</source>
        </trans-unit><trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Each new binding is of type <ph id="ph1">`queue`</ph>.</source>
        </trans-unit><trans-unit id="114" translate="yes" xml:space="preserve">
          <source>These bindings are for the three queues that we'll populate with our feedback messages once we know the sentiment of the feedback.</source>
        </trans-unit><trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Each binding has a direction defined as <ph id="ph1">`out`</ph>, since we'll post messages to these queues.</source>
        </trans-unit><trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Each binding uses the same connection to our storage account.</source>
        </trans-unit><trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Each binding has a unique <ph id="ph1">`queueName`</ph> and <ph id="ph2">`name`</ph>.</source>
        </trans-unit><trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Posting a message to a queue is as easy as saying, for example,  <ph id="ph1">`context.bindings.negativeFeedbackQueueItem = "&lt;message&gt;"`</ph>.</source>
        </trans-unit><trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Update the function implementation to sort feedback into queues based on sentiment score</source>
        </trans-unit><trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The goal of our feedback sorter is to sort feedback into three buckets: positive, neutral, and negative.</source>
        </trans-unit><trans-unit id="121" translate="yes" xml:space="preserve">
          <source>So far, we have our input queue, our code to call the Text Analytics API, and we've defined our output queues.</source>
        </trans-unit><trans-unit id="122" translate="yes" xml:space="preserve">
          <source>In this section, we'll add the logic to move messages into those queues based on sentiment.</source>
        </trans-unit><trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Navigate to our function, <ph id="ph1">[!INCLUDE [func-name-discover](./func-name-discover.md)]</ph>, and open <ph id="ph2">`index.js`</ph> in the code editor again.</source>
        </trans-unit><trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Replace the implementation with the following code.</source>
        </trans-unit><trans-unit id="125" translate="yes" xml:space="preserve">
          <source>We've added the highlighted code to our implementation.</source>
        </trans-unit><trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The code parses the response from the Text Analytics API cognitive service.</source>
        </trans-unit><trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Based on the sentiment score, the message is forwarded to one of our three output queues.</source>
        </trans-unit><trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The code to post the message is just setting the correct binding parameter.</source>
        </trans-unit><trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Try it out</source>
        </trans-unit><trans-unit id="130" translate="yes" xml:space="preserve">
          <source>To test the updated implementation, we'll head back to the Storage Explorer.</source>
        </trans-unit><trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Navigate to your resource group in the <bpt id="p1">**</bpt>Resource Groups<ept id="p1">**</ept> section of the portal.</source>
        </trans-unit><trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Select <bpt id="p1">&lt;rgn&gt;</bpt>[sandbox resource group name]<ept id="p1">&lt;/rgn&gt;</ept>, the resource group used in this lesson.</source>
        </trans-unit><trans-unit id="133" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Resource group<ept id="p1">**</ept> panel that opens, locate the Storage Account entry and select it.</source>
        </trans-unit><trans-unit id="134" translate="yes" xml:space="preserve">
          <source><ph id="ph1">![</ph>Screenshot of storage account selected in the Resource Group window.<ph id="ph2">](../media/select-storage-account.png)</ph></source>
        </trans-unit><trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Select <bpt id="p1">**</bpt>Storage Explorer (preview)<ept id="p1">**</ept> from the left menu of the Storage Account main window.</source>
        </trans-unit><trans-unit id="136" translate="yes" xml:space="preserve">
          <source>This action opens the Azure Storage Explorer inside the portal.</source>
        </trans-unit><trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Screenshot of Storage Explorer showing our storage account, with one queue currently.</source>
        </trans-unit><trans-unit id="138" translate="yes" xml:space="preserve">
          <source>We have one queue listed under the <bpt id="p1">**</bpt>Queues<ept id="p1">**</ept> collection.</source>
        </trans-unit><trans-unit id="139" translate="yes" xml:space="preserve">
          <source>This queue is <ph id="ph1">[!INCLUDE [input-q](./q-name-input.md)]</ph>, the input queue we defined in the preceding test section of the module.</source>
        </trans-unit><trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Select <ph id="ph1">[!INCLUDE [input-q](./q-name-input.md)]</ph> in the left-hand menu to see the data explorer for this queue.</source>
        </trans-unit><trans-unit id="141" translate="yes" xml:space="preserve">
          <source>As expected, the queue had no data.</source>
        </trans-unit><trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Let's add a message to the queue using the <bpt id="p1">**</bpt>Add Message<ept id="p1">**</ept> command at the top of the window.</source>
        </trans-unit><trans-unit id="143" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Add Message<ept id="p1">**</ept> dialog, enter "I'm having fun with this exercise!"</source>
        </trans-unit><trans-unit id="144" translate="yes" xml:space="preserve">
          <source>into the <bpt id="p1">**</bpt>Message text<ept id="p1">**</ept> field, and click <bpt id="p2">**</bpt>OK<ept id="p2">**</ept> at the bottom of the dialog.</source>
        </trans-unit><trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The message is displayed in the data window for <ph id="ph1">[!INCLUDE [input-q](./q-name-input.md)]</ph>.</source>
        </trans-unit><trans-unit id="146" translate="yes" xml:space="preserve">
          <source>After a few seconds, click <bpt id="p1">**</bpt>Refresh<ept id="p1">**</ept> at the top of the data view to refresh the view of the queue.</source>
        </trans-unit><trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Observe that the message disappears after a while.</source>
        </trans-unit><trans-unit id="148" translate="yes" xml:space="preserve">
          <source>So, where did it go?</source>
        </trans-unit><trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Right-click on the <bpt id="p1">**</bpt>QUEUES<ept id="p1">**</ept> collection in the left-hand menu.</source>
        </trans-unit><trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Observe that a <bpt id="p1">*</bpt>new<ept id="p1">*</ept> queue has appeared.</source>
        </trans-unit><trans-unit id="151" translate="yes" xml:space="preserve">
          <source><ph id="ph1">![</ph>Screenshot of Storage Explorer showing that a new queue has been created in the collection.</source>
        </trans-unit><trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The queue has one message.<ph id="ph1">](../media/sa-new-output-q.png)</ph></source>
        </trans-unit><trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The queue <ph id="ph1">[!INCLUDE [positive-q](./q-name-positive.md)]</ph> was automatically created when a message was posted to it for the first time.</source>
        </trans-unit><trans-unit id="154" translate="yes" xml:space="preserve">
          <source>With Azure Functions queue output bindings, you don't have to manually create the output queue before posting to it!</source>
        </trans-unit><trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Now that we see an incoming message has been sorted by our function into <ph id="ph1">[!INCLUDE [positive-q](./q-name-positive.md)]</ph>, let's see where the following messages land.</source>
        </trans-unit><trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Using the same steps as above, add the following messages to <ph id="ph1">[!INCLUDE [input-q](./q-name-input.md)]</ph>.</source>
        </trans-unit><trans-unit id="157" translate="yes" xml:space="preserve">
          <source>"I hate broccoli!"</source>
        </trans-unit><trans-unit id="158" translate="yes" xml:space="preserve">
          <source>"Microsoft is a company"</source>
        </trans-unit><trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>Refresh<ept id="p1">**</ept> until <ph id="ph1">[!INCLUDE [input-q](./q-name-input.md)]</ph> is empty once again.</source>
        </trans-unit><trans-unit id="160" translate="yes" xml:space="preserve">
          <source>This process might take a few moments and require several refreshes.</source>
        </trans-unit><trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Right-click on the <bpt id="p1">**</bpt>QUEUES<ept id="p1">**</ept> collection and observe two more queues appearing.</source>
        </trans-unit><trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The queues are named <ph id="ph1">[!INCLUDE [neutral-q](./q-name-neutral.md)]</ph> and <ph id="ph2">[!INCLUDE [negative-q](./q-name-negative.md)]</ph>.</source>
        </trans-unit><trans-unit id="163" translate="yes" xml:space="preserve">
          <source>This might take a few seconds, so continue refreshing the <bpt id="p1">**</bpt>QUEUES<ept id="p1">**</ept> collection until new queues appear.</source>
        </trans-unit><trans-unit id="164" translate="yes" xml:space="preserve">
          <source>When complete, your queue list should look like the following.</source>
        </trans-unit><trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Screenshot of Storage Explorer menu showing four queues in the QUEUES collection.</source>
        </trans-unit><trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Click on each queue in the list to see whether they have messages.</source>
        </trans-unit><trans-unit id="167" translate="yes" xml:space="preserve">
          <source>If you added the suggested messages, you should see one in <ph id="ph1">[!INCLUDE [positive-q](./q-name-positive.md)]</ph>, <ph id="ph2">[!INCLUDE [neutral-q](./q-name-neutral.md)]</ph>, and <ph id="ph3">[!INCLUDE [negative-q](./q-name-negative.md)]</ph>.</source>
        </trans-unit><trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Congratulations!</source>
        </trans-unit><trans-unit id="169" translate="yes" xml:space="preserve">
          <source>We now have a working feedback sorter!</source>
        </trans-unit><trans-unit id="170" translate="yes" xml:space="preserve">
          <source>As messages arrive in the input queue, our function uses the Text Analytics API service to get a sentiment score.</source>
        </trans-unit><trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Based on that score, the function forwards the messages to the appropriate queue.</source>
        </trans-unit><trans-unit id="172" translate="yes" xml:space="preserve">
          <source>While it seems like the function processes only one queue item at a time, the Azure Functions runtime will actually read batches of queue items and spin up other instances of our function to process them in parallel.</source>
        </trans-unit></group></body></file></xliff>