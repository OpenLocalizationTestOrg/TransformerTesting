<?xml version="1.0"?><xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd"><file datatype="xml" original="3-choose-azure-storage-queues.md" source-language="en-US" target-language="en-US"><header><tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1931010" tool-company="Microsoft" /><xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3-choose-azure-storage-queues.3b9eddd9bd577a7fa95eaaf7ab95b3ad947d230f.skl</xliffext:skl_file_name><xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version><xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8afdecf67e9c242b8d1f78ee8052b5b867431f29</xliffext:ms.openlocfilehash><xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/24/2019</xliffext:ms.lasthandoff><xliffext:ms.openlocfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">learn-pr\azure\choose-a-messaging-model-in-azure-to-connect-your-services\includes\3-choose-azure-storage-queues.md</xliffext:ms.openlocfilepath></header><body><group id="content" extype="content"><trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Suppose you are planning the architecture for your music-sharing application.</source>
        </trans-unit><trans-unit id="102" translate="yes" xml:space="preserve">
          <source>You want to ensure that music files are uploaded to the web API reliably from the mobile app - we then want to deliver the details about new songs directly to the app when an artist adds new music to their collection.</source>
        </trans-unit><trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This is a perfect use of a message-based system and Azure offers two solutions to this problem:</source>
        </trans-unit><trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Azure Queue Storage</source>
        </trans-unit><trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Azure Service Bus</source>
        </trans-unit><trans-unit id="106" translate="yes" xml:space="preserve">
          <source>What is Azure Queue Storage?</source>
        </trans-unit><trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Queue storage is a service that uses Azure Storage to store large numbers of messages that can be securely accessed from anywhere in the world using a simple REST-based interface.</source>
        </trans-unit><trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Queues can contain millions of messages, limited only by the capacity of the storage account that owns it.</source>
        </trans-unit><trans-unit id="109" translate="yes" xml:space="preserve">
          <source>What is Azure Service Bus Queues?</source>
        </trans-unit><trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Service Bus is a message broker system intended for enterprise applications.</source>
        </trans-unit><trans-unit id="111" translate="yes" xml:space="preserve">
          <source>These apps often utilize multiple communication protocols, have different data contracts, higher security requirements, and can include both cloud and on-premises services.</source>
        </trans-unit><trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Service Bus is built on top of a dedicated messaging infrastructure designed for exactly these scenarios.</source>
        </trans-unit><trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Both of these services are based on the idea of a "queue" which holds sent messages until the target is ready to receive them.</source>
        </trans-unit><trans-unit id="114" translate="yes" xml:space="preserve">
          <source>What are Azure Service Bus Topics?</source>
        </trans-unit><trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Azure Service Bus topics are like queues, but can have multiple subscribers.</source>
        </trans-unit><trans-unit id="116" translate="yes" xml:space="preserve">
          <source>When a message is sent to a topic instead of a queue multiple components can be triggered to do their work.</source>
        </trans-unit><trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Imagine in a music sharing application, a user listening to a song.</source>
        </trans-unit><trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The mobile app might send a message to the "Listened" topic.</source>
        </trans-unit><trans-unit id="119" translate="yes" xml:space="preserve">
          <source>That topic will have a subscription for "UpdateUserListenHistory" and a different subscription for "UpdateArtistsFanList".</source>
        </trans-unit><trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Each of those functions is handled by a different component that receives its own copy of the message.</source>
        </trans-unit><trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Internally, topics use queues.</source>
        </trans-unit><trans-unit id="122" translate="yes" xml:space="preserve">
          <source>When you post to a topic, the message is copied and dropped into the queue for each subscription.</source>
        </trans-unit><trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The queue means that the message copy will stay around to be processed <bpt id="p1">**</bpt>by each subscription branch<ept id="p1">**</ept> even if the component processing that subscription is too busy to keep up.</source>
        </trans-unit><trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Benefits of queues</source>
        </trans-unit><trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Queue infrastructures can support many advanced features that make them very useful in</source>
        </trans-unit><trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Increased reliability</source>
        </trans-unit><trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Queues are used by distributed applications as a temporary storage location for messages pending delivery to a destination component.</source>
        </trans-unit><trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The source component can add a message to the queue and destination components can retrieve the message at the front of the queue for processing.</source>
        </trans-unit><trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Queues increase the reliability of the message exchange because, at times of high demand, messages can simply wait until a destination component is ready to process them.</source>
        </trans-unit><trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Message delivery guarantees</source>
        </trans-unit><trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Queuing systems usually guarantee delivery of each message in the queue to a destination component.</source>
        </trans-unit><trans-unit id="132" translate="yes" xml:space="preserve">
          <source>However, these guarantees can take different approaches:</source>
        </trans-unit><trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>At-Least-Once Delivery:<ept id="p1">**</ept> In this approach, each message is guaranteed to be delivered to at least one of the components that retrieve messages from the queue.</source>
        </trans-unit><trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Note, however, that in certain circumstances, it is possible that the same message may be delivered more than once.</source>
        </trans-unit><trans-unit id="135" translate="yes" xml:space="preserve">
          <source>For example, if there are two instances of a web app retrieving messages from a queue, ordinarily each message goes to only one of those instances.</source>
        </trans-unit><trans-unit id="136" translate="yes" xml:space="preserve">
          <source>However, if one instance takes a long time to process the message, and a time-out expires, the message may be sent to the other instance as well.</source>
        </trans-unit><trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Your web app code should be designed with this possibility in mind.</source>
        </trans-unit><trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>At-Most-Once Delivery:<ept id="p1">**</ept> In this approach, each message is not guaranteed to be delivered, and there is a very small chance that it may not arrive.</source>
        </trans-unit><trans-unit id="139" translate="yes" xml:space="preserve">
          <source>However, unlike At-Least-Once delivery, there is no chance that the message will be delivered twice.</source>
        </trans-unit><trans-unit id="140" translate="yes" xml:space="preserve">
          <source>This is sometimes referred to as "automatic duplicate detection".</source>
        </trans-unit><trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>First-In-First-Out (FIFO):<ept id="p1">**</ept> In most messaging systems, messages usually leave the queue in the same order in which they were added, but you should consider whether this order is guaranteed.</source>
        </trans-unit><trans-unit id="142" translate="yes" xml:space="preserve">
          <source>If your distributed application requires that messages are processed in precisely the correct order, you must choose a queue system that includes a FIFO guarantee.</source>
        </trans-unit><trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Transactional support</source>
        </trans-unit><trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Some closely related groups of messages may cause problems when delivery fails for one message in the group.</source>
        </trans-unit><trans-unit id="145" translate="yes" xml:space="preserve">
          <source>For example, consider an e-commerce application.</source>
        </trans-unit><trans-unit id="146" translate="yes" xml:space="preserve">
          <source>When the user clicks the <bpt id="p1">**</bpt>Buy<ept id="p1">**</ept> button, a series of messages might be generated and sent off to various processing destinations:</source>
        </trans-unit><trans-unit id="147" translate="yes" xml:space="preserve">
          <source>A message with the order details is sent to a fulfillment center</source>
        </trans-unit><trans-unit id="148" translate="yes" xml:space="preserve">
          <source>A message with the total and payment details is sent to a credit card processor.</source>
        </trans-unit><trans-unit id="149" translate="yes" xml:space="preserve">
          <source>A message with the receipt information is sent to a database to generate an invoice for the customer</source>
        </trans-unit><trans-unit id="150" translate="yes" xml:space="preserve">
          <source>In this case, we want to make sure <bpt id="p1">_</bpt>all<ept id="p1">_</ept> messages get processed, or none of them are processed.</source>
        </trans-unit><trans-unit id="151" translate="yes" xml:space="preserve">
          <source>We won't be in business long if the credit card message is not delivered, and all our orders are fulfilled without payment!</source>
        </trans-unit><trans-unit id="152" translate="yes" xml:space="preserve">
          <source>You can avoid these kinds of problems by grouping the two messages into a transaction.</source>
        </trans-unit><trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Message transactions succeed or fail as a single unit - just like in the database world.</source>
        </trans-unit><trans-unit id="154" translate="yes" xml:space="preserve">
          <source>If the credit card details message delivery fails, then so will the order details message.</source>
        </trans-unit><trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Which service should I choose?</source>
        </trans-unit><trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Having understood that the communication strategy for this architecture should be a message, you must choose whether to use Azure Storage queues or Azure Service Bus, both of which can be used to store and deliver messages between your components.</source>
        </trans-unit><trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Each has a slightly different feature set, which means you can choose one or the other, or use both, depending on the problem you are solving.</source>
        </trans-unit><trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Choose Service Bus Topics if</source>
        </trans-unit><trans-unit id="159" translate="yes" xml:space="preserve">
          <source>you need multiple receivers to handle each message</source>
        </trans-unit><trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Choose Service Bus queues if:</source>
        </trans-unit><trans-unit id="161" translate="yes" xml:space="preserve">
          <source>You need an At-Most-Once delivery guarantee.</source>
        </trans-unit><trans-unit id="162" translate="yes" xml:space="preserve">
          <source>You need a FIFO guarantee.</source>
        </trans-unit><trans-unit id="163" translate="yes" xml:space="preserve">
          <source>You need to group messages into transactions.</source>
        </trans-unit><trans-unit id="164" translate="yes" xml:space="preserve">
          <source>You want to receive messages without polling the queue.</source>
        </trans-unit><trans-unit id="165" translate="yes" xml:space="preserve">
          <source>You need to provide a role-based access model to the queues.</source>
        </trans-unit><trans-unit id="166" translate="yes" xml:space="preserve">
          <source>You need to handle messages larger than 64 KB but less than 256 KB.</source>
        </trans-unit><trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Your queue size will not grow larger than 80 GB.</source>
        </trans-unit><trans-unit id="168" translate="yes" xml:space="preserve">
          <source>You would like to be able to publish and consume batches of messages.</source>
        </trans-unit><trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Queue storage isn't quite as feature-rich, but if you don't need any of those features, it can be a simpler choice.</source>
        </trans-unit><trans-unit id="170" translate="yes" xml:space="preserve">
          <source>In addition, it's the best solution if your app has any of the following requirements.</source>
        </trans-unit><trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Choose Queue storage if:</source>
        </trans-unit><trans-unit id="172" translate="yes" xml:space="preserve">
          <source>You need an audit trail of all messages that pass through the queue.</source>
        </trans-unit><trans-unit id="173" translate="yes" xml:space="preserve">
          <source>You expect the queue to exceed 80 GB in size.</source>
        </trans-unit><trans-unit id="174" translate="yes" xml:space="preserve">
          <source>You want to track progress for processing a message inside of the queue.</source>
        </trans-unit><trans-unit id="175" translate="yes" xml:space="preserve">
          <source>A queue is a simple, temporary storage location for messages sent between the components of a distributed application.</source>
        </trans-unit><trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Use a queue to organize messages and gracefully handle unpredictable surges in demand.</source>
        </trans-unit><trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Use Storage queues when you want a simple and easy-to-code queue system.</source>
        </trans-unit><trans-unit id="178" translate="yes" xml:space="preserve">
          <source>For more advanced needs, use Service Bus queues.</source>
        </trans-unit><trans-unit id="179" translate="yes" xml:space="preserve">
          <source>If you have multiple destinations for a single message, but need queue-like behavior, use topics.</source>
        </trans-unit></group></body></file></xliff>