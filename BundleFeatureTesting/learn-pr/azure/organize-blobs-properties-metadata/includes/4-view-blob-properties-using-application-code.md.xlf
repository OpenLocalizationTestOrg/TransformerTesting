<?xml version="1.0"?><xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd"><file datatype="xml" original="4-view-blob-properties-using-application-code.md" source-language="en-US" target-language="en-US"><header><tool tool-id="mdxliff" tool-name="mdxliff"  tool-company="Microsoft" /><xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4-view-blob-properties-using-application-code.e169c9.a187a806755c467d65a4b65d951643856996a94c.skl</xliffext:skl_file_name><xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version><xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a187a806755c467d65a4b65d951643856996a94c</xliffext:ms.openlocfilehash><xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ba7e452ac39d7f09a5646044b44de0e1cdc54982</xliffext:ms.sourcegitcommit><xliffext:ms.openlocfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">learn-pr\azure\organize-blobs-properties-metadata\includes\4-view-blob-properties-using-application-code.md</xliffext:ms.openlocfilepath></header><body><group id="content" extype="content"><trans-unit id="101" translate="yes" xml:space="preserve">
          <source>The .NET SDK includes methods for retrieving and setting blob properties and metadata.</source>
        </trans-unit><trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Using the chemical company example, you want to use this SDK to develop an ASP.NET Core app, so that your users can easily find all relevant documents as part of the safety audit.</source>
        </trans-unit><trans-unit id="103" translate="yes" xml:space="preserve">
          <source>In this unit, you'll deploy an ASP.NET Core app retrieve blob properties.</source>
        </trans-unit><trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Prepare storage account and blob</source>
        </trans-unit><trans-unit id="105" translate="yes" xml:space="preserve">
          <source>In this step, you'll create a new storage account and container, and then upload a file to the container.</source>
        </trans-unit><trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Run the following command in the Cloud Shell to create a sample file that you will use in later examples.</source>
        </trans-unit><trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Run the following command in the Cloud Shell to set environment variables that you will use in later commands; these variables specify the name of Azure storage account, a storage container name, and a region (select from below).</source>
        </trans-unit><trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Run the following command in the Cloud Shell to create a new storage account.</source>
        </trans-unit><trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Run the following command in the Cloud Shell to create a container in your storage account.</source>
        </trans-unit><trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Run the following command in the Cloud Shell to upload a blob to the <bpt id="p1">**</bpt>safety-reports<ept id="p1">**</ept> container.</source>
        </trans-unit><trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The file will be called <bpt id="p1">**</bpt>safety-report-1234.rpt<ept id="p1">**</ept> when it has been uploaded.</source>
        </trans-unit><trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Note the <ph id="ph1">`etag`</ph> and <ph id="ph2">`lastModified`</ph> properties are displayed.</source>
        </trans-unit><trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Run the following command in the Cloud Shell to upload a blob to the <bpt id="p1">**</bpt>safety-reports<ept id="p1">**</ept> container.</source>
        </trans-unit><trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The file will be called <bpt id="p1">**</bpt>safety-report-5678.rpt<ept id="p1">**</ept> when it has been uploaded.</source>
        </trans-unit><trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Run the following command in the Cloud Shell to list the blobs in your container and check that your files have uploaded:</source>
        </trans-unit><trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The output you see resembles this example.</source>
        </trans-unit><trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Manage metadata in code</source>
        </trans-unit><trans-unit id="118" translate="yes" xml:space="preserve">
          <source>You're now ready to deploy and test out some code.</source>
        </trans-unit><trans-unit id="119" translate="yes" xml:space="preserve">
          <source>First you'll set the environment variables required by the sample app.</source>
        </trans-unit><trans-unit id="120" translate="yes" xml:space="preserve">
          <source>You'll then build and run the sample app (ignore the warnings about the Microsoft.Azure.KeyVault.Core package).</source>
        </trans-unit><trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Run the following commands in the Cloud Shell to store the environment variables used by the app:</source>
        </trans-unit><trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Run the following command in the Cloud Shell to build and run the <bpt id="p1">**</bpt>ManageMetadata<ept id="p1">**</ept> app:</source>
        </trans-unit><trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The ManageMetadata app now connects to your blob storage, and queries the container and any blobs in that container.</source>
        </trans-unit><trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The app then displays some current properties and any metadata for the container and blobs.</source>
        </trans-unit><trans-unit id="125" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit><trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Review the app code</source>
        </trans-unit><trans-unit id="127" translate="yes" xml:space="preserve">
          <source>In this final step, you'll take a look at the code used by the ManageMetadata app to query containers and blobs for properties and metadata.</source>
        </trans-unit><trans-unit id="128" translate="yes" xml:space="preserve">
          <source>In the Cloud Shell, use the editor to open Program.cs.</source>
        </trans-unit><trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The key parts of the app are the lines of code that look like the following examples:</source>
        </trans-unit><trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The following code snippet retrieves the properties and metadata for a container:</source>
        </trans-unit><trans-unit id="131" translate="yes" xml:space="preserve">
          <source>And the following code snippet retrieves the properties and metadata for a blob:</source>
        </trans-unit><trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The following code displays any properties and metadata to the console:</source>
        </trans-unit></group></body></file></xliff>