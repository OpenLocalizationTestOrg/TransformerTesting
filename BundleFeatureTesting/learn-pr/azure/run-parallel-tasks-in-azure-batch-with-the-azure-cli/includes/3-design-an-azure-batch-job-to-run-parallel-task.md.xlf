<?xml version="1.0"?><xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd"><file datatype="xml" original="3-design-an-azure-batch-job-to-run-parallel-task.md" source-language="en-US" target-language="en-US"><header><tool tool-id="mdxliff" tool-name="mdxliff"  tool-company="Microsoft" /><xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3-design-an-azure-batch-job-to-run-parallel-task.cb954a.656f864665bb14b15f720720bfd1b0f1b62eb59e.skl</xliffext:skl_file_name><xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version><xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">656f864665bb14b15f720720bfd1b0f1b62eb59e</xliffext:ms.openlocfilehash><xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ba7e452ac39d7f09a5646044b44de0e1cdc54982</xliffext:ms.sourcegitcommit><xliffext:ms.openlocfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">learn-pr\azure\run-parallel-tasks-in-azure-batch-with-the-azure-cli\includes\3-design-an-azure-batch-job-to-run-parallel-task.md</xliffext:ms.openlocfilepath></header><body><group id="content" extype="content"><trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Azure Batch uses parallel tasks to split a job across compute nodes.</source>
        </trans-unit><trans-unit id="102" translate="yes" xml:space="preserve">
          <source>As the solution architect for the non-profit, you want to understand how to design an Azure Batch job, and how to enable parallel processing, so that these capabilities can be used for the OCR scenario.</source>
        </trans-unit><trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Here, you'll learn the key elements of a Batch parallel task.</source>
        </trans-unit><trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Using Azure Batch with Azure CLI</source>
        </trans-unit><trans-unit id="105" translate="yes" xml:space="preserve">
          <source>You decide to create the solution to help the non-profit with their mission using Azure Batch and the CLI, so you can get a quick framework in place and incrementally improve it, without spending time scaffolding all the foundational code you'd otherwise need to get started.</source>
        </trans-unit><trans-unit id="106" translate="yes" xml:space="preserve">
          <source>It's true that other methods of creating Azure Batch solutions like .Net and Node.js offer richer and more granular control of Batch and other Azure APIs.</source>
        </trans-unit><trans-unit id="107" translate="yes" xml:space="preserve">
          <source>But none of those methods can match the agility and immediate feedback you get by issuing commands in the CLI and observing their results.</source>
        </trans-unit><trans-unit id="108" translate="yes" xml:space="preserve">
          <source>A sample parallel task</source>
        </trans-unit><trans-unit id="109" translate="yes" xml:space="preserve">
          <source>To get to grips with Azure Batch and the CLI, you decide on a simple proof-of-concept to demonstrate the different nodes working together in parallel.</source>
        </trans-unit><trans-unit id="110" translate="yes" xml:space="preserve">
          <source>You will loop a number of times in the CLI, add a numbered task per iteration of the loop, and later download and look at the metadata generated by each task.</source>
        </trans-unit><trans-unit id="111" translate="yes" xml:space="preserve">
          <source>This metadata will show the Azure Batch service scheduling tasks as they are created onto different nodes in sequential fashion, so that they all execute their work in parallel.</source>
        </trans-unit><trans-unit id="112" translate="yes" xml:space="preserve">
          <source>This kind of proof-of-concept actually underlies many real-world applications of Azure Batch.</source>
        </trans-unit><trans-unit id="113" translate="yes" xml:space="preserve">
          <source>For example, in the OCR scenario, tasks would also install software like Imagemagick in order to convert the uploaded water purification images to the TIF format, and would then install Tesseract to perform the work of conversion.</source>
        </trans-unit><trans-unit id="114" translate="yes" xml:space="preserve">
          <source>These tasks would be partitioned in such a way that each worker node would perform a portion of the OCR work in parallel with the others in order to complete faster.</source>
        </trans-unit><trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Even this proof-of-concept will demonstrate important components of Azure Batch working in concert together.</source>
        </trans-unit><trans-unit id="116" translate="yes" xml:space="preserve">
          <source>As shown in the graphic below, you'll create a pool, you'll create worker nodes, you'll create a job, and you'll create tasks, all using the Azure CLI to issue commands and get immediate feedback.</source>
        </trans-unit><trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Advantages of using Azure Batch</source>
        </trans-unit><trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Azure Batch is especially well-suited to running large-scale parallel and high-performance computing (HPC) batch jobs.</source>
        </trans-unit><trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The service handles everything for you -- managing and scheduling all the nodes and applications required to run your scenarios.</source>
        </trans-unit><trans-unit id="120" translate="yes" xml:space="preserve">
          <source>And it's a free service, so you only pay for the underlying compute, storage, and networking resources that you use.</source>
        </trans-unit></group></body></file></xliff>