<?xml version="1.0"?><xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd"><file datatype="xml" original="6-write-code-that-uses-service-bus-topics.md" source-language="en-US" target-language="en-US"><header><tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1931010" tool-company="Microsoft" /><xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6-write-code-that-uses-service-bus-topics.f8f8faab753a305873a503616be235ce47a503a4.skl</xliffext:skl_file_name><xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version><xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2910e0f6c5b052f38bc58ec7442bfab38e3a2cb9</xliffext:ms.openlocfilehash><xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/24/2019</xliffext:ms.lasthandoff><xliffext:ms.openlocfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">learn-pr\azure\implement-message-workflows-with-service-bus\includes\6-write-code-that-uses-service-bus-topics.md</xliffext:ms.openlocfilepath></header><body><group id="content" extype="content"><trans-unit id="101" translate="yes" xml:space="preserve">
          <source>In a distributed application, some messages need to be sent to a single recipient component.</source>
        </trans-unit><trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Other messages need to reach more than one destination.</source>
        </trans-unit><trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Let's discuss what happens when a user cancels a pizza order.</source>
        </trans-unit><trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This is a little different than placing the initial order.</source>
        </trans-unit><trans-unit id="105" translate="yes" xml:space="preserve">
          <source>In that case, we wanted to wait until the order cleared payment processing before sending the order on to the next steps (which is having it prepared and cooked at the local storefront).</source>
        </trans-unit><trans-unit id="106" translate="yes" xml:space="preserve">
          <source>But for the cancel operation, we are going to notify both the storefront <bpt id="p1">*</bpt>and<ept id="p1">*</ept> the payment processor at the same time.</source>
        </trans-unit><trans-unit id="107" translate="yes" xml:space="preserve">
          <source>This approach minimizes the chances that we waste ingredients or delivery driver time.</source>
        </trans-unit><trans-unit id="108" translate="yes" xml:space="preserve">
          <source>To allow multiple components to receive the same message, we'll use an Azure Service Bus topic.</source>
        </trans-unit><trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Code with topics vs. code with queues</source>
        </trans-unit><trans-unit id="110" translate="yes" xml:space="preserve">
          <source>If you want every message sent to be delivered to all subscribing components, you'll use topics.</source>
        </trans-unit><trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Writing code that uses topics is a way to replace queues.</source>
        </trans-unit><trans-unit id="112" translate="yes" xml:space="preserve">
          <source>You will use the same <bpt id="p1">**</bpt>Microsoft.Azure.ServiceBus<ept id="p1">**</ept> NuGet package, configure connection strings, and use asynchronous programming patterns.</source>
        </trans-unit><trans-unit id="113" translate="yes" xml:space="preserve">
          <source>However, you'll use the <ph id="ph1">`TopicClient`</ph> class instead of the <ph id="ph2">`QueueClient`</ph> class to send messages and the <ph id="ph3">`SubscriptionClient`</ph> class to receive messages.</source>
        </trans-unit><trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Setting filters on subscriptions</source>
        </trans-unit><trans-unit id="115" translate="yes" xml:space="preserve">
          <source>If you want to control that specific messages sent to the topic are delivered to particular subscriptions, you can place filters on each subscription in the topic.</source>
        </trans-unit><trans-unit id="116" translate="yes" xml:space="preserve">
          <source>In the pizza application, for instance, our storefronts are running Universal Windows Platform (UWP) applications.</source>
        </trans-unit><trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Each store can subscribe to the "OrderCancellation" topic but filter for its own StoreId.</source>
        </trans-unit><trans-unit id="118" translate="yes" xml:space="preserve">
          <source>We save internet bandwidth because we are not sending unnecessary messages to distant store locations.</source>
        </trans-unit><trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Meanwhile, the payment processing component subscribes to all our cancellation messages.</source>
        </trans-unit><trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Filters can be one of three types:</source>
        </trans-unit><trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Boolean Filters.<ept id="p1">**</ept></source>
        </trans-unit><trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`TrueFilter`</ph> ensures that all messages sent to the topic are delivered to the current subscription.</source>
        </trans-unit><trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`FalseFilter`</ph> ensures that none of the messages are delivered to the current subscription.</source>
        </trans-unit><trans-unit id="124" translate="yes" xml:space="preserve">
          <source>(This effectively blocks or switches off the subscription.)</source>
        </trans-unit><trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SQL Filters.<ept id="p1">**</ept></source>
        </trans-unit><trans-unit id="126" translate="yes" xml:space="preserve">
          <source>A SQL filter specifies a condition by using the same syntax as a <ph id="ph1">`WHERE`</ph> clause in a SQL query.</source>
        </trans-unit><trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Only messages that return <ph id="ph1">`True`</ph> when evaluated against this subscription will be delivered to the subscribers.</source>
        </trans-unit><trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Correlation Filters.<ept id="p1">**</ept></source>
        </trans-unit><trans-unit id="129" translate="yes" xml:space="preserve">
          <source>A correlation filter holds a set of conditions that are matched against the properties of each message.</source>
        </trans-unit><trans-unit id="130" translate="yes" xml:space="preserve">
          <source>If the property in the filter and the property on the message have the same value, it is considered a match.</source>
        </trans-unit><trans-unit id="131" translate="yes" xml:space="preserve">
          <source>For our StoreId filter, we <bpt id="p1">*</bpt>could<ept id="p1">*</ept> use a SQL filter.</source>
        </trans-unit><trans-unit id="132" translate="yes" xml:space="preserve">
          <source>SQL filters are the most flexible, but they're also the most computationally expensive and could slow down our Service Bus throughput.</source>
        </trans-unit><trans-unit id="133" translate="yes" xml:space="preserve">
          <source>In this case, we choose a correlation filter instead.</source>
        </trans-unit><trans-unit id="134" translate="yes" xml:space="preserve">
          <source>TopicClient example</source>
        </trans-unit><trans-unit id="135" translate="yes" xml:space="preserve">
          <source>In any sending or receiving component, you should add the following <ph id="ph1">`using`</ph> statements to any code file that calls a Service Bus topic:</source>
        </trans-unit><trans-unit id="136" translate="yes" xml:space="preserve">
          <source>To send a message, start by creating a new <ph id="ph1">`TopicClient`</ph> object and passing it the connection string and the name of the topic:</source>
        </trans-unit><trans-unit id="137" translate="yes" xml:space="preserve">
          <source>You can send a message to the topic by calling the <ph id="ph1">`TopicClient.SendAsync()`</ph> method and passing the message.</source>
        </trans-unit><trans-unit id="138" translate="yes" xml:space="preserve">
          <source>As with queues, the message must be in the form of a UTF-8 encoded string:</source>
        </trans-unit><trans-unit id="139" translate="yes" xml:space="preserve">
          <source>To receive messages, you must create a <ph id="ph1">`SubscriptionClient`</ph> object, not a <ph id="ph2">`TopicClient`</ph> object, and pass it the connection string, the name of the topic, <bpt id="p1">**</bpt>and<ept id="p1">**</ept> the name of the subscription:</source>
        </trans-unit><trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Then register a message handler - this is the asynchronous method in your code that processes the retrieved message.</source>
        </trans-unit><trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Within the message handler, call the <ph id="ph1">`SubscriptionClient.CompleteAsync()`</ph> method to remove the message from the queue:</source>
        </trans-unit></group></body></file></xliff>