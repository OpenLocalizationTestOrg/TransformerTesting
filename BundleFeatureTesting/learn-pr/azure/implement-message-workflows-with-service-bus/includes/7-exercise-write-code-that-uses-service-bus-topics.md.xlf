<?xml version="1.0"?><xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd"><file datatype="xml" original="7-exercise-write-code-that-uses-service-bus-topics.md" source-language="en-US" target-language="en-US"><header><tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1931010" tool-company="Microsoft" /><xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7-exercise-write-code-that-uses-service-bus-topics.76b1ae47ff604e7b7a7246a3537119edf79b5ce5.skl</xliffext:skl_file_name><xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version><xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">23ec53f78438e3bf2524e4137ed748f599a1c321</xliffext:ms.openlocfilehash><xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/24/2019</xliffext:ms.lasthandoff><xliffext:ms.openlocfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">learn-pr\azure\implement-message-workflows-with-service-bus\includes\7-exercise-write-code-that-uses-service-bus-topics.md</xliffext:ms.openlocfilepath></header><body><group id="content" extype="content"><trans-unit id="101" translate="yes" xml:space="preserve">
          <source>You have chosen to use an Azure Service Bus topic to distribute messages about sales performance in your sales force distributed application.</source>
        </trans-unit><trans-unit id="102" translate="yes" xml:space="preserve">
          <source>The app used by sales personnel on their mobile devices will send messages that summarize sales figures for each area and time period.</source>
        </trans-unit><trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Those messages will be distributed to web services located in the company's operational regions, including the Americas and Europe.</source>
        </trans-unit><trans-unit id="104" translate="yes" xml:space="preserve">
          <source>You have already implemented the necessary infrastructure in your Azure subscription, including the topic and subscriptions.</source>
        </trans-unit><trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Now, you want to write the code that sends messages to the topic and retrieves messages from a subscription.</source>
        </trans-unit><trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Before you begin, you'll need to make sure you are working in the correct directory by executing the following command in the Cloud Shell:</source>
        </trans-unit><trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Configure a connection string to a Service Bus namespace</source>
        </trans-unit><trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Start by configuring connection strings both in the sending and receiving components:</source>
        </trans-unit><trans-unit id="109" translate="yes" xml:space="preserve">
          <source>In the editor, open <bpt id="p1">**</bpt>performancemessagesender/Program.cs<ept id="p1">**</ept> and locate the following line of code:</source>
        </trans-unit><trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Paste the connection string between the quotation marks and save the file either through the "..." menu, or the accelerator key (<bpt id="p1">&lt;kbd&gt;</bpt>Ctrl+S<ept id="p1">&lt;/kbd&gt;</ept> on Windows and Linux, <bpt id="p2">&lt;kbd&gt;</bpt>Cmd+S<ept id="p2">&lt;/kbd&gt;</ept> on macOS).</source>
        </trans-unit><trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Repeat the previous step in <bpt id="p1">**</bpt>performancemessagereceiver/Program.cs<ept id="p1">**</ept>, pasting in the same connection string value and save the file.</source>
        </trans-unit><trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Write code that sends a message to the topic</source>
        </trans-unit><trans-unit id="113" translate="yes" xml:space="preserve">
          <source>To complete the component that sends messages about sales performance, follow these steps:</source>
        </trans-unit><trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Open <bpt id="p1">**</bpt>performancemessagesender/Program.cs<ept id="p1">**</ept> in the editor.</source>
        </trans-unit><trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Locate the <ph id="ph1">`SendPerformanceMessageAsync()`</ph> method.</source>
        </trans-unit><trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Within that method, locate the following line of code:</source>
        </trans-unit><trans-unit id="117" translate="yes" xml:space="preserve">
          <source>To create a topic client, replace that line of code with the following code:</source>
        </trans-unit><trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Within the <ph id="ph1">`try...catch`</ph> block, locate the following line of code:</source>
        </trans-unit><trans-unit id="119" translate="yes" xml:space="preserve">
          <source>To create and format a message for the queue, replace that line of code with the following code:</source>
        </trans-unit><trans-unit id="120" translate="yes" xml:space="preserve">
          <source>To display the message in the console, on the next line, add the following code:</source>
        </trans-unit><trans-unit id="121" translate="yes" xml:space="preserve">
          <source>To send the message to the queue, on the next line, add the following code:</source>
        </trans-unit><trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Locate the following line of code:</source>
        </trans-unit><trans-unit id="123" translate="yes" xml:space="preserve">
          <source>To close the connection to Service Bus, replace that line of code with the following code:</source>
        </trans-unit><trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Save the file.</source>
        </trans-unit><trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Send a message to the topic</source>
        </trans-unit><trans-unit id="126" translate="yes" xml:space="preserve">
          <source>To run the component that sends a message about a sale, run the following command in the Cloud Shell:</source>
        </trans-unit><trans-unit id="127" translate="yes" xml:space="preserve">
          <source>As the program executes, you'll see messages printed indicating that it's sending a message.</source>
        </trans-unit><trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Each time you run the app, one additional message will be added to the topic and each subscriber will receive a copy.</source>
        </trans-unit><trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Once it's finished, run the following command to see how many messages are in the Americas subscription:</source>
        </trans-unit><trans-unit id="130" translate="yes" xml:space="preserve">
          <source>If you substitute <ph id="ph1">`EuropeAndAfrica`</ph> for <ph id="ph2">`Americas`</ph>, you should see that both subscriptions have the same number of messages.</source>
        </trans-unit><trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Write code that receives a message from a topic subscription</source>
        </trans-unit><trans-unit id="132" translate="yes" xml:space="preserve">
          <source>To complete the component that retrieves messages about sales performance, follow these steps:</source>
        </trans-unit><trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Open <bpt id="p1">**</bpt>performancemessagereceiver/Program.cs<ept id="p1">**</ept> in the editor.</source>
        </trans-unit><trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Locate the <ph id="ph1">`MainAsync()`</ph> method.</source>
        </trans-unit><trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Within that method, locate the following line of code:</source>
        </trans-unit><trans-unit id="136" translate="yes" xml:space="preserve">
          <source>To create a subscription client, replace that line with the following code:</source>
        </trans-unit><trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Locate the <ph id="ph1">`RegisterMessageHandler()`</ph> method.</source>
        </trans-unit><trans-unit id="138" translate="yes" xml:space="preserve">
          <source>To configure message handling options, replace all the code within that method with the following code:</source>
        </trans-unit><trans-unit id="139" translate="yes" xml:space="preserve">
          <source>To register the message handler, on the next line, add the following code:</source>
        </trans-unit><trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Locate the <ph id="ph1">`ProcessMessagesAsync()`</ph> method.</source>
        </trans-unit><trans-unit id="141" translate="yes" xml:space="preserve">
          <source>You have registered this method as the one that handles incoming messages.</source>
        </trans-unit><trans-unit id="142" translate="yes" xml:space="preserve">
          <source>To display incoming messages in the console, replace all the code within that method with the following code:</source>
        </trans-unit><trans-unit id="143" translate="yes" xml:space="preserve">
          <source>To remove the received message from the subscription, on the next line, add the following code:</source>
        </trans-unit><trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Return to the <ph id="ph1">`MainAsync()`</ph> method and locate the following line of code:</source>
        </trans-unit><trans-unit id="145" translate="yes" xml:space="preserve">
          <source>To close the connection to Service Bus, replace that code with the following code:</source>
        </trans-unit><trans-unit id="146" translate="yes" xml:space="preserve">
          <source>In Visual Studio Code, close all editor windows and save all changed files.</source>
        </trans-unit><trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Retrieve a message from a topic subscription</source>
        </trans-unit><trans-unit id="148" translate="yes" xml:space="preserve">
          <source>To run the component that retrieves a message about sales performance, follow these steps:</source>
        </trans-unit><trans-unit id="149" translate="yes" xml:space="preserve">
          <source>When the program stops printing notifications that it is receiving messages, press <ph id="ph1">`Enter`</ph> to stop the app.</source>
        </trans-unit><trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Then, run the same command as before to confirm that there are zero remaining messages in the <ph id="ph1">`Americas`</ph> subscription.</source>
        </trans-unit><trans-unit id="151" translate="yes" xml:space="preserve">
          <source>If you substitute <ph id="ph1">`EuropeAndAfrica`</ph> for <ph id="ph2">`Americas`</ph>, you'll see that the message count has not changed.</source>
        </trans-unit><trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The application only received messages from the <ph id="ph1">`Americas`</ph> subscription.</source>
        </trans-unit></group></body></file></xliff>