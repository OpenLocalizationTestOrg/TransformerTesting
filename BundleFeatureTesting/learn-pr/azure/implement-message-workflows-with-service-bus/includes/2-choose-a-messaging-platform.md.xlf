<?xml version="1.0"?><xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd"><file datatype="xml" original="2-choose-a-messaging-platform.md" source-language="en-US" target-language="en-US"><header><tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1931010" tool-company="Microsoft" /><xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2-choose-a-messaging-platform.b2583853b570b32e824579c409a669e35f6b84e3.skl</xliffext:skl_file_name><xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version><xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bc33052011605aa9dde8fc43768bcb2c0c1bcf38</xliffext:ms.openlocfilehash><xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">05/13/2019</xliffext:ms.lasthandoff><xliffext:ms.openlocfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">learn-pr\azure\implement-message-workflows-with-service-bus\includes\2-choose-a-messaging-platform.md</xliffext:ms.openlocfilepath></header><body><group id="content" extype="content"><trans-unit id="101" translate="yes" xml:space="preserve">
          <source>There are many communications platforms that can help improve the reliability of a distributed application, including several within Azure.</source>
        </trans-unit><trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Each of these tools serves a different purpose; let's review each tool in Azure to help choose the right one.</source>
        </trans-unit><trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The architecture of our pizza ordering and tracking application requires several components: a website, data storage, back-end service, etc. We can bind the components of our application together in many different ways, and a single application can take advantage of multiple techniques.</source>
        </trans-unit><trans-unit id="104" translate="yes" xml:space="preserve">
          <source>We need to decide which techniques to use in the Contoso Slices application.</source>
        </trans-unit><trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The first step is to evaluate each place where there is communication between multiple parts.</source>
        </trans-unit><trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Some components <bpt id="p1">_</bpt>must<ept id="p1">_</ept> run in a timely manner for our application to be doing its job at all.</source>
        </trans-unit><trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Some may be important, but not time-critical.</source>
        </trans-unit><trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Finally, other components, like our mobile app notifications, are a bit more optional.</source>
        </trans-unit><trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Here, you will learn about the communications platforms available in Azure so that you can choose the right one for each requirement in your application.</source>
        </trans-unit><trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Decide between messages and events</source>
        </trans-unit><trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Messages and events are both <bpt id="p1">**</bpt>datagrams<ept id="p1">**</ept>: packages of data sent from one component to another.</source>
        </trans-unit><trans-unit id="112" translate="yes" xml:space="preserve">
          <source>They are different in ways that at first seem subtle, but can make significant differences in how you architect your application.</source>
        </trans-unit><trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Messages</source>
        </trans-unit><trans-unit id="114" translate="yes" xml:space="preserve">
          <source>In the terminology of distributed applications, the defining characteristic of a message is that the overall integrity of the application may rely on messages being received.</source>
        </trans-unit><trans-unit id="115" translate="yes" xml:space="preserve">
          <source>You can think of sending a message as one component passing the baton of a workflow to a different component.</source>
        </trans-unit><trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The entire workflow may be a vital business process, and the message is the mortar that holds the components together.</source>
        </trans-unit><trans-unit id="117" translate="yes" xml:space="preserve">
          <source>A message generally contains the data itself, not just a reference (like an ID or URL) to data.</source>
        </trans-unit><trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Sending the data as part of the datagram is less brittle than sending a reference.</source>
        </trans-unit><trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The messaging architecture guarantees delivery of the message, and because no additional lookups are required, the message is reliably handled.</source>
        </trans-unit><trans-unit id="120" translate="yes" xml:space="preserve">
          <source>However, the sending application needs to know exactly what data to include to avoid sending too much data, which requires the receiving component to do unnecessary work.</source>
        </trans-unit><trans-unit id="121" translate="yes" xml:space="preserve">
          <source>In this sense, the sender and receiver of a message are often coupled by a strict data contract.</source>
        </trans-unit><trans-unit id="122" translate="yes" xml:space="preserve">
          <source>In Contoso Slices' new architecture, when a pizza order is entered, the company would likely use messages.</source>
        </trans-unit><trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The web front end or mobile app would send a message to the back-end processing components.</source>
        </trans-unit><trans-unit id="124" translate="yes" xml:space="preserve">
          <source>In the back end, steps like routing to the store near the customer and charging the credit card would take place.</source>
        </trans-unit><trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Events</source>
        </trans-unit><trans-unit id="126" translate="yes" xml:space="preserve">
          <source>An event triggers a notification that something has occurred.</source>
        </trans-unit><trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Events are "lighter" than messages and are most often used for broadcast communications.</source>
        </trans-unit><trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Events have the following characteristics:</source>
        </trans-unit><trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The event may be sent to multiple receivers, or to none at all</source>
        </trans-unit><trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Events are often intended to "fan out," or have a large number of subscribers for each publisher</source>
        </trans-unit><trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The publisher of the event has no expectation about the action a receiving component takes</source>
        </trans-unit><trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Our pizza chain would likely use events for notifications to users about status changes.</source>
        </trans-unit><trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Status change events could be sent to Azure Event Grid, then on to Azure Functions, and to Azure Notification Hubs for a completely <bpt id="p1">_</bpt>serverless<ept id="p1">_</ept> solution.</source>
        </trans-unit><trans-unit id="134" translate="yes" xml:space="preserve">
          <source>This difference between events and messages is fundamental because communications platforms are generally designed to handle one or the other.</source>
        </trans-unit><trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Service Bus is designed to handle messages.</source>
        </trans-unit><trans-unit id="136" translate="yes" xml:space="preserve">
          <source>If you want to send events, you would likely choose Event Grid.</source>
        </trans-unit><trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Azure also has Azure Event Hubs, but it is most often used for a specific type of high-flow stream of communications used for analytics.</source>
        </trans-unit><trans-unit id="138" translate="yes" xml:space="preserve">
          <source>For example, if we had networked sensors on our pizza ovens, we could use Event Hubs coupled with Azure Stream Analytics to watch for patterns in the temperature changes that might indicate an unwanted fire or component wear.</source>
        </trans-unit><trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Service Bus topics, queues, and relays</source>
        </trans-unit><trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Azure Service Bus can exchange messages in three different ways: queues, topics, and relays.</source>
        </trans-unit><trans-unit id="141" translate="yes" xml:space="preserve">
          <source>What is a queue?</source>
        </trans-unit><trans-unit id="142" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">**</bpt>queue<ept id="p1">**</ept> is a simple temporary storage location for messages.</source>
        </trans-unit><trans-unit id="143" translate="yes" xml:space="preserve">
          <source>A sending component adds a message to the queue.</source>
        </trans-unit><trans-unit id="144" translate="yes" xml:space="preserve">
          <source>A destination component picks up the message at the front of the queue.</source>
        </trans-unit><trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Under ordinary circumstances, each message is received by only one receiver.</source>
        </trans-unit><trans-unit id="146" translate="yes" xml:space="preserve">
          <source>An illustration showing a sample message queue with one sender sending the messages to the queue and one receiver retrieving them one-by-one from the queue.</source>
        </trans-unit><trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Queues decouple the source and destination components to insulate destination components from high demand.</source>
        </trans-unit><trans-unit id="148" translate="yes" xml:space="preserve">
          <source>During peak times, messages may come in faster than destination components can handle them.</source>
        </trans-unit><trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Because source components have no direct connection to the destination, the source is unaffected and the queue will grow.</source>
        </trans-unit><trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Destination components will remove messages from the queue as they are able to handle them.</source>
        </trans-unit><trans-unit id="151" translate="yes" xml:space="preserve">
          <source>When demand drops, destination components can catch up and the queue shortens.</source>
        </trans-unit><trans-unit id="152" translate="yes" xml:space="preserve">
          <source>A queue responds to high demand like this without needing to add resources to the system.</source>
        </trans-unit><trans-unit id="153" translate="yes" xml:space="preserve">
          <source>However, for messages that need to be handled relatively quickly, adding additional instances of your destination component can allow them to share the load.</source>
        </trans-unit><trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Each message would be handled by only one instance.</source>
        </trans-unit><trans-unit id="155" translate="yes" xml:space="preserve">
          <source>This is an effective way to scale your entire application while only adding resources to the components that actually need it.</source>
        </trans-unit><trans-unit id="156" translate="yes" xml:space="preserve">
          <source>What is a topic?</source>
        </trans-unit><trans-unit id="157" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">**</bpt>topic<ept id="p1">**</ept> is similar to a queue but can have multiple subscriptions.</source>
        </trans-unit><trans-unit id="158" translate="yes" xml:space="preserve">
          <source>This means that multiple destination components can subscribe to a single topic, so each message is delivered to multiple receivers.</source>
        </trans-unit><trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Subscriptions can also filter the messages in the topic to receive only messages that are relevant.</source>
        </trans-unit><trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Subscriptions provide the same decoupled communications as queues and respond to high demand in the same way.</source>
        </trans-unit><trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Use a topic if you want each message to be delivered to more than one destination component.</source>
        </trans-unit><trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Topics are not supported in the Basic pricing tier.</source>
        </trans-unit><trans-unit id="163" translate="yes" xml:space="preserve">
          <source>An illustration showing one sender sending messages to multiple receivers through a topic that contains three subscriptions.</source>
        </trans-unit><trans-unit id="164" translate="yes" xml:space="preserve">
          <source>These subscription are used by three receivers to retrieve the relevant messages.</source>
        </trans-unit><trans-unit id="165" translate="yes" xml:space="preserve">
          <source>What is a relay?</source>
        </trans-unit><trans-unit id="166" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">**</bpt>relay<ept id="p1">**</ept> is an object that performs synchronous, two-way communication between applications.</source>
        </trans-unit><trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Unlike queues and topics, it is not a temporary storage location for messages.</source>
        </trans-unit><trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Instead, it provides bidirectional, unbuffered connections across network boundaries such as firewalls.</source>
        </trans-unit><trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Use a relay when you want direct communications between components as if they were located on the same network segment but separated by network security devices.</source>
        </trans-unit><trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Although relays are part of Azure Service Bus, they do not implement loosely coupled messaging workflows and are not considered further in this module.</source>
        </trans-unit><trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Service Bus queues and storage queues</source>
        </trans-unit><trans-unit id="172" translate="yes" xml:space="preserve">
          <source>There are two Azure features that include message queues: Service Bus and Azure Storage accounts.</source>
        </trans-unit><trans-unit id="173" translate="yes" xml:space="preserve">
          <source>As a general guide, storage queues are simpler to use but are less sophisticated and flexible than Service Bus queues.</source>
        </trans-unit><trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Key advantages of Service Bus queues include:</source>
        </trans-unit><trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Supports larger messages size (256 KB per message versus 64 KB)</source>
        </trans-unit><trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Supports both at-least-once and at-most-once delivery - choose between a very small chance that a message is lost or a very small chance it is handled twice</source>
        </trans-unit><trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Guarantees <bpt id="p1">**</bpt>first-in-first-out (FIFO)<ept id="p1">**</ept> order - messages are handled in the same order they are added (although FIFO is the normal operation of a queue, it is not guaranteed for every message)</source>
        </trans-unit><trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Can group multiple messages into a transaction - if one message in the transaction fails to be delivered, all messages in the transaction will not be delivered</source>
        </trans-unit><trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Supports role-based security</source>
        </trans-unit><trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Does not require destination components to continuously poll the queue</source>
        </trans-unit><trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Advantages of storage queues:</source>
        </trans-unit><trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Supports unlimited queue size (versus 80-GB limit for Service Bus queues)</source>
        </trans-unit><trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Maintains a log of all messages</source>
        </trans-unit><trans-unit id="184" translate="yes" xml:space="preserve">
          <source>How to choose a communications technology</source>
        </trans-unit><trans-unit id="185" translate="yes" xml:space="preserve">
          <source>We've seen the different concepts and the implementations Azure provides.</source>
        </trans-unit><trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Let's discuss what our decision process should look like for each of our communications.</source>
        </trans-unit><trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Consider the following questions:</source>
        </trans-unit><trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Is the communication an event?</source>
        </trans-unit><trans-unit id="189" translate="yes" xml:space="preserve">
          <source>If so, consider using Event Grid or Event Hubs.</source>
        </trans-unit><trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Should a single message be delivered to more than one destination?</source>
        </trans-unit><trans-unit id="191" translate="yes" xml:space="preserve">
          <source>If so, use a Service Bus topic.</source>
        </trans-unit><trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Otherwise, use a queue.</source>
        </trans-unit><trans-unit id="193" translate="yes" xml:space="preserve">
          <source>If you decide that you need a queue:</source>
        </trans-unit><trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Choose Service Bus queues if:</source>
        </trans-unit><trans-unit id="195" translate="yes" xml:space="preserve">
          <source>You need an at-most-once delivery guarantee</source>
        </trans-unit><trans-unit id="196" translate="yes" xml:space="preserve">
          <source>You need a FIFO guarantee</source>
        </trans-unit><trans-unit id="197" translate="yes" xml:space="preserve">
          <source>You need to group messages into transactions</source>
        </trans-unit><trans-unit id="198" translate="yes" xml:space="preserve">
          <source>You want to receive messages without polling the queue</source>
        </trans-unit><trans-unit id="199" translate="yes" xml:space="preserve">
          <source>You need to provide role-based access to the queues</source>
        </trans-unit><trans-unit id="200" translate="yes" xml:space="preserve">
          <source>You need to handle messages larger than 64 KB but smaller than 256 KB</source>
        </trans-unit><trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Your queue size will not grow larger than 80 GB</source>
        </trans-unit><trans-unit id="202" translate="yes" xml:space="preserve">
          <source>You would like to be able to publish and consume batches of messages</source>
        </trans-unit><trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Choose queue storage if:</source>
        </trans-unit><trans-unit id="204" translate="yes" xml:space="preserve">
          <source>You need a simple queue with no particular additional requirements</source>
        </trans-unit><trans-unit id="205" translate="yes" xml:space="preserve">
          <source>You need an audit trail of all messages that pass through the queue</source>
        </trans-unit><trans-unit id="206" translate="yes" xml:space="preserve">
          <source>You expect the queue to exceed 80 GB in size</source>
        </trans-unit><trans-unit id="207" translate="yes" xml:space="preserve">
          <source>You want to track progress for processing a message inside of the queue</source>
        </trans-unit><trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Although the components of a distributed application can communicate directly, you can often increase the reliability of that communication by using an intermediate communication platform such as Azure Service Bus or Azure Event Grid.</source>
        </trans-unit><trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Event Grid is designed for events, which notify recipients only of an event and do not contain the raw data associated with that event.</source>
        </trans-unit><trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Azure Event Hubs is designed for high-flow analytics types of events.</source>
        </trans-unit><trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Azure Service Bus and storage queues are for messages, which can be used for binding the core pieces of any application workflow.</source>
        </trans-unit><trans-unit id="212" translate="yes" xml:space="preserve">
          <source>If your requirements are simple, if you want to send each message to only one destination, or if you want to write code as quickly as possible, a storage queue may be the best option.</source>
        </trans-unit><trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Otherwise, Service Bus queues provide many more options and flexibility.</source>
        </trans-unit><trans-unit id="214" translate="yes" xml:space="preserve">
          <source>If you want to send messages to multiple subscribers, use a Service Bus topic.</source>
        </trans-unit></group></body></file></xliff>