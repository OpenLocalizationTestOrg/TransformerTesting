<?xml version="1.0"?><xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd"><file datatype="xml" original="5-exercise-write-code-that-uses-service-bus-queues.md" source-language="en-US" target-language="en-US"><header><tool tool-id="mdxliff" tool-name="mdxliff"  tool-company="Microsoft" /><xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5-exercise-write-code-that-uses-service-bus-queues.cc5663.11d284aedfb96928d80416c27bf1e1d9691d71fb.skl</xliffext:skl_file_name><xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version><xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">11d284aedfb96928d80416c27bf1e1d9691d71fb</xliffext:ms.openlocfilehash><xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ba7e452ac39d7f09a5646044b44de0e1cdc54982</xliffext:ms.sourcegitcommit><xliffext:ms.openlocfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">learn-pr\azure\implement-message-workflows-with-service-bus\includes\5-exercise-write-code-that-uses-service-bus-queues.md</xliffext:ms.openlocfilepath></header><body><group id="content" extype="content"><trans-unit id="101" translate="yes" xml:space="preserve">
          <source>You've chosen to use a Service Bus queue to exchange messages about individual sales between the mobile app that your sales personnel use and the web service, hosted in Azure, that will store details about each sale in an Azure SQL Database instance.</source>
        </trans-unit><trans-unit id="102" translate="yes" xml:space="preserve">
          <source>You've already implemented the necessary objects in your Azure subscription.</source>
        </trans-unit><trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Now, you want to write code that sends messages to that queue and retrieves messages.</source>
        </trans-unit><trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Clone and open the starter application</source>
        </trans-unit><trans-unit id="105" translate="yes" xml:space="preserve">
          <source>In this unit, you'll build two console applications.</source>
        </trans-unit><trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The first application places messages into a Service Bus queue and the second retrieves them.</source>
        </trans-unit><trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The applications are part of a single .NET Core solution.</source>
        </trans-unit><trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Start by cloning the solution: run the following commands in the Cloud Shell:</source>
        </trans-unit><trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Next, change directories into the starter folder and open the Cloud Shell editor.</source>
        </trans-unit><trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Configure a connection string to a Service Bus namespace</source>
        </trans-unit><trans-unit id="111" translate="yes" xml:space="preserve">
          <source>In order to access a Service Bus namespace and use a queue, you must configure two pieces of information in your console apps:</source>
        </trans-unit><trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The endpoint for your namespace</source>
        </trans-unit><trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The shared access key for authentication</source>
        </trans-unit><trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Both of these values can be obtained from the Azure portal in the form of a complete connection string.</source>
        </trans-unit><trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For simplicity, you will hard-code the connection string in the <bpt id="p1">**</bpt>Program.cs<ept id="p1">**</ept> file of both console applications.</source>
        </trans-unit><trans-unit id="116" translate="yes" xml:space="preserve">
          <source>In a production application, you might use a configuration file or even Azure Key Vault to store the connection string.</source>
        </trans-unit><trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Run the following command in the CloudShell to display the primary connection string for your Service Bus namespace.</source>
        </trans-unit><trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Replace <ph id="ph1">`&lt;namespace-name&gt;`</ph> with the name of your Service Bus namespace.</source>
        </trans-unit><trans-unit id="119" translate="yes" xml:space="preserve">
          <source>You'll need this connection string multiple times throughout this module, so you might want to paste it somewhere handy.</source>
        </trans-unit><trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Copy the key from Cloud Shell.</source>
        </trans-unit><trans-unit id="121" translate="yes" xml:space="preserve">
          <source>In the editor, open <bpt id="p1">**</bpt>privatemessagesender/Program.cs<ept id="p1">**</ept> and locate the following line of code:</source>
        </trans-unit><trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Paste the connection string between the quotation marks.</source>
        </trans-unit><trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Save the file using the <bpt id="p1">&lt;kbd&gt;</bpt>Ctrl+S<ept id="p1">&lt;/kbd&gt;</ept> keys.</source>
        </trans-unit><trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Repeat the previous step in <bpt id="p1">**</bpt>privatemessagereceiver/Program.cs<ept id="p1">**</ept>, pasting in the same connection string value.</source>
        </trans-unit><trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Save the file either through the "..." menu, or the accelerator key (<bpt id="p1">&lt;kbd&gt;</bpt>Ctrl+S<ept id="p1">&lt;/kbd&gt;</ept> on Windows and Linux, <bpt id="p2">&lt;kbd&gt;</bpt>Cmd+S<ept id="p2">&lt;/kbd&gt;</ept> on macOS).</source>
        </trans-unit><trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Write code that sends a message to the queue</source>
        </trans-unit><trans-unit id="127" translate="yes" xml:space="preserve">
          <source>To complete the component that sends messages about sales, follow these steps:</source>
        </trans-unit><trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Open <bpt id="p1">**</bpt>privatemessagesender/Program.cs<ept id="p1">**</ept> in the editor.</source>
        </trans-unit><trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Locate the <ph id="ph1">`SendSalesMessageAsync()`</ph> method.</source>
        </trans-unit><trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Within that method, locate the following line of code:</source>
        </trans-unit><trans-unit id="131" translate="yes" xml:space="preserve">
          <source>To create a queue client, replace that line of code with the following code:</source>
        </trans-unit><trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Within the <ph id="ph1">`try...catch`</ph> block, locate the following line of code:</source>
        </trans-unit><trans-unit id="133" translate="yes" xml:space="preserve">
          <source>To create and format a message for the queue, replace that line of code with the following code:</source>
        </trans-unit><trans-unit id="134" translate="yes" xml:space="preserve">
          <source>To display the message in the console, on the next line, add the following code:</source>
        </trans-unit><trans-unit id="135" translate="yes" xml:space="preserve">
          <source>To send the message to the queue, on the next line, add the following code:</source>
        </trans-unit><trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Locate the following line of code:</source>
        </trans-unit><trans-unit id="137" translate="yes" xml:space="preserve">
          <source>To close the connection to the Service Bus, replace that line of code with the following code:</source>
        </trans-unit><trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Save the file.</source>
        </trans-unit><trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Send a message to the queue</source>
        </trans-unit><trans-unit id="140" translate="yes" xml:space="preserve">
          <source>To run the component that sends a message about a sale, run the following command in the Cloud Shell:</source>
        </trans-unit><trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The apps you run during this exercise may take a moment to start up, as <ph id="ph1">`dotnet`</ph> has to restore packages from remote sources and build the apps the first time they are run.</source>
        </trans-unit><trans-unit id="142" translate="yes" xml:space="preserve">
          <source>As the program executes, you'll see messages printed indicating that it's sending a message.</source>
        </trans-unit><trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Each time you run the app, one additional message will be added to the queue.</source>
        </trans-unit><trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Once it's finished, run the following command to see how many messages are in the queue:</source>
        </trans-unit><trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Write code that receives a message from the queue</source>
        </trans-unit><trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Open <bpt id="p1">**</bpt>privatemessagereceiver/Program.cs<ept id="p1">**</ept> in the editor</source>
        </trans-unit><trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Locate the <ph id="ph1">`ReceiveSalesMessageAsync()`</ph> method.</source>
        </trans-unit><trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Within that method, locate the following line of code:</source>
        </trans-unit><trans-unit id="149" translate="yes" xml:space="preserve">
          <source>To create a queue client, replace that line with the following code:</source>
        </trans-unit><trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Locate the <ph id="ph1">`RegisterMessageHandler()`</ph> method.</source>
        </trans-unit><trans-unit id="151" translate="yes" xml:space="preserve">
          <source>To configure message handling options, replace all the code within that method with the following code:</source>
        </trans-unit><trans-unit id="152" translate="yes" xml:space="preserve">
          <source>To register the message handler, on the next line, add the following code:</source>
        </trans-unit><trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Locate the <ph id="ph1">`ProcessMessagesAsync()`</ph> method.</source>
        </trans-unit><trans-unit id="154" translate="yes" xml:space="preserve">
          <source>You have registered this method as the one that handles incoming messages.</source>
        </trans-unit><trans-unit id="155" translate="yes" xml:space="preserve">
          <source>To display incoming messages in the console, replace all the code within that method with the following code:</source>
        </trans-unit><trans-unit id="156" translate="yes" xml:space="preserve">
          <source>To remove the received message from the queue, on the next line, add the following code:</source>
        </trans-unit><trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Return to the <ph id="ph1">`ReceiveSalesMessageAsync()`</ph> method and locate the following line of code:</source>
        </trans-unit><trans-unit id="158" translate="yes" xml:space="preserve">
          <source>To close the connection to Service Bus, replace that line with the following code:</source>
        </trans-unit><trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Save the file.</source>
        </trans-unit><trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Retrieve a message from the queue</source>
        </trans-unit><trans-unit id="161" translate="yes" xml:space="preserve">
          <source>To run the component that sends a message about a sale, run this command in the Cloud Shell:</source>
        </trans-unit><trans-unit id="162" translate="yes" xml:space="preserve">
          <source>When you see that the message has been received and displayed in the console, press <ph id="ph1">`Enter`</ph> to stop the app.</source>
        </trans-unit><trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Then, run the same command as before to confirm that all of the messages have been removed from the queue:</source>
        </trans-unit><trans-unit id="164" translate="yes" xml:space="preserve">
          <source>This will show <ph id="ph1">`0`</ph> if all the messages have been removed.</source>
        </trans-unit><trans-unit id="165" translate="yes" xml:space="preserve">
          <source>You have written code that sends a message about individual sales to a Service Bus queue.</source>
        </trans-unit><trans-unit id="166" translate="yes" xml:space="preserve">
          <source>In the sales force distributed application, you should write this code in the mobile app that sales personnel use on devices.</source>
        </trans-unit><trans-unit id="167" translate="yes" xml:space="preserve">
          <source>You have also written code that receives a message from the Service Bus queue.</source>
        </trans-unit><trans-unit id="168" translate="yes" xml:space="preserve">
          <source>In the sales force distributed application, you should write this code in the web service that runs in Azure and processes received messages.</source>
        </trans-unit></group></body></file></xliff>