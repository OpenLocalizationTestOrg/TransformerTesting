<?xml version="1.0"?><xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd"><file datatype="xml" original="1-introduction.md" source-language="en-US" target-language="en-US"><header><tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1931010" tool-company="Microsoft" /><xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1-introduction.f5356b824ca7a6b24f031d0aa75699b93a3b700f.skl</xliffext:skl_file_name><xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version><xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b8831e007451c337859f611acc849811414a5c58</xliffext:ms.openlocfilehash><xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/24/2019</xliffext:ms.lasthandoff><xliffext:ms.openlocfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">learn-pr\azure\implement-message-workflows-with-service-bus\includes\1-introduction.md</xliffext:ms.openlocfilepath></header><body><group id="content" extype="content"><trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Modern applications frequently consist of multiple parts running on separate computers and devices, which are in locations around the world.</source>
        </trans-unit><trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Complex networks with varying reliability and speed exist between these components.</source>
        </trans-unit><trans-unit id="103" translate="yes" xml:space="preserve">
          <source>A fundamental challenge with these distributed applications is how to communicate reliably between the components.</source>
        </trans-unit><trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Suppose you are a cloud developer for Contoso Slices, a global pizza delivery chain.</source>
        </trans-unit><trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Your employer is upgrading their technology so that users can place orders from the web or their mobile apps.</source>
        </trans-unit><trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Those orders will be sent to the user's preferred storefront location, where employees will make the pizza.</source>
        </trans-unit><trans-unit id="107" translate="yes" xml:space="preserve">
          <source>As the dough is rolled out, pizza put in oven, boxed, and put on a delivery vehicle, updates are sent to the user's mobile app.</source>
        </trans-unit><trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The users even receive location updates as the delivery driver heads toward them.</source>
        </trans-unit><trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Contoso Slices previously created an online ordering system that immediately stored order data in a SQL Server database.</source>
        </trans-unit><trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Each store had to remember to manually refresh the "web orders" page to find out if they had new orders.</source>
        </trans-unit><trans-unit id="111" translate="yes" xml:space="preserve">
          <source>In addition, during peak pizza times, such as televised sporting events, the system would frequently get deadlock exceptions and timeouts.</source>
        </trans-unit><trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Finally, the previous system lacked central payment processing or any kind of status updates for the user.</source>
        </trans-unit><trans-unit id="113" translate="yes" xml:space="preserve">
          <source>For this new, more ambitious project, Contoso has hired a cloud architect and plans to use a decoupled architecture.</source>
        </trans-unit><trans-unit id="114" translate="yes" xml:space="preserve">
          <source>In this module, we'll learn how Azure Service Bus can help build an application that stays reliable during peak demand.</source>
        </trans-unit><trans-unit id="115" translate="yes" xml:space="preserve">
          <source>We'll also see how Azure Service Bus make it easy to add functionality to our applications.</source>
        </trans-unit><trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Along the way, we'll be writing the C# code necessary to put these lessons to work.</source>
        </trans-unit><trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Here, you will see how to use Azure Service Bus topics and queues in a distributed architecture to ensure reliable communications even at times of high demand.</source>
        </trans-unit><trans-unit id="118" translate="yes" xml:space="preserve">
          <source>You will also write C# code that communicates through Service Bus.</source>
        </trans-unit><trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Learning objectives</source>
        </trans-unit><trans-unit id="120" translate="yes" xml:space="preserve">
          <source>In this module, you will:</source>
        </trans-unit><trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Choose whether to use Service Bus queues, topics, or relays to communicate in a distributed application</source>
        </trans-unit><trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Configure an Azure Service Bus namespace in an Azure subscription</source>
        </trans-unit><trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Create a Service Bus <bpt id="p1">**</bpt>topic<ept id="p1">**</ept> and use it to send and receive messages</source>
        </trans-unit><trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Create a Service Bus <bpt id="p1">**</bpt>queue<ept id="p1">**</ept> and use it to send and receive messages</source>
        </trans-unit><trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Prerequisites</source>
        </trans-unit><trans-unit id="126" translate="yes" xml:space="preserve">
          <source>None</source>
        </trans-unit></group></body></file></xliff>