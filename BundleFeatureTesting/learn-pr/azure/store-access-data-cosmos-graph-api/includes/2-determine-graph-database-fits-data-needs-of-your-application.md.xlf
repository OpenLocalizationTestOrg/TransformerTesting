<?xml version="1.0"?><xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd"><file datatype="xml" original="2-determine-graph-database-fits-data-needs-of-your-application.md" source-language="en-US" target-language="en-US"><header><tool tool-id="mdxliff" tool-name="mdxliff"  tool-company="Microsoft" /><xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2-determine-graph-database-fits-data-needs-of-your-application.f45710.4da72d4f4ecc904c56e6eeac600a99a5f17cd0bf.skl</xliffext:skl_file_name><xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version><xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4da72d4f4ecc904c56e6eeac600a99a5f17cd0bf</xliffext:ms.openlocfilehash><xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ba7e452ac39d7f09a5646044b44de0e1cdc54982</xliffext:ms.sourcegitcommit><xliffext:ms.openlocfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">learn-pr\azure\store-access-data-cosmos-graph-api\includes\2-determine-graph-database-fits-data-needs-of-your-application.md</xliffext:ms.openlocfilepath></header><body><group id="content" extype="content"><trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Companies sometimes find that the inflexibility of relational databases can be a barrier to productivity.</source>
        </trans-unit><trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Graph databases can help with that problem.</source>
        </trans-unit><trans-unit id="103" translate="yes" xml:space="preserve">
          <source>In your e-commerce company, you want to know which databases may work better as graph databases.</source>
        </trans-unit><trans-unit id="104" translate="yes" xml:space="preserve">
          <source>In this unit, you will learn how graph databases differ from relational databases.</source>
        </trans-unit><trans-unit id="105" translate="yes" xml:space="preserve">
          <source>What is a graph database?</source>
        </trans-unit><trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Most developers are familiar with relational databases and their fundamental concept: tables.</source>
        </trans-unit><trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Tables are where we store our data, which is composed of rows and columns.</source>
        </trans-unit><trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Tabular data with a consistent structure is ideal for a relational database.</source>
        </trans-unit><trans-unit id="109" translate="yes" xml:space="preserve">
          <source>However if your application requires a more flexible structure, then an alternative to relational database would be graph databases.</source>
        </trans-unit><trans-unit id="110" translate="yes" xml:space="preserve">
          <source>In order to understand graph databases, you first need to know what we mean by a graph.</source>
        </trans-unit><trans-unit id="111" translate="yes" xml:space="preserve">
          <source>A graph is a structure that's composed of vertices and edges.</source>
        </trans-unit><trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Both vertices and edges can have an arbitrary number of properties.</source>
        </trans-unit><trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Component</source>
        </trans-unit><trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit><trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Vertices<ept id="p1">**</ept> or <bpt id="p2">**</bpt>Nodes<ept id="p2">**</ept></source>
        </trans-unit><trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Vertices represent objects.</source>
        </trans-unit><trans-unit id="117" translate="yes" xml:space="preserve">
          <source>For example: a person, a place, or a product.</source>
        </trans-unit><trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Edges<ept id="p1">**</ept> or <bpt id="p2">**</bpt>Relationships<ept id="p2">**</ept></source>
        </trans-unit><trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Edges denote relationships between vertices.</source>
        </trans-unit><trans-unit id="120" translate="yes" xml:space="preserve">
          <source>For example: a person might know another person, or have visited a place.</source>
        </trans-unit><trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Properties<ept id="p1">**</ept></source>
        </trans-unit><trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Properties express information about the vertices and edges.</source>
        </trans-unit><trans-unit id="123" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit><trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Vertices properties might include the name and age of a person.</source>
        </trans-unit><trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Edge properties might include a time stamp of a purchase or a hierarchical affiliation between coworkers.</source>
        </trans-unit><trans-unit id="126" translate="yes" xml:space="preserve">
          <source>More formally, this data model is known as a <bpt id="p1">*</bpt>Property Graph Model<ept id="p1">*</ept>, and Azure Cosmos DB supports this model.</source>
        </trans-unit><trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Screenshot showing the data graph and their relationships</source>
        </trans-unit><trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Typically graph databases are implemented as NoSQL stores, such as Cosmos DB or MongoDB, and usually require schema flexibility and rapid iteration.</source>
        </trans-unit><trans-unit id="129" translate="yes" xml:space="preserve">
          <source>With the graph data model, changes to the data model can be achieved with little or no impact to the application.</source>
        </trans-unit><trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Because relationships are treated as data rather than schema structure, there are many scenarios where graph databases are useful, as they let you model and store efficiently in a non-tabular format.</source>
        </trans-unit><trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Strengths and weaknesses of graph databases</source>
        </trans-unit><trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Performance</source>
        </trans-unit><trans-unit id="133" translate="yes" xml:space="preserve">
          <source>With traditional relational databases, the performance of relationship queries decreases as the number of relationships increase.</source>
        </trans-unit><trans-unit id="134" translate="yes" xml:space="preserve">
          <source>With graph databases, the performance stays constant even as the data and complexity continues to grow.</source>
        </trans-unit><trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Flexibility</source>
        </trans-unit><trans-unit id="136" translate="yes" xml:space="preserve">
          <source>In graph databases, it's easy to add to an existing structure without affecting functionality.</source>
        </trans-unit><trans-unit id="137" translate="yes" xml:space="preserve">
          <source>This flexibility allows the graph database model to dictate change, rather than being forced to adapt to a tabular way of seeing your data in a standard relational database.</source>
        </trans-unit><trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Weaknesses</source>
        </trans-unit><trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Graph databases are not as efficient at processing high volumes of transactions, nor are they as effective at handling queries that traverse an entire database.</source>
        </trans-unit><trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Graph databases do not create better relationships; instead they provide rapid data retrieval for connected data.</source>
        </trans-unit><trans-unit id="141" translate="yes" xml:space="preserve">
          <source>This increases the need for efficient data design, because any performance gains from graph searches can be reduced by failing to model the relationships between your nodes efficiently.</source>
        </trans-unit><trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Examining the data model for fit</source>
        </trans-unit><trans-unit id="143" translate="yes" xml:space="preserve">
          <source>As listed earlier, there are two fundamental components that form a graph:</source>
        </trans-unit><trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Nodes<ept id="p1">**</ept>, which are also known as <bpt id="p2">**</bpt>Vertices<ept id="p2">**</ept></source>
        </trans-unit><trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Relationships<ept id="p1">**</ept>, which are also known as <bpt id="p2">**</bpt>Edges<ept id="p2">**</ept></source>
        </trans-unit><trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Nodes or Vertices</source>
        </trans-unit><trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Nodes are often used to represent entities, but can also represent other domain components, depending on the use case.</source>
        </trans-unit><trans-unit id="148" translate="yes" xml:space="preserve">
          <source>You can often determine the nodes for your graph model by identifying the nouns in your domain.</source>
        </trans-unit><trans-unit id="149" translate="yes" xml:space="preserve">
          <source>For example, you may identify nodes such as these:</source>
        </trans-unit><trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Customer</source>
        </trans-unit><trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Employee</source>
        </trans-unit><trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Product</source>
        </trans-unit><trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Order</source>
        </trans-unit><trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Category</source>
        </trans-unit><trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Invoice</source>
        </trans-unit><trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Nodes can contain properties that hold name-value pairs of data.</source>
        </trans-unit><trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Nodes can be assigned roles or types by using one or more labels in order to group or categorize them.</source>
        </trans-unit><trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Relationships or Edges</source>
        </trans-unit><trans-unit id="159" translate="yes" xml:space="preserve">
          <source>A relationship connects two nodes, the power of graphs is that both the relationship and the nodes can be queried in order to find related data.</source>
        </trans-unit><trans-unit id="160" translate="yes" xml:space="preserve">
          <source>A relationship has a source node and a target node, and is represented in a graph diagram by a line or an arrow.</source>
        </trans-unit><trans-unit id="161" translate="yes" xml:space="preserve">
          <source>You can often determine relationships for the graph model by identifying actions or verbs in your domain.</source>
        </trans-unit><trans-unit id="162" translate="yes" xml:space="preserve">
          <source>For example, you may identify relationships such as these:</source>
        </trans-unit><trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Likes</source>
        </trans-unit><trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Places</source>
        </trans-unit><trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Belongs to</source>
        </trans-unit><trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Submits</source>
        </trans-unit><trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Properties</source>
        </trans-unit><trans-unit id="168" translate="yes" xml:space="preserve">
          <source>In this unit, we have been discussing the process of creating a basic graph data model for an e-commerce company, which shows the interactions between customers, products, and orders.</source>
        </trans-unit><trans-unit id="169" translate="yes" xml:space="preserve">
          <source>When you have identified your nodes and relationships, your data model begins to take shape.</source>
        </trans-unit><trans-unit id="170" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit><trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Node</source>
        </trans-unit><trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Relationship</source>
        </trans-unit><trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Node</source>
        </trans-unit><trans-unit id="174" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">**</bpt>customer<ept id="p1">**</ept></source>
        </trans-unit><trans-unit id="175" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>likes<ept id="p1">*</ept></source>
        </trans-unit><trans-unit id="176" translate="yes" xml:space="preserve">
          <source>a <bpt id="p1">**</bpt>product<ept id="p1">**</ept></source>
        </trans-unit><trans-unit id="177" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">**</bpt>product<ept id="p1">**</ept></source>
        </trans-unit><trans-unit id="178" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>belongs to<ept id="p1">*</ept></source>
        </trans-unit><trans-unit id="179" translate="yes" xml:space="preserve">
          <source>a <bpt id="p1">**</bpt>category<ept id="p1">**</ept></source>
        </trans-unit><trans-unit id="180" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">**</bpt>customer<ept id="p1">**</ept></source>
        </trans-unit><trans-unit id="181" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>places<ept id="p1">*</ept></source>
        </trans-unit><trans-unit id="182" translate="yes" xml:space="preserve">
          <source>an <bpt id="p1">**</bpt>order<ept id="p1">**</ept></source>
        </trans-unit><trans-unit id="183" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">**</bpt>product<ept id="p1">**</ept></source>
        </trans-unit><trans-unit id="184" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>belongs to<ept id="p1">*</ept></source>
        </trans-unit><trans-unit id="185" translate="yes" xml:space="preserve">
          <source>an <bpt id="p1">**</bpt>order<ept id="p1">**</ept></source>
        </trans-unit><trans-unit id="186" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">**</bpt>employee<ept id="p1">**</ept></source>
        </trans-unit><trans-unit id="187" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>submits<ept id="p1">*</ept></source>
        </trans-unit><trans-unit id="188" translate="yes" xml:space="preserve">
          <source>an <bpt id="p1">**</bpt>invoice<ept id="p1">**</ept></source>
        </trans-unit><trans-unit id="189" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">**</bpt>order<ept id="p1">**</ept></source>
        </trans-unit><trans-unit id="190" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>belongs to<ept id="p1">*</ept></source>
        </trans-unit><trans-unit id="191" translate="yes" xml:space="preserve">
          <source>an <bpt id="p1">**</bpt>invoice<ept id="p1">**</ept></source>
        </trans-unit><trans-unit id="192" translate="yes" xml:space="preserve">
          <source>You can further enhance your data model by defining attributes for each of these entities as key-value properties.</source>
        </trans-unit><trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Properties are name-value pairs that you can define for nodes or relationships, which allow you to store relevant data about the node or relationship your are describing.</source>
        </trans-unit><trans-unit id="194" translate="yes" xml:space="preserve">
          <source>To determine what kind of properties you can use, you could ask some relevant questions about the data you are capturing:</source>
        </trans-unit><trans-unit id="195" translate="yes" xml:space="preserve">
          <source>When did the customer place the order?</source>
        </trans-unit><trans-unit id="196" translate="yes" xml:space="preserve">
          <source>What was the product price?</source>
        </trans-unit><trans-unit id="197" translate="yes" xml:space="preserve">
          <source>When did the employee submit the invoice?</source>
        </trans-unit><trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Which invoice does the order belong to?</source>
        </trans-unit><trans-unit id="199" translate="yes" xml:space="preserve">
          <source>The flexible nature of a graph database allows you to grow and change your model over time, and to add or remove relationships, nodes, and properties.</source>
        </trans-unit></group></body></file></xliff>