<?xml version="1.0"?><xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd"><file datatype="xml" original="6-exercise-query-graph-data-from-an-application-using-gremlin-api.md" source-language="en-US" target-language="en-US"><header><tool tool-id="mdxliff" tool-name="mdxliff"  tool-company="Microsoft" /><xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6-exercise-query-graph-data-from-an-application-using-gremlin-api.a6d20a.0c123669b3903dd51624c3beea23e7fb07fe16bc.skl</xliffext:skl_file_name><xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version><xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0c123669b3903dd51624c3beea23e7fb07fe16bc</xliffext:ms.openlocfilehash><xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ba7e452ac39d7f09a5646044b44de0e1cdc54982</xliffext:ms.sourcegitcommit><xliffext:ms.openlocfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">learn-pr\azure\store-access-data-cosmos-graph-api\includes\6-exercise-query-graph-data-from-an-application-using-gremlin-api.md</xliffext:ms.openlocfilepath></header><body><group id="content" extype="content"><trans-unit id="101" translate="yes" xml:space="preserve">
          <source>In this unit, you will execute queries against the graph database using the .NET Core application that you created in an earlier unit.</source>
        </trans-unit><trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Modify the .NET Core application to return detailed results</source>
        </trans-unit><trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Add an additional package to your app for JSON parsing.</source>
        </trans-unit><trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Open your app in the online code editor.</source>
        </trans-unit><trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Open your Program.cs file in the editor, and add the following statement to the list of <ph id="ph1">`using`</ph> statements.</source>
        </trans-unit><trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Modify <ph id="ph1">`Main()`</ph> method by inserting the following lines of code on the line after the <ph id="ph2">`Console.WriteLine("\n{{\"Returned\": \"{0}\"}}", resultSet.Result.Count);`</ph>.</source>
        </trans-unit><trans-unit id="107" translate="yes" xml:space="preserve">
          <source>This code will serialize the JSON returned from the queries and add it to the output.</source>
        </trans-unit><trans-unit id="108" translate="yes" xml:space="preserve">
          <source>To save your changes, press <bpt id="p1">**</bpt>Ctrl-S<ept id="p1">**</ept> to save the file, and then press <bpt id="p2">**</bpt>Ctrl-Q<ept id="p2">**</ept> to exit the editor.</source>
        </trans-unit><trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Run detailed queries with your .NET Core app</source>
        </trans-unit><trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Now that your .NET Core app has been updated to display detailed information, try out the following queries to retrieve detailed results from your graph.</source>
        </trans-unit><trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Return all vertices/nodes from your graph</source>
        </trans-unit><trans-unit id="112" translate="yes" xml:space="preserve">
          <source>To retrieve all the vertices/nodes in your graph, run the following command:</source>
        </trans-unit><trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Your app should display a message indicating the number of vertices/nodes in your graph, together with all of the information for your vertices/nodes; for example:</source>
        </trans-unit><trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Return all edges/relationships from your graph</source>
        </trans-unit><trans-unit id="115" translate="yes" xml:space="preserve">
          <source>To retrieve all the edges/relationships in your graph, run the following command:</source>
        </trans-unit><trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Your app should display a message indicating the number of edges/relationships in your graph, together with all of the information for your edges/relationships; for example:</source>
        </trans-unit><trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Count the number of vertices/nodes or edges/relationships in the graph</source>
        </trans-unit><trans-unit id="118" translate="yes" xml:space="preserve">
          <source>To count the vertices/nodes in your graph, run the following command:</source>
        </trans-unit><trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Your app should display a message indicating that one item was returned, (the count itself), followed by the number of vertices/nodes in your graph; for example:</source>
        </trans-unit><trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Similar to the above example, to count the edges/relationships in your graph, run the following command:</source>
        </trans-unit><trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Your app should display a message indicating that one item was returned, (the count itself), followed by the number of edges/relationships in your graph; for example:</source>
        </trans-unit><trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Applying filters to queries</source>
        </trans-unit><trans-unit id="123" translate="yes" xml:space="preserve">
          <source>You can perform filters using Gremlin's <ph id="ph1">`has`</ph> and <ph id="ph2">`hasLabel`</ph> steps.</source>
        </trans-unit><trans-unit id="124" translate="yes" xml:space="preserve">
          <source>You can also combine them using <ph id="ph1">`and`</ph>, <ph id="ph2">`or`</ph>, and <ph id="ph3">`not`</ph> to build more complex filters.</source>
        </trans-unit><trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Azure Cosmos DB provides schema-agnostic indexing of all properties within your vertices and degrees for fast queries.</source>
        </trans-unit><trans-unit id="126" translate="yes" xml:space="preserve">
          <source>First, let's display all of the vertices/nodes in your graph with a particular label:</source>
        </trans-unit><trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Your app should display a message indicating the number of vertices/nodes in your graph with <bpt id="p1">*</bpt>Category<ept id="p1">*</ept> as a label, followed by the detailed vertices/nodes; for example:</source>
        </trans-unit><trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Next, Let's filter results for a particular label with a specific property:</source>
        </trans-unit><trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Your app should display a message indicating the number of vertices/nodes in your graph with <bpt id="p1">*</bpt>Product<ept id="p1">*</ept> as a label and a <bpt id="p2">*</bpt>name<ept id="p2">*</ept> property of <bpt id="p3">*</bpt>p1<ept id="p3">*</ept>, followed by the detailed vertice/node; for example:</source>
        </trans-unit><trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Projection from your query results</source>
        </trans-unit><trans-unit id="131" translate="yes" xml:space="preserve">
          <source>You can project specific properties in your query results by specifying which value to return; for example:</source>
        </trans-unit><trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Your app should display a list of results like the following example:</source>
        </trans-unit><trans-unit id="133" translate="yes" xml:space="preserve">
          <source>You can project multiple properties in your query results by specifying a list of values to return; for example:</source>
        </trans-unit><trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Your app should display a list of results like the following example:</source>
        </trans-unit><trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Sorting queries</source>
        </trans-unit><trans-unit id="136" translate="yes" xml:space="preserve">
          <source>To return a list of products sorted by name in ascending order, use the following command:</source>
        </trans-unit><trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Your app should display a list of results like the following example:</source>
        </trans-unit><trans-unit id="138" translate="yes" xml:space="preserve">
          <source>To return a list of products sorted by price in descending order, use the following command:</source>
        </trans-unit><trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Your app should display a list of results like the following example:</source>
        </trans-unit><trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Update properties of vertices</source>
        </trans-unit><trans-unit id="141" translate="yes" xml:space="preserve">
          <source>You can update the properties of a specific vertice/node by applying a filter and then assigning the property a new value; for example</source>
        </trans-unit><trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Your app should display a list of results like the following example:</source>
        </trans-unit></group></body></file></xliff>