<?xml version="1.0"?><xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd"><file datatype="xml" original="6-create-a-basic-app.md" source-language="en-US" target-language="en-US"><header><tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1931010" tool-company="Microsoft" /><xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6-create-a-basic-app.e3a3c125e13d71e693d1d661b1ff37753a98486a.skl</xliffext:skl_file_name><xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version><xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9f891e866c6e7c131584bde20a6533df7ee7360f</xliffext:ms.openlocfilehash><xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">05/13/2019</xliffext:ms.lasthandoff><xliffext:ms.openlocfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">learn-pr\azure\build-a-web-app-with-mean-on-a-linux-vm\includes\6-create-a-basic-app.md</xliffext:ms.openlocfilepath></header><body><group id="content" extype="content"><trans-unit id="101" translate="yes" xml:space="preserve">
          <source>So far, you have MongoDB and Node.js installed on your Ubuntu VM.</source>
        </trans-unit><trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Now it's time to create a basic web application to see things in action.</source>
        </trans-unit><trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Along the way, you'll see how AngularJS and Express fit in.</source>
        </trans-unit><trans-unit id="104" translate="yes" xml:space="preserve">
          <source>A great way to learn is by example.</source>
        </trans-unit><trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The web application you'll build implements a basic book database.</source>
        </trans-unit><trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The web application enables you to list information about books, add new books, and delete existing books.</source>
        </trans-unit><trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The web application you'll see here demonstrates many concepts that apply to most MEAN stack web applications.</source>
        </trans-unit><trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Based on your needs and interests, you can explore the features you need to build your own MEAN stack applications.</source>
        </trans-unit><trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Here's what the Books web application will look like.</source>
        </trans-unit><trans-unit id="110" translate="yes" xml:space="preserve">
          <source>A web page with a form and submission button.</source>
        </trans-unit><trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Here's how each component of the MEAN stack fits in.</source>
        </trans-unit><trans-unit id="112" translate="yes" xml:space="preserve">
          <source>MongoDB stores information about books.</source>
        </trans-unit><trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Express routes each HTTP request to the appropriate handler.</source>
        </trans-unit><trans-unit id="114" translate="yes" xml:space="preserve">
          <source>AngularJS connects the user interface with the program's business logic.</source>
        </trans-unit><trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Node.js hosts the server-side application.</source>
        </trans-unit><trans-unit id="116" translate="yes" xml:space="preserve">
          <source>For learning purposes, here you're building a basic web application.</source>
        </trans-unit><trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Its purpose is to test out your MEAN stack and give you a sense of how it works.</source>
        </trans-unit><trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The application is not sufficiently secure or ready for production use.</source>
        </trans-unit><trans-unit id="119" translate="yes" xml:space="preserve">
          <source>What about Express?</source>
        </trans-unit><trans-unit id="120" translate="yes" xml:space="preserve">
          <source>So far, you've installed MongoDB and Node.js on your VM.</source>
        </trans-unit><trans-unit id="121" translate="yes" xml:space="preserve">
          <source>What about Express, the <bpt id="p1">**</bpt>E<ept id="p1">**</ept> in the MEAN acronym?</source>
        </trans-unit><trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Express is a web server framework that's built for Node.js that simplifies the process for building web applications.</source>
        </trans-unit><trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The main purpose of Express is to handle request routing.</source>
        </trans-unit><trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">_</bpt>Routing<ept id="p1">_</ept> refers to how the application responds to a request to a specific endpoint.</source>
        </trans-unit><trans-unit id="125" translate="yes" xml:space="preserve">
          <source>An endpoint is made up of a path, or URI, and a request method, such as GET or POST.</source>
        </trans-unit><trans-unit id="126" translate="yes" xml:space="preserve">
          <source>For example, you might respond to a GET request to the <ph id="ph1">`/book`</ph> endpoint by providing the list of all books in the database.</source>
        </trans-unit><trans-unit id="127" translate="yes" xml:space="preserve">
          <source>You might respond to a POST request to the same endpoint by adding an entry to the database based on fields the user entered into a web form.</source>
        </trans-unit><trans-unit id="128" translate="yes" xml:space="preserve">
          <source>In the web application you'll build shortly, you'll use Express to route HTTP requests and to return web content to your user.</source>
        </trans-unit><trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Express can also help your web applications work with HTTP cookies and process query strings.</source>
        </trans-unit><trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Express is a Node.js package.</source>
        </trans-unit><trans-unit id="131" translate="yes" xml:space="preserve">
          <source>You use the <bpt id="p1">**</bpt>npm<ept id="p1">**</ept> utility, which comes with Node.js, to install and manage Node.js packages.</source>
        </trans-unit><trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Later in this part, you'll create a file named <ph id="ph1">`package.json`</ph> to define Express and other dependencies and then run the <ph id="ph2">`npm install`</ph> command to install these dependencies.</source>
        </trans-unit><trans-unit id="133" translate="yes" xml:space="preserve">
          <source>What about AngularJS?</source>
        </trans-unit><trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Like Express, you haven't yet installed AngularJS, the <bpt id="p1">**</bpt>A<ept id="p1">**</ept> in the MEAN acronym.</source>
        </trans-unit><trans-unit id="135" translate="yes" xml:space="preserve">
          <source>AngularJS makes web applications easier to write and test because it enables you to better separate the <bpt id="p1">_</bpt>appearance<ept id="p1">_</ept> of your web page, your HTML code, from how your web page behaves.</source>
        </trans-unit><trans-unit id="136" translate="yes" xml:space="preserve">
          <source>If you're familiar with the model–view–controller (MVC) pattern or the concept of data binding, AngularJS will be familiar to you.</source>
        </trans-unit><trans-unit id="137" translate="yes" xml:space="preserve">
          <source>AngularJS is what's called a front-end JavaScript framework, which means it needs to only be available on the client that accesses the application.</source>
        </trans-unit><trans-unit id="138" translate="yes" xml:space="preserve">
          <source>In other words, AngularJS runs in your user's web browser, not on your web server.</source>
        </trans-unit><trans-unit id="139" translate="yes" xml:space="preserve">
          <source>And because AngularJS is JavaScript, you can use it to easily fetch data from your web server to show on the page.</source>
        </trans-unit><trans-unit id="140" translate="yes" xml:space="preserve">
          <source>You don't really <bpt id="p1">_</bpt>install<ept id="p1">_</ept> AngularJS.</source>
        </trans-unit><trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Instead, you add a reference to the JavaScript file in your HTML page, just as you do with other JavaScript libraries.</source>
        </trans-unit><trans-unit id="142" translate="yes" xml:space="preserve">
          <source>There are several ways to include AngularJS in your web pages.</source>
        </trans-unit><trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Here you'll load AngularJS from a content delivery network, or CDN.</source>
        </trans-unit><trans-unit id="144" translate="yes" xml:space="preserve">
          <source>A CDN is a way to distribute images, video, and other content geographically to improve download speeds.</source>
        </trans-unit><trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Don't add this code quite yet, but here's an example that loads AngularJS from a CDN.</source>
        </trans-unit><trans-unit id="146" translate="yes" xml:space="preserve">
          <source>You would typically add this code to the <ph id="ph1">`&lt;head&gt;`</ph> section of your HTML page.</source>
        </trans-unit><trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Don't confuse AngularJS with Angular.</source>
        </trans-unit><trans-unit id="148" translate="yes" xml:space="preserve">
          <source>While many of the concepts are similar between the two, AngularJS is the predecessor to Angular.</source>
        </trans-unit><trans-unit id="149" translate="yes" xml:space="preserve">
          <source>AngularJS is still commonly used for building web applications.</source>
        </trans-unit><trans-unit id="150" translate="yes" xml:space="preserve">
          <source>While AngularJS is based on JavaScript, Angular is based on TypeScript, a programming language that makes it easier to write JavaScript programs.</source>
        </trans-unit><trans-unit id="151" translate="yes" xml:space="preserve">
          <source>How will I build the application?</source>
        </trans-unit><trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Here you'll use a basic process.</source>
        </trans-unit><trans-unit id="153" translate="yes" xml:space="preserve">
          <source>You'll write application code from Cloud Shell and then use SCP, or secure copy protocol, to copy the files to your VM.</source>
        </trans-unit><trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Then you'll start the Node.js application and see the results in your browser.</source>
        </trans-unit><trans-unit id="155" translate="yes" xml:space="preserve">
          <source>In practice, you would typically write and test your web application in a more local environment, such as from your laptop or from a virtual machine you run locally.</source>
        </trans-unit><trans-unit id="156" translate="yes" xml:space="preserve">
          <source>You might then store your code in a revision control system such as Git and use a continuous integration and continuous delivery, or CI/CD, system such as Azure DevOps to test your changes and upload them to your VM.</source>
        </trans-unit><trans-unit id="157" translate="yes" xml:space="preserve">
          <source>We'll point you to more resources at the end of this module.</source>
        </trans-unit><trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Create the Books web application</source>
        </trans-unit><trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Here you'll create all the code, script, and HTML files that make up your web application.</source>
        </trans-unit><trans-unit id="160" translate="yes" xml:space="preserve">
          <source>For brevity, we'll highlight the important parts of each file but won't go into complete details.</source>
        </trans-unit><trans-unit id="161" translate="yes" xml:space="preserve">
          <source>If you're still connected to your VM over SSH, run <ph id="ph1">`exit`</ph> to leave the SSH session and return to Cloud Shell.</source>
        </trans-unit><trans-unit id="162" translate="yes" xml:space="preserve">
          <source>You're now back at your Cloud Shell session.</source>
        </trans-unit><trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Create the files</source>
        </trans-unit><trans-unit id="164" translate="yes" xml:space="preserve">
          <source>From Cloud Shell, run these commands to create the folders and files for your web application.</source>
        </trans-unit><trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Here's what's included:</source>
        </trans-unit><trans-unit id="166" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Books`</ph> <ph id="ph2">&amp;ndash;</ph> the project's root directory.</source>
        </trans-unit><trans-unit id="167" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`server.js`</ph> defines the entry point to the web application.</source>
        </trans-unit><trans-unit id="168" translate="yes" xml:space="preserve">
          <source>It loads the required Node.js packages, specifies the port to listen on, and begins listening for incoming HTTP traffic.</source>
        </trans-unit><trans-unit id="169" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`package.json`</ph> provides information about your application, including its name, description, and what Node.js packages your application needs to run.</source>
        </trans-unit><trans-unit id="170" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Books/app`</ph> <ph id="ph2">&amp;ndash;</ph> contains code that runs on the server.</source>
        </trans-unit><trans-unit id="171" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`model.js`</ph> defines the database connection and schema.</source>
        </trans-unit><trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Think of it as the data model for your application.</source>
        </trans-unit><trans-unit id="173" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`routes.js`</ph> handles request routing.</source>
        </trans-unit><trans-unit id="174" translate="yes" xml:space="preserve">
          <source>For example, it defines GET requests to the <ph id="ph1">`/book`</ph> endpoint by providing the list of all books in the database.</source>
        </trans-unit><trans-unit id="175" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Books/public`</ph> <ph id="ph2">&amp;ndash;</ph> contains files that are served directly to the client's browser.</source>
        </trans-unit><trans-unit id="176" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`index.html`</ph> contains the index page.</source>
        </trans-unit><trans-unit id="177" translate="yes" xml:space="preserve">
          <source>It contains a web form that enables the user to submit information about books.</source>
        </trans-unit><trans-unit id="178" translate="yes" xml:space="preserve">
          <source>It also displays all books in the database and enables you to delete entries from the database.</source>
        </trans-unit><trans-unit id="179" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`script.js`</ph> contains JavaScript code that runs in your user's browser.</source>
        </trans-unit><trans-unit id="180" translate="yes" xml:space="preserve">
          <source>It can send requests to the server to list books, add books to the database, and delete books from the database.</source>
        </trans-unit><trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Run the <ph id="ph1">`code`</ph> command to open your files through the Cloud Shell editor.</source>
        </trans-unit><trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Create the data model</source>
        </trans-unit><trans-unit id="183" translate="yes" xml:space="preserve">
          <source>From the editor, open <ph id="ph1">`app/model.js`</ph> and add the following.</source>
        </trans-unit><trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Whenever you paste or change code into a file in the editor, make sure to save afterwards using the "..." menu, or the accelerator key (<bpt id="p1">&lt;kbd&gt;</bpt>Ctrl+S<ept id="p1">&lt;/kbd&gt;</ept> on Windows and Linux, <bpt id="p2">&lt;kbd&gt;</bpt>Command+S<ept id="p2">&lt;/kbd&gt;</ept> on macOS).</source>
        </trans-unit><trans-unit id="185" translate="yes" xml:space="preserve">
          <source>This code uses Mongoose to simplify the process of transferring data in and out of MongoDB.</source>
        </trans-unit><trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Mongoose is a schema-based system for modeling data.</source>
        </trans-unit><trans-unit id="187" translate="yes" xml:space="preserve">
          <source>This code connects to a database named "Books" on the local MongoDB server.</source>
        </trans-unit><trans-unit id="188" translate="yes" xml:space="preserve">
          <source>It then defines a database document called "Book" with the provided schema.</source>
        </trans-unit><trans-unit id="189" translate="yes" xml:space="preserve">
          <source>The schema defines four fields that describe a single book:</source>
        </trans-unit><trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The book's name, or title</source>
        </trans-unit><trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Its International Standard Book Number, or ISBN, which uniquely identifies the book</source>
        </trans-unit><trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Its author</source>
        </trans-unit><trans-unit id="193" translate="yes" xml:space="preserve">
          <source>The number of pages it contains</source>
        </trans-unit><trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Next, you'll create HTTP handlers that map GET, POST, and DELETE requests to database operations.</source>
        </trans-unit><trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Create the Express routes that handle HTTP requests</source>
        </trans-unit><trans-unit id="196" translate="yes" xml:space="preserve">
          <source>From the editor, open <ph id="ph1">`app/routes.js`</ph> and add the following code.</source>
        </trans-unit><trans-unit id="197" translate="yes" xml:space="preserve">
          <source>This code creates four routes for the application.</source>
        </trans-unit><trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Here's a brief overview of each.</source>
        </trans-unit><trans-unit id="199" translate="yes" xml:space="preserve">
          <source>HTTP verb</source>
        </trans-unit><trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Endpoint</source>
        </trans-unit><trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit><trans-unit id="202" translate="yes" xml:space="preserve">
          <source>GET</source>
        </trans-unit><trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Retrieves all books from the database.</source>
        </trans-unit><trans-unit id="204" translate="yes" xml:space="preserve">
          <source>POST</source>
        </trans-unit><trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Creates a <ph id="ph1">`Book`</ph> object based on the fields the user provided on the web form and writes that object to the database.</source>
        </trans-unit><trans-unit id="206" translate="yes" xml:space="preserve">
          <source>DELETE</source>
        </trans-unit><trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Deletes the book as identified by its ISBN from the database.</source>
        </trans-unit><trans-unit id="208" translate="yes" xml:space="preserve">
          <source>GET</source>
        </trans-unit><trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Returns the index page when no other route is matched.</source>
        </trans-unit><trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Express can serve up HTTP responses directly in the route handling code or it can serve up static content from files.</source>
        </trans-unit><trans-unit id="211" translate="yes" xml:space="preserve">
          <source>This code shows both.</source>
        </trans-unit><trans-unit id="212" translate="yes" xml:space="preserve">
          <source>The first three routes return JSON data for book API requests.</source>
        </trans-unit><trans-unit id="213" translate="yes" xml:space="preserve">
          <source>The fourth route (the default case) returns the contents of the index file, <ph id="ph1">`index.html`</ph>.</source>
        </trans-unit><trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Create the client-side JavaScript application</source>
        </trans-unit><trans-unit id="215" translate="yes" xml:space="preserve">
          <source>From the editor, open <ph id="ph1">`public/script.js`</ph> and add this code:</source>
        </trans-unit><trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Notice how this code defines a module named "myApp" and a controller named "myCtrl".</source>
        </trans-unit><trans-unit id="217" translate="yes" xml:space="preserve">
          <source>We won't go into full details about how module and controllers work here, but you'll use these names in the next step to bind the user interface (HTML code) with the application's business logic.</source>
        </trans-unit><trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Earlier, you created four routes that handle various GET, POST, and DELETE operations on the server.</source>
        </trans-unit><trans-unit id="219" translate="yes" xml:space="preserve">
          <source>This code resembles those same operations, but from the client side (the user's web browser).</source>
        </trans-unit><trans-unit id="220" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`getData`</ph> function, for example, sends a GET request to the <ph id="ph2">`/book`</ph> endpoint.</source>
        </trans-unit><trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Recall that the server handles this request by retrieving information about all books from the database and returning that information as JSON data.</source>
        </trans-unit><trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Notice how the resulting JSON data is assigned to the <ph id="ph1">`$scope.books`</ph> variable.</source>
        </trans-unit><trans-unit id="223" translate="yes" xml:space="preserve">
          <source>You'll see how this affects what the user sees on the web page in the next step.</source>
        </trans-unit><trans-unit id="224" translate="yes" xml:space="preserve">
          <source>This code calls the <ph id="ph1">`getData`</ph> function when the page loads.</source>
        </trans-unit><trans-unit id="225" translate="yes" xml:space="preserve">
          <source>You can examine the <ph id="ph1">`del_book`</ph> and <ph id="ph2">`add_book`</ph> functions to get a sense for how they work.</source>
        </trans-unit><trans-unit id="226" translate="yes" xml:space="preserve">
          <source>You don't need client-side code to match the server's default handler because the default handler returns the index page and not JSON data.</source>
        </trans-unit><trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Create the user interface</source>
        </trans-unit><trans-unit id="228" translate="yes" xml:space="preserve">
          <source>From the editor, open <ph id="ph1">`public/index.html`</ph> and add this code:</source>
        </trans-unit><trans-unit id="229" translate="yes" xml:space="preserve">
          <source>This code creates a basic HTML form with four fields to submit book data and a table that displays all the books stored in the database.</source>
        </trans-unit><trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Although this is standard HTML code, the <ph id="ph1">`ng-`</ph> HTML attributes may be unfamiliar to you.</source>
        </trans-unit><trans-unit id="231" translate="yes" xml:space="preserve">
          <source>These HTML attributes wire up the AngularJS code to the user interface.</source>
        </trans-unit><trans-unit id="232" translate="yes" xml:space="preserve">
          <source>For example, when the user clicks the <bpt id="p1">**</bpt>Add<ept id="p1">**</ept> button, AngularJS calls the <ph id="ph1">`add_book`</ph> function, which sends the form data to the server.</source>
        </trans-unit><trans-unit id="233" translate="yes" xml:space="preserve">
          <source>You can examine the code here to get a sense of how each of the <ph id="ph1">`ng-`</ph> attributes relate to application's business logic.</source>
        </trans-unit><trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Create the Express server to host the application</source>
        </trans-unit><trans-unit id="235" translate="yes" xml:space="preserve">
          <source>From the editor, open <ph id="ph1">`server.js`</ph> and add this code:</source>
        </trans-unit><trans-unit id="236" translate="yes" xml:space="preserve">
          <source>This code creates the web application itself.</source>
        </trans-unit><trans-unit id="237" translate="yes" xml:space="preserve">
          <source>It serves static files from the <ph id="ph1">`public`</ph> directory and uses the routes you defined in previously to handle requests.</source>
        </trans-unit><trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Define package information and dependencies</source>
        </trans-unit><trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Recall that <ph id="ph1">`package.json`</ph> provides information about your application, including its name, description, and what Node.js packages your application needs to run.</source>
        </trans-unit><trans-unit id="240" translate="yes" xml:space="preserve">
          <source>From the editor, open <ph id="ph1">`package.json`</ph> and add this code:</source>
        </trans-unit><trans-unit id="241" translate="yes" xml:space="preserve">
          <source>You see information, or metadata, about your application including its name, description, and license.</source>
        </trans-unit><trans-unit id="242" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`repository`</ph> field specifies where the code is maintained.</source>
        </trans-unit><trans-unit id="243" translate="yes" xml:space="preserve">
          <source>For reference, you can later review the code on GitHub at the URL shown here.</source>
        </trans-unit><trans-unit id="244" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`main`</ph> field defines the application's entry point.</source>
        </trans-unit><trans-unit id="245" translate="yes" xml:space="preserve">
          <source>It's provided here for completeness but it's not important because you're not planning to publish your application as a Node.js package for others to download and use.</source>
        </trans-unit><trans-unit id="246" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`dependencies`</ph> field is important.</source>
        </trans-unit><trans-unit id="247" translate="yes" xml:space="preserve">
          <source>It defines the Node.js packages your application needs.</source>
        </trans-unit><trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Shortly, you'll connect to your VM a second time and run the <ph id="ph1">`npm install`</ph> command to install these packages.</source>
        </trans-unit><trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Node packages typically use the <bpt id="p1">[</bpt>Semantic Versioning<ept id="p1">](https://semver.org?azure-portal=true)</ept> versioning scheme.</source>
        </trans-unit><trans-unit id="250" translate="yes" xml:space="preserve">
          <source>The version number contains three components: major version, minor version, and patch.</source>
        </trans-unit><trans-unit id="251" translate="yes" xml:space="preserve">
          <source>The tilde <ph id="ph1">`~`</ph> notation here tells npm to install the latest patch version under the provided major and minor versions.</source>
        </trans-unit><trans-unit id="252" translate="yes" xml:space="preserve">
          <source>The versions you see here are the latest this module was tested with.</source>
        </trans-unit><trans-unit id="253" translate="yes" xml:space="preserve">
          <source>In practice, you can increment the version over time as you update and test your application to use the latest features each dependent package provides.</source>
        </trans-unit><trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Copy the files to your VM</source>
        </trans-unit><trans-unit id="255" translate="yes" xml:space="preserve">
          <source>You're all done editing files.</source>
        </trans-unit><trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Ensure that you saved changes to each file and then close the editor.</source>
        </trans-unit><trans-unit id="257" translate="yes" xml:space="preserve">
          <source>To close the editor, click the ellipses in the corner and then select <bpt id="p1">**</bpt>Close Editor<ept id="p1">**</ept>.</source>
        </trans-unit><trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Run the following <ph id="ph1">`scp`</ph> command to copy the contents of the <ph id="ph2">`~/Books`</ph> directory in your Cloud Shell session to the same directory name on your VM.</source>
        </trans-unit><trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Install additional Node packages</source>
        </trans-unit><trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Let's say that during the development process, you identified additional Node packages that you want to use.</source>
        </trans-unit><trans-unit id="261" translate="yes" xml:space="preserve">
          <source>For example, recall that <ph id="ph1">`app/model.js`</ph> starts with this line.</source>
        </trans-unit><trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Recall that the application uses Mongoose to help transfer data in and out of your MongoDB database.</source>
        </trans-unit><trans-unit id="263" translate="yes" xml:space="preserve">
          <source>The application also requires Express and the body-parser packages.</source>
        </trans-unit><trans-unit id="264" translate="yes" xml:space="preserve">
          <source>body-parser is a plugin that enables Express to work with data from the web form sent by the client.</source>
        </trans-unit><trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Let's connect to your VM and install the packages you specified in <ph id="ph1">`package.json`</ph>.</source>
        </trans-unit><trans-unit id="266" translate="yes" xml:space="preserve">
          <source>Before you connect to your VM, make sure you have your VM's IP address handy.</source>
        </trans-unit><trans-unit id="267" translate="yes" xml:space="preserve">
          <source>If you don't have it, run these commands from Cloud Shell to retrieve it.</source>
        </trans-unit><trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Like you did earlier, create an SSH connection to your VM.</source>
        </trans-unit><trans-unit id="269" translate="yes" xml:space="preserve">
          <source>Move to the <ph id="ph1">`Books`</ph> directory under the home directory.</source>
        </trans-unit><trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Run <ph id="ph1">`npm install`</ph> to install the dependent packages.</source>
        </trans-unit><trans-unit id="271" translate="yes" xml:space="preserve">
          <source>Keep your SSH connection open for the next part.</source>
        </trans-unit><trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Test the application</source>
        </trans-unit><trans-unit id="273" translate="yes" xml:space="preserve">
          <source>You're now ready to test out your Node.js web application!</source>
        </trans-unit><trans-unit id="274" translate="yes" xml:space="preserve">
          <source>From the <ph id="ph1">`~/Books`</ph> directory, run this command to start the web application.</source>
        </trans-unit><trans-unit id="275" translate="yes" xml:space="preserve">
          <source>This command starts the application by listening on port 80 for incoming HTTP requests.</source>
        </trans-unit><trans-unit id="276" translate="yes" xml:space="preserve">
          <source>From a separate browser tab, navigate to your VM's public IP address.</source>
        </trans-unit><trans-unit id="277" translate="yes" xml:space="preserve">
          <source>You see the index page, which includes a web form.</source>
        </trans-unit><trans-unit id="278" translate="yes" xml:space="preserve">
          <source>A web page with a form and submission button.</source>
        </trans-unit><trans-unit id="279" translate="yes" xml:space="preserve">
          <source>Try adding a few books to the database.</source>
        </trans-unit><trans-unit id="280" translate="yes" xml:space="preserve">
          <source>Each time you add a book, the page updates the complete list of books.</source>
        </trans-unit><trans-unit id="281" translate="yes" xml:space="preserve">
          <source>You can also click the <bpt id="p1">**</bpt>Delete<ept id="p1">**</ept> button to delete a book from the database.</source>
        </trans-unit></group></body></file></xliff>