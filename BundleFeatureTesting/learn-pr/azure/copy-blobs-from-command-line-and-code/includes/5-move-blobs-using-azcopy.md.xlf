<?xml version="1.0"?><xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd"><file datatype="xml" original="5-move-blobs-using-azcopy.md" source-language="en-US" target-language="en-US"><header><tool tool-id="mdxliff" tool-name="mdxliff"  tool-company="Microsoft" /><xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5-move-blobs-using-azcopy.287672.fe5dedb57fc6be07c3d8b33194f801cabc7333e2.skl</xliffext:skl_file_name><xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version><xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fe5dedb57fc6be07c3d8b33194f801cabc7333e2</xliffext:ms.openlocfilehash><xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ba7e452ac39d7f09a5646044b44de0e1cdc54982</xliffext:ms.sourcegitcommit><xliffext:ms.openlocfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">learn-pr\azure\copy-blobs-from-command-line-and-code\includes\5-move-blobs-using-azcopy.md</xliffext:ms.openlocfilepath></header><body><group id="content" extype="content"><trans-unit id="101" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>AzCopy<ept id="p1">**</ept> command is a command-line utility specially created and optimized for moving data in and out of Azure storage.</source>
        </trans-unit><trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Using AzCopy, you can bulk-transfer from the local file system on an on-premises computer to the cloud.</source>
        </trans-unit><trans-unit id="103" translate="yes" xml:space="preserve">
          <source>In this unit, you'll learn how to use the AzCopy utility to upload, download, and transfer blob data between storage accounts.</source>
        </trans-unit><trans-unit id="104" translate="yes" xml:space="preserve">
          <source>What is AzCopy?</source>
        </trans-unit><trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The AzCopy utility is designed and optimized for performing large-scale bulk transfers of data to and from Azure storage.</source>
        </trans-unit><trans-unit id="106" translate="yes" xml:space="preserve">
          <source>You use AzCopy to transfer entire directory structures from your local computer into blob storage, and back again.</source>
        </trans-unit><trans-unit id="107" translate="yes" xml:space="preserve">
          <source>AzCopy performs its operations asynchronously, and can use multiple concurrent threads to read and write data.</source>
        </trans-unit><trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Additionally, it's fault-tolerant.</source>
        </trans-unit><trans-unit id="109" translate="yes" xml:space="preserve">
          <source>If a transfer is interrupted for some reason and fails, AzCopy can resume the operation from where it left off, once the situation is resolved.</source>
        </trans-unit><trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The latest version of AzCopy enables you to take incremental backups of blobs, and can keep the contents of blob storage accounts synchronized so that they contain the same version of data.</source>
        </trans-unit><trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Upload data</source>
        </trans-unit><trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">`AzCopy copy`</ph> command to upload data to Azure storage.</source>
        </trans-unit><trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The simplest form of this command copies a file to a blob.</source>
        </trans-unit><trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The example below uploads the contents of a file named <bpt id="p1">*</bpt>myfile.txt<ept id="p1">*</ept> to a blob, also named <bpt id="p2">*</bpt>myfile.txt<ept id="p2">*</ept>, to the <bpt id="p3">*</bpt>mycontainer<ept id="p3">*</ept> container in the <bpt id="p4">*</bpt>myaccount<ept id="p4">*</ept> blob storage account.</source>
        </trans-unit><trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The storage account and container must already exist.</source>
        </trans-unit><trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The AzCopy command requires you are authenticated and authorized to access the storage account.</source>
        </trans-unit><trans-unit id="117" translate="yes" xml:space="preserve">
          <source>If your organization uses ADFS, you can authenticate by using the <ph id="ph1">`azcopy login`</ph> command and signing in.</source>
        </trans-unit><trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Alternatively, the owner of a storage account can create a Shared Access Signature (SAS) token that provides access to the storage account.</source>
        </trans-unit><trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The SAS token is time-limited, and can be restricted to only allowing certain operations.</source>
        </trans-unit><trans-unit id="120" translate="yes" xml:space="preserve">
          <source>You provide the SAS token as a query string to the Azure storage URL when you upload or download data:</source>
        </trans-unit><trans-unit id="121" translate="yes" xml:space="preserve">
          <source>You can upload multiple files and complete folder structures with AzCopy.</source>
        </trans-unit><trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`--recursive=true`</ph> option will walk the folder structure starting at the specified point, and will create a corresponding structure of blobs in your container in Azure storage.</source>
        </trans-unit><trans-unit id="123" translate="yes" xml:space="preserve">
          <source>You can also specify that only files whose names match a particular pattern are uploaded, by using wildcard pattern matching.</source>
        </trans-unit><trans-unit id="124" translate="yes" xml:space="preserve">
          <source>This example uploads all files  under the <bpt id="p1">*</bpt>myfolder<ept id="p1">*</ept> folder and subfolders:</source>
        </trans-unit><trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Monitor and manage jobs</source>
        </trans-unit><trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Remember that AzCopy runs asynchronously.</source>
        </trans-unit><trans-unit id="127" translate="yes" xml:space="preserve">
          <source>If you are transferring a large number of files, or even a small number of large files, AzCopy will start your upload, and will report an initial summary.</source>
        </trans-unit><trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The command will then continue running in the background.</source>
        </trans-unit><trans-unit id="129" translate="yes" xml:space="preserve">
          <source>You can use the <ph id="ph1">`AzCopy jobs list`</ph> command to view the status of running and recently completed commands.</source>
        </trans-unit><trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Each job has an ID, and you can view the details of a job with the <ph id="ph1">`AzCopy jobs show &lt;id&gt;`</ph> command.</source>
        </trans-unit><trans-unit id="131" translate="yes" xml:space="preserve">
          <source>If an AzCopy transfer is interrupted, it will appear in the jobs list.</source>
        </trans-unit><trans-unit id="132" translate="yes" xml:space="preserve">
          <source>You can restart the job with the <ph id="ph1">`azcopy jobs resume &lt;id&gt;`</ph> command.</source>
        </trans-unit><trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Download data</source>
        </trans-unit><trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`AzCopy copy`</ph> command can also download data from blob storage.</source>
        </trans-unit><trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The next example transfers the  data in the blob <bpt id="p1">*</bpt>myblob<ept id="p1">*</ept> to a local folder named <bpt id="p2">*</bpt>myblobdata<ept id="p2">*</ept>:</source>
        </trans-unit><trans-unit id="136" translate="yes" xml:space="preserve">
          <source>As with uploads, you can use wildcards to download multiple blobs with matching names, and iterate through the blob container hierarchy with the <ph id="ph1">`--recursive=true`</ph> flag.</source>
        </trans-unit><trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Copy data between storage accounts, and synchronize storage</source>
        </trans-unit><trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The final use of the <ph id="ph1">`AzCopy copy`</ph> command is to transfer blobs between storage accounts.</source>
        </trans-unit><trans-unit id="139" translate="yes" xml:space="preserve">
          <source>This example copies the blobs from <bpt id="p1">*</bpt>sourcecontainer<ept id="p1">*</ept> in the <bpt id="p2">*</bpt>sourceaccount<ept id="p2">*</ept> storage account to <bpt id="p3">*</bpt>destcontainer<ept id="p3">*</ept> in <bpt id="p4">*</bpt>destaccount<ept id="p4">*</ept>.</source>
        </trans-unit><trans-unit id="140" translate="yes" xml:space="preserve">
          <source>This example requires two SAS tokens; one for the source account and another for the destination account.</source>
        </trans-unit><trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`--recursive=true`</ph> flag is available if your container has a hierarchical set of blobs.</source>
        </trans-unit><trans-unit id="142" translate="yes" xml:space="preserve">
          <source>When the source and destination of the AzCopy command are both Azure storage accounts, the command performs the transfer using the Azure storage service.</source>
        </trans-unit><trans-unit id="143" translate="yes" xml:space="preserve">
          <source>It doesn't download and upload blobs via your computer.</source>
        </trans-unit><trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Another way to copy blobs between storage accounts is to use the <ph id="ph1">`AzCopy sync`</ph> command.</source>
        </trans-unit><trans-unit id="145" translate="yes" xml:space="preserve">
          <source>This command synchronizes the contents of a destination container with a source container, copying blobs if they aren't found in the destination, or if the last modified time of a blob in the destination is earlier than that of the corresponding blob in the source.</source>
        </trans-unit><trans-unit id="146" translate="yes" xml:space="preserve">
          <source>This command also provides the <ph id="ph1">`--delete-destination`</ph> flag.</source>
        </trans-unit><trans-unit id="147" translate="yes" xml:space="preserve">
          <source>If you set this flag to true, AzCopy will delete blobs in the destination that don't exist in the source; use this option with caution.</source>
        </trans-unit><trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Manage blobs</source>
        </trans-unit><trans-unit id="149" translate="yes" xml:space="preserve">
          <source>You can view the blobs available in a container with the <ph id="ph1">`AzCopy list`</ph> command.</source>
        </trans-unit><trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The following example displays the blobs in the <bpt id="p1">*</bpt>sourcecontainer<ept id="p1">*</ept> container:</source>
        </trans-unit><trans-unit id="151" translate="yes" xml:space="preserve">
          <source>You can create a new container in a blob storage account using the <ph id="ph1">`AzCopy make`</ph> command, like this:</source>
        </trans-unit><trans-unit id="152" translate="yes" xml:space="preserve">
          <source>To remove a blob, run the <ph id="ph1">`AzCopy remove`</ph> command.</source>
        </trans-unit><trans-unit id="153" translate="yes" xml:space="preserve">
          <source>You can remove all blobs with names that match a specific pattern with the <ph id="ph1">`--include`</ph> flag, and you can walk through a hierarchical container with the <ph id="ph2">`--recursive`</ph> flag.</source>
        </trans-unit><trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The next example removes all blobs with the <bpt id="p1">*</bpt>txt<ept id="p1">*</ept> suffix from <bpt id="p2">*</bpt>mycontainer<ept id="p2">*</ept>.</source>
        </trans-unit><trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Configure concurrency</source>
        </trans-unit><trans-unit id="156" translate="yes" xml:space="preserve">
          <source>You can control the performance and resource utilization of the AzCopy command by setting the <bpt id="p1">*</bpt>AZCOPY_CONCURRENCY_VALUE<ept id="p1">*</ept> environment variable.</source>
        </trans-unit><trans-unit id="157" translate="yes" xml:space="preserve">
          <source>AzCopy uses the value of this variable to specify the number of concurrent threads it will utilize for transferring data.</source>
        </trans-unit><trans-unit id="158" translate="yes" xml:space="preserve">
          <source>By default, it's set to 300.</source>
        </trans-unit><trans-unit id="159" translate="yes" xml:space="preserve">
          <source>You can reduce this value if you need to control the bandwidth and CPU utilization of your copy operations.</source>
        </trans-unit></group></body></file></xliff>