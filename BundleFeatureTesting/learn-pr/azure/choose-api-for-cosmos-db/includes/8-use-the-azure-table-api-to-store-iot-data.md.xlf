<?xml version="1.0"?><xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd"><file datatype="xml" original="8-use-the-azure-table-api-to-store-iot-data.md" source-language="en-US" target-language="en-US"><header><tool tool-id="mdxliff" tool-name="mdxliff"  tool-company="Microsoft" /><xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8-use-the-azure-table-api-to-store-iot-data.77a6a7.718b68c2279722c40b30bb8186d96fa0e057c51b.skl</xliffext:skl_file_name><xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version><xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">718b68c2279722c40b30bb8186d96fa0e057c51b</xliffext:ms.openlocfilehash><xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ba7e452ac39d7f09a5646044b44de0e1cdc54982</xliffext:ms.sourcegitcommit><xliffext:ms.openlocfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">learn-pr\azure\choose-api-for-cosmos-db\includes\8-use-the-azure-table-api-to-store-iot-data.md</xliffext:ms.openlocfilepath></header><body><group id="content" extype="content"><trans-unit id="101" translate="yes" xml:space="preserve">
          <source>The project architect has asked you to determine the advantages of moving data from an existing Azure Table Storage data set.</source>
        </trans-unit><trans-unit id="102" translate="yes" xml:space="preserve">
          <source>The project architect found an existing 10 TB database that one of the project teams uses to store data from a legacy Internet of Things (IoT) application, and the data is seldom updated.</source>
        </trans-unit><trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Moving your database from Azure Table Storage into Cosmos DB with a low throughput could have considerable cost savings, since Table Storage is charged on the size of data rather than how often it is accessed.</source>
        </trans-unit><trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Problem analysis</source>
        </trans-unit><trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The IoT data consists of key-value pairs with no relationship information, and the existing dataset is currently deployed in Azure Table Storage.</source>
        </trans-unit><trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Recommended API: Azure Table</source>
        </trans-unit><trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The best practice is to use Core (SQL) for new projects, as it has more features that the Azure Table API.</source>
        </trans-unit><trans-unit id="108" translate="yes" xml:space="preserve">
          <source>However, to reduce downtime during your migration to Cosmos DB, you might want to consider using the Table API for now, and switch to Core (SQL) sometime in the near future.</source>
        </trans-unit><trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Why not any of the other APIs?</source>
        </trans-unit><trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Using the decision matrix from earlier in this learning module, you can see why the other APIs are not a good solution for this scenario:</source>
        </trans-unit><trans-unit id="111" translate="yes" xml:space="preserve">
          <source>API</source>
        </trans-unit><trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit><trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Cassandra<ept id="p1">**</ept></source>
        </trans-unit><trans-unit id="114" translate="yes" xml:space="preserve">
          <source>This API isn't a good choice because of the existing Azure Table Storage database, and because of the requirements to import and reuse application code.</source>
        </trans-unit><trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Core (SQL)<ept id="p1">**</ept></source>
        </trans-unit><trans-unit id="116" translate="yes" xml:space="preserve">
          <source>This API would be the best choice if you were designing a new system; however, since this scenario consists of a legacy application with a large existing Azure Table Storage dataset, the Azure Table API is the correct choice.</source>
        </trans-unit><trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Gremlin<ept id="p1">**</ept></source>
        </trans-unit><trans-unit id="118" translate="yes" xml:space="preserve">
          <source>This API isn't a good choice because this scenario doesn't need to process graph-based data, and because of the requirements to import and reuse application code.</source>
        </trans-unit><trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MongoDB<ept id="p1">**</ept></source>
        </trans-unit><trans-unit id="120" translate="yes" xml:space="preserve">
          <source>This API isn't a good choice because of the existing Azure Table Storage database, and because of the requirements to import and reuse application code.</source>
        </trans-unit></group></body></file></xliff>