<?xml version="1.0"?><xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd"><file datatype="xml" original="5-use-the-gremlin-graph-api-as-a-recommendation-engine.md" source-language="en-US" target-language="en-US"><header><tool tool-id="mdxliff" tool-name="mdxliff"  tool-company="Microsoft" /><xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5-use-the-gremlin-graph-api-as-a-recommendation-engine.0a0716.10c6fcf83a3736f8fe6096f7eab9da76666890c3.skl</xliffext:skl_file_name><xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version><xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">10c6fcf83a3736f8fe6096f7eab9da76666890c3</xliffext:ms.openlocfilehash><xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ba7e452ac39d7f09a5646044b44de0e1cdc54982</xliffext:ms.sourcegitcommit><xliffext:ms.openlocfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">learn-pr\azure\choose-api-for-cosmos-db\includes\5-use-the-gremlin-graph-api-as-a-recommendation-engine.md</xliffext:ms.openlocfilepath></header><body><group id="content" extype="content"><trans-unit id="101" translate="yes" xml:space="preserve">
          <source>The marketing team wants to be able to offer additional product recommendations while customers are browsing products on your e-commerce site.</source>
        </trans-unit><trans-unit id="102" translate="yes" xml:space="preserve">
          <source>For example, the team would like to provide suggestions like, "people who bought this product also bought that product", and "people who viewed this product also are viewing that product."</source>
        </trans-unit><trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The products that are recommended first should be your most popular products, therefore a method needs to be provided that will enable ranking the relationships between products.</source>
        </trans-unit><trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Problem analysis</source>
        </trans-unit><trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The data store needs to be able to assign weight values to the relationships between products.</source>
        </trans-unit><trans-unit id="106" translate="yes" xml:space="preserve">
          <source>For example, you might store a count of the number of times that a relationship occurs.</source>
        </trans-unit><trans-unit id="107" translate="yes" xml:space="preserve">
          <source>With that in mind, each time that a person buys "Product A" and "Product B", the relationship link between these two products needs to be incremented.</source>
        </trans-unit><trans-unit id="108" translate="yes" xml:space="preserve">
          <source>This relationship counter is meta-data that needs to be stored in a database.</source>
        </trans-unit><trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Recommended API: Gremlin</source>
        </trans-unit><trans-unit id="110" translate="yes" xml:space="preserve">
          <source>text</source>
        </trans-unit><trans-unit id="111" translate="yes" xml:space="preserve">
          <source>A graph database is the perfect fit to model this kind of data.</source>
        </trans-unit><trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Gremlin, the graph query language, will support the marketing department's requirements.</source>
        </trans-unit><trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Why not any of the other APIs?</source>
        </trans-unit><trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Using the decision matrix from earlier in this learning module, you can see why the other APIs are not a good solution for this scenario:</source>
        </trans-unit><trans-unit id="115" translate="yes" xml:space="preserve">
          <source>API</source>
        </trans-unit><trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit><trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Core (SQL)<ept id="p1">**</ept></source>
        </trans-unit><trans-unit id="118" translate="yes" xml:space="preserve">
          <source>It would be possible to model the relationship data in a NoSQL database; however, the lack of native queries that can answer the question, "How is this item related to that item?"</source>
        </trans-unit><trans-unit id="119" translate="yes" xml:space="preserve">
          <source>means that this API isn't the best choice.</source>
        </trans-unit><trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MongoDB<ept id="p1">**</ept></source>
        </trans-unit><trans-unit id="121" translate="yes" xml:space="preserve">
          <source>This API would not be a good choice; Graph API is the best choice due to the nature of this scenario.</source>
        </trans-unit><trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Cassandra<ept id="p1">**</ept></source>
        </trans-unit><trans-unit id="123" translate="yes" xml:space="preserve">
          <source>This API would not be a good choice; Graph API is the best choice due to the nature of this scenario.</source>
        </trans-unit><trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Azure Table<ept id="p1">**</ept></source>
        </trans-unit><trans-unit id="125" translate="yes" xml:space="preserve">
          <source>This API would not be a good choice; Graph API is the best choice due to the nature of this scenario.</source>
        </trans-unit></group></body></file></xliff>