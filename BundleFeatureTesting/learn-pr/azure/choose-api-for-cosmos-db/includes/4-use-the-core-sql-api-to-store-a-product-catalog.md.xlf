<?xml version="1.0"?><xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd"><file datatype="xml" original="4-use-the-core-sql-api-to-store-a-product-catalog.md" source-language="en-US" target-language="en-US"><header><tool tool-id="mdxliff" tool-name="mdxliff"  tool-company="Microsoft" /><xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4-use-the-core-sql-api-to-store-a-product-catalog.48cce9.cdc175d0b2e92641bff9d3d87f8506c5c88aa964.skl</xliffext:skl_file_name><xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version><xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cdc175d0b2e92641bff9d3d87f8506c5c88aa964</xliffext:ms.openlocfilehash><xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ba7e452ac39d7f09a5646044b44de0e1cdc54982</xliffext:ms.sourcegitcommit><xliffext:ms.openlocfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">learn-pr\azure\choose-api-for-cosmos-db\includes\4-use-the-core-sql-api-to-store-a-product-catalog.md</xliffext:ms.openlocfilepath></header><body><group id="content" extype="content"><trans-unit id="101" translate="yes" xml:space="preserve">
          <source>You've decided to look at how the new project is going store the catalog for your customer facing e-commerce site.</source>
        </trans-unit><trans-unit id="102" translate="yes" xml:space="preserve">
          <source>The sales team is likely to need support for adding new product categories quickly.</source>
        </trans-unit><trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The team had issues in the past as the old system that was using a relational database was too structured.</source>
        </trans-unit><trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Any necessary changes to add properties to products required downtime to update the table schemas, queries, and databases.</source>
        </trans-unit><trans-unit id="105" translate="yes" xml:space="preserve">
          <source>A flat, denormalized table was being used, which also lead to many columns being empty.</source>
        </trans-unit><trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The database needs to store products in a way that will enable filtering data based on the category where the products are located.</source>
        </trans-unit><trans-unit id="107" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit><trans-unit id="108" translate="yes" xml:space="preserve">
          <source>A clothing product needs to be searchable by sex, size, color, and style.</source>
        </trans-unit><trans-unit id="109" translate="yes" xml:space="preserve">
          <source>A TV needs to be searchable on LCD or OLED, screen resolution, screen ratio, and HDR support.</source>
        </trans-unit><trans-unit id="110" translate="yes" xml:space="preserve">
          <source>A DVD needs to have a region, the languages supported, and any extras.</source>
        </trans-unit><trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Problem analysis</source>
        </trans-unit><trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The sales team's primary requirement is to support semi-structured data.</source>
        </trans-unit><trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The schema needs to be flexible in order to store an ever-increasing number of product categories.</source>
        </trans-unit><trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The system needs to support searching and sorting across many different properties.</source>
        </trans-unit><trans-unit id="115" translate="yes" xml:space="preserve">
          <source>There is a structured relational database that can be used to import data.</source>
        </trans-unit><trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Recommended API: Core (SQL)</source>
        </trans-unit><trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The existing app uses a traditional relational database, which means that none of the other APIs are currently being used.</source>
        </trans-unit><trans-unit id="118" translate="yes" xml:space="preserve">
          <source>However, Core (SQL) won't allow for any code reuse, but your team should quickly get up-to-speed with the SQL-like query language that is supported by Core (SQL).</source>
        </trans-unit><trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Supporting new product categories is an important requirement for your project, and the Core (SQL) schema is flexible and requires a schemaless data store.</source>
        </trans-unit><trans-unit id="120" translate="yes" xml:space="preserve">
          <source>As a result of this architecture, bringing a new product category online is as simple as adding a document for the new product.</source>
        </trans-unit><trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Changes to the schema or taking the database offline are not required.</source>
        </trans-unit><trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Why not any of the other APIs?</source>
        </trans-unit><trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Using the decision matrix from the previous unit, you can see why the other APIs are not a good solution for this scenario:</source>
        </trans-unit><trans-unit id="124" translate="yes" xml:space="preserve">
          <source>API</source>
        </trans-unit><trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit><trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Azure Table<ept id="p1">**</ept></source>
        </trans-unit><trans-unit id="127" translate="yes" xml:space="preserve">
          <source>This API should only be used to allow existing apps that are based on the Table API access to Cosmos DB.</source>
        </trans-unit><trans-unit id="128" translate="yes" xml:space="preserve">
          <source>However, new projects should always choose Core (SQL).</source>
        </trans-unit><trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Cassandra<ept id="p1">**</ept></source>
        </trans-unit><trans-unit id="130" translate="yes" xml:space="preserve">
          <source>This API isn't a good choice in this particular scenario, because the schema is unknown and will change over time.</source>
        </trans-unit><trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Gremlin<ept id="p1">**</ept></source>
        </trans-unit><trans-unit id="132" translate="yes" xml:space="preserve">
          <source>This API isn't a good choice since the scenario  doesn't need to process graph-based data.</source>
        </trans-unit><trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MongoDB<ept id="p1">**</ept></source>
        </trans-unit><trans-unit id="134" translate="yes" xml:space="preserve">
          <source>MongoDB's lack of support for SQL-like queries give Core (SQL) an advantage for your existing relational database users.</source>
        </trans-unit></group></body></file></xliff>