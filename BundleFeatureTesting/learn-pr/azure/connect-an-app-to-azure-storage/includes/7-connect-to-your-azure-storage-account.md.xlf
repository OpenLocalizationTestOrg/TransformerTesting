<?xml version="1.0"?><xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd"><file datatype="xml" original="7-connect-to-your-azure-storage-account.md" source-language="en-US" target-language="en-US"><header><tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1931010" tool-company="Microsoft" /><xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7-connect-to-your-azure-storage-account.4d392a809ec3c22712d92086fe9a80aff2550500.skl</xliffext:skl_file_name><xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version><xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">aa8e5ccf3cb05d5b2ad442e9b5bd8098f21b1b7d</xliffext:ms.openlocfilehash><xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/24/2019</xliffext:ms.lasthandoff><xliffext:ms.openlocfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">learn-pr\azure\connect-an-app-to-azure-storage\includes\7-connect-to-your-azure-storage-account.md</xliffext:ms.openlocfilepath></header><body><group id="content" extype="content"><trans-unit id="101" translate="yes" xml:space="preserve">
          <source>You have added the required client libraries to your application and are ready to connect to your Azure storage account.</source>
        </trans-unit><trans-unit id="102" translate="yes" xml:space="preserve">
          <source>To work with data in a storage account, your app will need two pieces of data:</source>
        </trans-unit><trans-unit id="103" translate="yes" xml:space="preserve">
          <source>An access key</source>
        </trans-unit><trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The REST API endpoint</source>
        </trans-unit><trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Security access keys</source>
        </trans-unit><trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Each storage account has two unique <bpt id="p1">_</bpt>access keys<ept id="p1">_</ept> that are used to secure the storage account.</source>
        </trans-unit><trans-unit id="107" translate="yes" xml:space="preserve">
          <source>If your app needs to connect to multiple storage accounts, then your app will require an access key for each storage account.</source>
        </trans-unit><trans-unit id="108" translate="yes" xml:space="preserve">
          <source>An illustration showing an application connected to two different storage accounts in the cloud.</source>
        </trans-unit><trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Each storage account is accessible with a unique key.</source>
        </trans-unit><trans-unit id="110" translate="yes" xml:space="preserve">
          <source>REST API endpoint</source>
        </trans-unit><trans-unit id="111" translate="yes" xml:space="preserve">
          <source>In addition to access keys for authentication to storage accounts, your app will need to know the storage service endpoints to issue the REST requests.</source>
        </trans-unit><trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The REST endpoint is a combination of your storage account <bpt id="p1">_</bpt>name<ept id="p1">_</ept>, the data type, and a known domain.</source>
        </trans-unit><trans-unit id="113" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit><trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Data type</source>
        </trans-unit><trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Example endpoint</source>
        </trans-unit><trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Blobs</source>
        </trans-unit><trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Queues</source>
        </trans-unit><trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Table</source>
        </trans-unit><trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Files</source>
        </trans-unit><trans-unit id="120" translate="yes" xml:space="preserve">
          <source>If you have a custom domain tied to Azure, then you can also create a custom domain URL for the endpoint.</source>
        </trans-unit><trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Connection strings</source>
        </trans-unit><trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The simplest way to handle access keys and endpoint URLs within applications is to use <bpt id="p1">**</bpt>storage account connection strings<ept id="p1">**</ept>.</source>
        </trans-unit><trans-unit id="123" translate="yes" xml:space="preserve">
          <source>A connection string provides all needed connectivity information in a single text string.</source>
        </trans-unit><trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Azure Storage connection strings look similar to the example below but with the access key and account name of your specific storage account:</source>
        </trans-unit><trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Security</source>
        </trans-unit><trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Access keys are critical to providing access to your storage account and as a result, should not be given to any system or person that you do not wish to have access to your storage account.</source>
        </trans-unit><trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Access keys are the equivalent of a username and password to access your computer.</source>
        </trans-unit><trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Typically, storage account connectivity information is stored within an environment variable, database, or configuration file.</source>
        </trans-unit><trans-unit id="129" translate="yes" xml:space="preserve">
          <source>It is important to note that storing this information in a configuration file can be dangerous if you include that file in source control and store it in a public repository.</source>
        </trans-unit><trans-unit id="130" translate="yes" xml:space="preserve">
          <source>This is a common mistake and means that anyone can browse your source code in the public repository and see your storage account connection information.</source>
        </trans-unit><trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Each storage account has two access keys.</source>
        </trans-unit><trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The reason for this is to allow keys to be rotated (regenerated) periodically as part of security best practice in keeping your storage account secure.</source>
        </trans-unit><trans-unit id="133" translate="yes" xml:space="preserve">
          <source>This process can be done from the Azure portal or the Azure CLI / PowerShell command line tool.</source>
        </trans-unit><trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Rotating a key will invalidate the original key value immediately and will revoke access to anyone who obtained the key inappropriately.</source>
        </trans-unit><trans-unit id="135" translate="yes" xml:space="preserve">
          <source>With support for two keys, you can rotate keys without causing downtime in your applications that use them.</source>
        </trans-unit><trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Your app can switch to using the alternate access key while the other key is regenerated.</source>
        </trans-unit><trans-unit id="137" translate="yes" xml:space="preserve">
          <source>If you have multiple apps using this storage account, they should all use the same key to support this technique.</source>
        </trans-unit><trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Here's the basic idea:</source>
        </trans-unit><trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Update the connection strings in your application code to reference the secondary access key of the storage account.</source>
        </trans-unit><trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Regenerate the primary access key for your storage account using the Azure portal or command line tool.</source>
        </trans-unit><trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Update the connection strings in your code to reference the new primary access key.</source>
        </trans-unit><trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Regenerate the secondary access key in the same manner.</source>
        </trans-unit><trans-unit id="143" translate="yes" xml:space="preserve">
          <source>It's highly recommended that you periodically rotate your access keys to ensure they remain private, just like changing your passwords.</source>
        </trans-unit><trans-unit id="144" translate="yes" xml:space="preserve">
          <source>If you are using the key in a server application, you can use an <bpt id="p1">**</bpt>Azure Key Vault<ept id="p1">**</ept> to store the access key for you.</source>
        </trans-unit><trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Key Vaults include support to synchronize directly to the Storage Account and automatically rotate the keys periodically.</source>
        </trans-unit><trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Using a Key Vault provides an additional layer of security, so your app never has to work directly with an access key.</source>
        </trans-unit><trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Shared access signatures (SAS)</source>
        </trans-unit><trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Access keys are the easiest approach to authenticating access to a storage account.</source>
        </trans-unit><trans-unit id="149" translate="yes" xml:space="preserve">
          <source>However they provide full access to anything in the storage account, similar to a root password on a computer.</source>
        </trans-unit><trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Storage accounts offer a separate authentication mechanism called <bpt id="p1">_</bpt>shared access signatures<ept id="p1">_</ept> that support expiration and limited permissions for scenarios where you need to grant limited access.</source>
        </trans-unit><trans-unit id="151" translate="yes" xml:space="preserve">
          <source>You should use this approach when you are allowing other users to read and write data to your storage account.</source>
        </trans-unit><trans-unit id="152" translate="yes" xml:space="preserve">
          <source>There are links to our documentation on this advanced topic at the end of the module.</source>
        </trans-unit></group></body></file></xliff>