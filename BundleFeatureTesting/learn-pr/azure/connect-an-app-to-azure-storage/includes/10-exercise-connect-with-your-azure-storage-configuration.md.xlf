<?xml version="1.0"?><xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd"><file datatype="xml" original="10-exercise-connect-with-your-azure-storage-configuration.md" source-language="en-US" target-language="en-US"><header><tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1931010" tool-company="Microsoft" /><xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">10-exercise-connect-with-your-azure-storage-configuration.603740aabb6dd8771900d0ee64714d2daea2efbe.skl</xliffext:skl_file_name><xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version><xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bd3afc1c23ae43e1312239f5218d51a134e67f82</xliffext:ms.openlocfilehash><xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">05/13/2019</xliffext:ms.lasthandoff><xliffext:ms.openlocfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">learn-pr\azure\connect-an-app-to-azure-storage\includes\10-exercise-connect-with-your-azure-storage-configuration.md</xliffext:ms.openlocfilepath></header><body><group id="content" extype="content"><trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Let's add code to retrieve the connection string from the configuration file and use it to connect to the Azure storage account.</source>
        </trans-unit><trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Retrieve the connection string</source>
        </trans-unit><trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Open <bpt id="p1">**</bpt>Program.cs<ept id="p1">**</ept> in the code editor.</source>
        </trans-unit><trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Add a <ph id="ph1">`using`</ph> statement at the top of the file to reference the <ph id="ph2">`Microsoft.WindowsAzure.Storage`</ph> namespace:</source>
        </trans-unit><trans-unit id="105" translate="yes" xml:space="preserve">
          <source>At the end of the <ph id="ph1">`Main`</ph> method, add the following line to retrieve the Azure storage account connection string from the configuration file.</source>
        </trans-unit><trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The passed <bpt id="p1">_</bpt>key<ept id="p1">_</ept> must match the name used in your <bpt id="p2">**</bpt>appsettings.json<ept id="p2">**</ept> file.</source>
        </trans-unit><trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Create a blob client</source>
        </trans-unit><trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Use the static <ph id="ph1">`CloudStorageAccount.TryParse`</ph> method to create a <ph id="ph2">`CloudStorageAccount`</ph> object - it takes the connection string and an <ph id="ph3">`out`</ph> parameter to return the created object.</source>
        </trans-unit><trans-unit id="109" translate="yes" xml:space="preserve">
          <source>It returns a <ph id="ph1">`bool`</ph> value indicating whether it successfully parsed the string.</source>
        </trans-unit><trans-unit id="110" translate="yes" xml:space="preserve">
          <source>If it fails, output a message to the console and return from the method.</source>
        </trans-unit><trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Use the returned <ph id="ph1">`CloudStorageAccount`</ph> object to create a blob client.</source>
        </trans-unit><trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Next, use the blob client to retrieve a reference to a container named "photoblobs."</source>
        </trans-unit><trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Much like the account names, the Blob container names must be lowercase and composed of letters and numbers.</source>
        </trans-unit><trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">`CreateIfNotExistsAsync`</ph> method to create the container.</source>
        </trans-unit><trans-unit id="115" translate="yes" xml:space="preserve">
          <source>This returns a <ph id="ph1">`bool`</ph> indicating whether the container was created.</source>
        </trans-unit><trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Store this in a variable named <ph id="ph1">`created`</ph>.</source>
        </trans-unit><trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Notice that this is an <bpt id="p1">**</bpt>async<ept id="p1">**</ept> method - that means it will perform an actual network call.</source>
        </trans-unit><trans-unit id="118" translate="yes" xml:space="preserve">
          <source>You will need to use the <ph id="ph1">`await`</ph> keywords to get the <ph id="ph2">`bool`</ph> result.</source>
        </trans-unit><trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Because we are using the <ph id="ph1">`await`</ph> keyword, go ahead and change the signature for the <ph id="ph2">`Main`</ph> method to be <ph id="ph3">`async`</ph> and return a <ph id="ph4">`Task`</ph>.</source>
        </trans-unit><trans-unit id="120" translate="yes" xml:space="preserve">
          <source>You'll also need to add a new <ph id="ph1">`using`</ph> statement at the top:</source>
        </trans-unit><trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Finally, output whether we created the Blob container.</source>
        </trans-unit><trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Save the file.</source>
        </trans-unit><trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The final file should look like this if you'd like to check your work.</source>
        </trans-unit><trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Use C# 7.1 to build our app</source>
        </trans-unit><trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Support for <ph id="ph1">`async`</ph> and <ph id="ph2">`await`</ph> on <ph id="ph3">`Main`</ph> methods was added to C# 7.1.</source>
        </trans-unit><trans-unit id="126" translate="yes" xml:space="preserve">
          <source>This might not be the default version of the compiler you are using.</source>
        </trans-unit><trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Let's make sure we use that version of the compiler by setting it in our configuration file.</source>
        </trans-unit><trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Open the <ph id="ph1">`PhotoSharingApp.csproj`</ph> and add <ph id="ph2">`&lt;LangVersion&gt;7.1&lt;/LangVersion&gt;`</ph> to the <ph id="ph3">`PropertyGroup`</ph> that specifies the <ph id="ph4">`TargetFramework`</ph>.</source>
        </trans-unit><trans-unit id="129" translate="yes" xml:space="preserve">
          <source>It should look like this when you're finished:</source>
        </trans-unit><trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Save the file.</source>
        </trans-unit><trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Run the app</source>
        </trans-unit><trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Build and run the application.</source>
        </trans-unit><trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note:<ept id="p1">**</ept> make sure you're in the correct working directory.</source>
        </trans-unit><trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Let's add code to connect to the Azure storage account using our stored connection string.</source>
        </trans-unit><trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The Azure client library will automatically use the <bpt id="p1">**</bpt>AZURE_STORAGE_CONNECTION_STRING<ept id="p1">**</ept> environment variable to get the connection string.</source>
        </trans-unit><trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Create a blob client</source>
        </trans-unit><trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Open <bpt id="p1">**</bpt>index.js<ept id="p1">**</ept> in the code editor.</source>
        </trans-unit><trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Start by including the <bpt id="p1">**</bpt>azure-storage<ept id="p1">**</ept> module.</source>
        </trans-unit><trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Store the module in a variable named <bpt id="p1">**</bpt>storage<ept id="p1">**</ept>.</source>
        </trans-unit><trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Next, right after that, use the <bpt id="p1">**</bpt>storage<ept id="p1">**</ept> object to create the <ph id="ph1">`BlobService`</ph> object and store it in a global named <bpt id="p2">**</bpt>blobService<ept id="p2">**</ept>.</source>
        </trans-unit><trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Remember, these are lightweight objects representing access to the storage account.</source>
        </trans-unit><trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Add a constant to represent the container we want to create.</source>
        </trans-unit><trans-unit id="143" translate="yes" xml:space="preserve">
          <source>We'll name the container "photoblobs".</source>
        </trans-unit><trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Create a container</source>
        </trans-unit><trans-unit id="145" translate="yes" xml:space="preserve">
          <source>We can use the <ph id="ph1">`BlobService`</ph> object to work with blob APIs in Azure storage.</source>
        </trans-unit><trans-unit id="146" translate="yes" xml:space="preserve">
          <source>As mentioned before, all the APIs that make network calls are asynchronous to keep the app responsive.</source>
        </trans-unit><trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`createContainerIfNotExists`</ph> method is one such method.</source>
        </trans-unit><trans-unit id="148" translate="yes" xml:space="preserve">
          <source>We'll use <bpt id="p1">_</bpt>promises<ept id="p1">_</ept> to handle the callback that contains the response.</source>
        </trans-unit><trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Add a <ph id="ph1">`util`</ph> constant at the top of the file (after the initial <ph id="ph2">`require`</ph> you added) to load the <ph id="ph3">`util`</ph> package.</source>
        </trans-unit><trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Next, after all the constants, use <ph id="ph1">`util.promisify`</ph> to take the callback version of <ph id="ph2">`createContainerIfNotExists`</ph> and turn it into a promise-returning method.</source>
        </trans-unit><trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Since the callback method is on an object, make sure to add a <ph id="ph1">`bind`</ph> call at the end to connect it to that context.</source>
        </trans-unit><trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Assign the return value to a constant at the top of the file named <ph id="ph1">`createContainerAsync`</ph>, as shown below.</source>
        </trans-unit><trans-unit id="153" translate="yes" xml:space="preserve">
          <source>You'll also need a <ph id="ph1">`require`</ph> for the <ph id="ph2">`util`</ph> module near the top of the file.</source>
        </trans-unit><trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Remove the "Hello, World!"</source>
        </trans-unit><trans-unit id="155" translate="yes" xml:space="preserve">
          <source>output from <ph id="ph1">`main()`</ph>.</source>
        </trans-unit><trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Call your new <ph id="ph1">`createContainerAsync`</ph> promise.</source>
        </trans-unit><trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Pass it the <bpt id="p1">**</bpt>containerName<ept id="p1">**</ept> constant.</source>
        </trans-unit><trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Apply the <ph id="ph1">`await`</ph> keyword to the call.</source>
        </trans-unit><trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Wrap the call in a <ph id="ph1">`try`</ph><ph id="ph2"> / </ph><ph id="ph3">`catch`</ph> construct and output any error.</source>
        </trans-unit><trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`createContainerAsync`</ph> promise returns the first value from the underlying <ph id="ph2">`createContainerIfNotExists`</ph>, which is the container result.</source>
        </trans-unit><trans-unit id="161" translate="yes" xml:space="preserve">
          <source>This includes information on whether the container was created or not.</source>
        </trans-unit><trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Capture the result in a variable, and output whether the container was created based on the <ph id="ph1">`result.created`</ph> property.</source>
        </trans-unit><trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Finally, decorate the <ph id="ph1">`main`</ph> function with the <ph id="ph2">`async`</ph> keyword.</source>
        </trans-unit><trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Save the file.</source>
        </trans-unit><trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The final file should look like this, if you'd like to check your work.</source>
        </trans-unit><trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Run the app</source>
        </trans-unit><trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Build and run the application.</source>
        </trans-unit><trans-unit id="168" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note:<ept id="p1">**</ept> make sure you're in the PhotoSharingApp directory.</source>
        </trans-unit><trans-unit id="169" translate="yes" xml:space="preserve">
          <source>If you get an error about the use of the <ph id="ph1">`await`</ph> keyword, make sure you have added the <ph id="ph2">`async`</ph> keyword to the <ph id="ph3">`main`</ph> function definition per the final step in the instructions above.</source>
        </trans-unit><trans-unit id="170" translate="yes" xml:space="preserve">
          <source>It should report that the blob container was created.</source>
        </trans-unit><trans-unit id="171" translate="yes" xml:space="preserve">
          <source>If you run it a second time, it should tell you it already exists.</source>
        </trans-unit><trans-unit id="172" translate="yes" xml:space="preserve">
          <source>To verify the container:</source>
        </trans-unit><trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Sign into the <bpt id="p1">[</bpt>Azure portal<ept id="p1">](https://portal.azure.com/learn.docs.microsoft.com?azure-portal=true)</ept> using the same account you activated the sandbox with.</source>
        </trans-unit><trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Navigate to your storage account.</source>
        </trans-unit><trans-unit id="175" translate="yes" xml:space="preserve">
          <source>You can use the <bpt id="p1">**</bpt>All Resources<ept id="p1">**</ept> section to find the storage account or search by name from the <bpt id="p2">_</bpt>search box<ept id="p2">_</ept> at the top of the portal window.</source>
        </trans-unit><trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Select the <bpt id="p1">**</bpt>Blobs<ept id="p1">**</ept> entry of the storage account in the <bpt id="p2">**</bpt>Blob services<ept id="p2">**</ept> section.</source>
        </trans-unit><trans-unit id="177" translate="yes" xml:space="preserve">
          <source>You should see your <bpt id="p1">**</bpt>photoblobs<ept id="p1">**</ept> container in the Blobs panel.</source>
        </trans-unit><trans-unit id="178" translate="yes" xml:space="preserve">
          <source>You can delete the container through the "..." menu on the right-hand side of the entry to try recreating it with your app.</source>
        </trans-unit><trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The container will disappear from the portal very quickly, but it takes a few minutes to delete.</source>
        </trans-unit><trans-unit id="180" translate="yes" xml:space="preserve">
          <source>If you attempt to recreate it before it's been completely de-provisioned, you will get an error.</source>
        </trans-unit><trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Delete the app</source>
        </trans-unit><trans-unit id="182" translate="yes" xml:space="preserve">
          <source>If you decide you don't want to keep the application source code in your Cloud Shell environment, you can use the following command to remove the folder and all the contents.</source>
        </trans-unit></group></body></file></xliff>