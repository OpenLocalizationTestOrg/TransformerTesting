<?xml version="1.0"?><xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd"><file datatype="xml" original="9-initialize-the-storage-account-model.md" source-language="en-US" target-language="en-US"><header><tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1931010" tool-company="Microsoft" /><xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9-initialize-the-storage-account-model.e7df2f3ecbd7c0bdfb9134974e870e43990f5464.skl</xliffext:skl_file_name><xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version><xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dee3197c0bbc7e3563280d09051a7ad4375122be</xliffext:ms.openlocfilehash><xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">05/13/2019</xliffext:ms.lasthandoff><xliffext:ms.openlocfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">learn-pr\azure\connect-an-app-to-azure-storage\includes\9-initialize-the-storage-account-model.md</xliffext:ms.openlocfilepath></header><body><group id="content" extype="content"><trans-unit id="101" translate="yes" xml:space="preserve">
          <source>The Azure Storage client library provides an object model that is used to interact with Azure storage accounts.</source>
        </trans-unit><trans-unit id="102" translate="yes" xml:space="preserve">
          <source>It's used to quickly connect to an Azure storage account and use the Azure Storage service APIs.</source>
        </trans-unit><trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Azure Storage client library object model</source>
        </trans-unit><trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The foundation of the storage account object model in the .NET Core client library is the class <ph id="ph1">`CloudStorageAccount`</ph>.</source>
        </trans-unit><trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The simplest way to initialize the object model is to use <ph id="ph1">`CloudStorageAccount.Parse`</ph> or <ph id="ph2">`CloudStorageAccount.TryParse`</ph> to parse the connection string.</source>
        </trans-unit><trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The client library will not attempt to connect until an operation is invoked that requires it.</source>
        </trans-unit><trans-unit id="107" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Parse()`</ph> and <ph id="ph2">`TryParse()`</ph> only guarantee that the connection string is well-formatted; they don't verify that the account exists or that the key is correct.</source>
        </trans-unit><trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The resulting <ph id="ph1">`CloudStorageAccount`</ph> instance returned from the <ph id="ph2">`Parse()`</ph> or <ph id="ph3">`TryParse()`</ph> method call exposes methods to create a client objects to access the Azure Blob, Files, Queue and Table storage services.</source>
        </trans-unit><trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The code snippet below shows an example of creating a client to use for blob storage:</source>
        </trans-unit><trans-unit id="110" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`CloudStorageAccount`</ph> and the client objects are lightweight and can be created on demand or created up front to be shared within your application.</source>
        </trans-unit><trans-unit id="111" translate="yes" xml:space="preserve">
          <source>A standard approach is to use <ph id="ph1">`CloudStorageAccount.TryParse()`</ph> near the entry point of your application to create an instance, and make it available within your application for creating client instances.</source>
        </trans-unit><trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Once you have a client object to a specific storage type, you can use methods to perform actual work.</source>
        </trans-unit><trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Methods which make network calls are intentionally asynchronous <ph id="ph1">&amp;mdash;</ph> in .NET we use the <ph id="ph2">`async`</ph> and <ph id="ph3">`await`</ph> keywords to work with these methods efficiently.</source>
        </trans-unit><trans-unit id="114" translate="yes" xml:space="preserve">
          <source>As an example, we can use the <ph id="ph1">`CloudBlobClient`</ph> to create a <bpt id="p1">_</bpt>blob container<ept id="p1">_</ept> and upload a file to blob storage.</source>
        </trans-unit><trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The foundation of the storage account object model in the <bpt id="p1">**</bpt>Microsoft Azure Storage Client Library for Node.js and JavaScript<ept id="p1">**</ept> is the <ph id="ph1">`azurestorage`</ph> object.</source>
        </trans-unit><trans-unit id="116" translate="yes" xml:space="preserve">
          <source>This is created by adding the <bpt id="p1">**</bpt>azure-storage<ept id="p1">**</ept> module to your app through a <ph id="ph1">`require`</ph> statement.</source>
        </trans-unit><trans-unit id="117" translate="yes" xml:space="preserve">
          <source>This object provides a series of <bpt id="p1">_</bpt>factory<ept id="p1">_</ept> methods that create specific objects to work with each facet of Azure storage.</source>
        </trans-unit><trans-unit id="118" translate="yes" xml:space="preserve">
          <source>You call <ph id="ph1">`createXXX`</ph> methods to create each object.</source>
        </trans-unit><trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Type</source>
        </trans-unit><trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Method</source>
        </trans-unit><trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Returns</source>
        </trans-unit><trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Blob<ept id="p1">**</ept></source>
        </trans-unit><trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Table<ept id="p1">**</ept></source>
        </trans-unit><trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Queue<ept id="p1">**</ept></source>
        </trans-unit><trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>File<ept id="p1">**</ept></source>
        </trans-unit><trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The client library will not attempt to connect until an operation is invoked that requires it.</source>
        </trans-unit><trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Each of these <ph id="ph1">`create`</ph> methods return a lightweight object representing access to the storage type<ph id="ph2">&amp;mdash;</ph>it does not validate the connection or the access key being used.</source>
        </trans-unit><trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Once you have a service object to a specific storage type, you can use methods to perform actual work.</source>
        </trans-unit><trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Methods that make network calls are intentionally asynchronous.</source>
        </trans-unit><trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The library currently supports <bpt id="p1">_</bpt>callbacks<ept id="p1">_</ept> to return asynchronous results.</source>
        </trans-unit><trans-unit id="131" translate="yes" xml:space="preserve">
          <source>For example, here is code that creates a blob container.</source>
        </trans-unit><trans-unit id="132" translate="yes" xml:space="preserve">
          <source>This approach works fine, but it tends to lead to a lot of code being added into the callbacks, which can get unmanageable.</source>
        </trans-unit><trans-unit id="133" translate="yes" xml:space="preserve">
          <source>A better approach in JavaScript is to use <bpt id="p1">_</bpt>promises<ept id="p1">_</ept> to work with these methods.</source>
        </trans-unit><trans-unit id="134" translate="yes" xml:space="preserve">
          <source>There are several great libraries which will convert callback-style methods into promises<ph id="ph1">&amp;mdash;</ph>you can pick the one you prefer.</source>
        </trans-unit><trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Here, we'll use the <ph id="ph1">`util.promisify`</ph> feature from Node and use the <ph id="ph2">`BlobService`</ph> to create the container and upload a file to blob storage.</source>
        </trans-unit><trans-unit id="136" translate="yes" xml:space="preserve">
          <source>In addition, we'll use the <ph id="ph1">`async`</ph> and <ph id="ph2">`await`</ph> keywords to work with the promises a bit more naturally.</source>
        </trans-unit><trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Let's try this in our app.</source>
        </trans-unit></group></body></file></xliff>