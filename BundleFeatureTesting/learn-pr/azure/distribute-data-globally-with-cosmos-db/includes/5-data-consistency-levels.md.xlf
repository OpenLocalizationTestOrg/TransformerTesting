<?xml version="1.0"?><xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd"><file datatype="xml" original="5-data-consistency-levels.md" source-language="en-US" target-language="en-US"><header><tool tool-id="mdxliff" tool-name="mdxliff"  tool-company="Microsoft" /><xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5-data-consistency-levels.22f56f.251d9b608d59c7bfe5324a7e2dcb474ce86a85b4.skl</xliffext:skl_file_name><xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version><xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">251d9b608d59c7bfe5324a7e2dcb474ce86a85b4</xliffext:ms.openlocfilehash><xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ba7e452ac39d7f09a5646044b44de0e1cdc54982</xliffext:ms.sourcegitcommit><xliffext:ms.openlocfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">learn-pr\azure\distribute-data-globally-with-cosmos-db\includes\5-data-consistency-levels.md</xliffext:ms.openlocfilepath></header><body><group id="content" extype="content"><trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Azure Cosmos DB allows developers to choose between five well-defined consistency models along the consistency spectrum â€“ strong, bounded staleness, session, consistent prefix, and eventual.</source>
        </trans-unit><trans-unit id="102" translate="yes" xml:space="preserve">
          <source>These consistency levels enable you to maximize the availability and performance of your database, depending on your needs.</source>
        </trans-unit><trans-unit id="103" translate="yes" xml:space="preserve">
          <source>For cases when data must be processed in a specific order, strong consistency might be the right choice.</source>
        </trans-unit><trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Or for cases when data doesn't need to be immediately consistent, eventual consistency might be the right choice.</source>
        </trans-unit><trans-unit id="105" translate="yes" xml:space="preserve">
          <source>In this unit, you'll familiarize yourself with the available consistency levels in Azure Cosmos DB and determine the correct consistency level for your online clothing site.</source>
        </trans-unit><trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Consistency basics</source>
        </trans-unit><trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Each database account has a default consistency level, which determines the consistency of data within the account.</source>
        </trans-unit><trans-unit id="108" translate="yes" xml:space="preserve">
          <source>At one end of the spectrum is Strong consistency, which offers a linearizability guarantee with the reads guaranteed to return the most recent version of an item.</source>
        </trans-unit><trans-unit id="109" translate="yes" xml:space="preserve">
          <source>At the other end of the spectrum is Eventual consistency, which guarantees that in absence of any further writes, the replicas within the group eventually converge.</source>
        </trans-unit><trans-unit id="110" translate="yes" xml:space="preserve">
          <source>In the middle is Session consistency, which is the most popular because it guarantees monotonic reads, monotonic writes, and read your own writes (RYW) guarantees.</source>
        </trans-unit><trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The five consistency levels in Azure Cosmos DB</source>
        </trans-unit><trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Guarantees about each consistency level are listed in the following table.</source>
        </trans-unit><trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Consistency levels and guarantees<ept id="p1">**</ept></source>
        </trans-unit><trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Consistency Level</source>
        </trans-unit><trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Guarantees</source>
        </trans-unit><trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Strong</source>
        </trans-unit><trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Linearizability.</source>
        </trans-unit><trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Reads are guaranteed to return the most recent version of an item.</source>
        </trans-unit><trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Bounded Staleness</source>
        </trans-unit><trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Consistent Prefix.</source>
        </trans-unit><trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Reads lag behind writes by at most k prefixes or t interval.</source>
        </trans-unit><trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Session</source>
        </trans-unit><trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Consistent Prefix.</source>
        </trans-unit><trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Monotonic reads, monotonic writes, read-your-writes, write-follows-reads.</source>
        </trans-unit><trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Consistent Prefix</source>
        </trans-unit><trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Updates returned are some prefix of all the updates, with no gaps.</source>
        </trans-unit><trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Eventual</source>
        </trans-unit><trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Out of order reads.</source>
        </trans-unit><trans-unit id="129" translate="yes" xml:space="preserve">
          <source>You can configure the default consistency level on your Azure Cosmos DB account (and later override the consistency on a specific read request) in the Azure portal.</source>
        </trans-unit><trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Internally, the default consistency level applies to data within the partition sets, which may span regions.</source>
        </trans-unit><trans-unit id="131" translate="yes" xml:space="preserve">
          <source>In Azure Cosmos DB, reads served at session, consistent prefix and eventual consistency are twice as cheap, in terms of request unit consumption, as reads with strong or bounded staleness consistency.</source>
        </trans-unit><trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Use of consistency levels</source>
        </trans-unit><trans-unit id="133" translate="yes" xml:space="preserve">
          <source>About 73% of Azure Cosmos DB tenants use session consistency and 20% prefer bounded staleness.</source>
        </trans-unit><trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Approximately 3% of Azure Cosmos DB customers experiment with various consistency levels initially before settling on a specific consistency choice for their application.</source>
        </trans-unit><trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Only 2% of Azure Cosmos DB tenants override consistency levels on a per request basis.</source>
        </trans-unit><trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Consistency levels in detail</source>
        </trans-unit><trans-unit id="137" translate="yes" xml:space="preserve">
          <source>To learn more about the consistency levels, review the music-note based consistency examples provided in the Azure portal, then review the information below about each level.</source>
        </trans-unit><trans-unit id="138" translate="yes" xml:space="preserve">
          <source>In the Azure portal, click <bpt id="p1">**</bpt>Default consistency<ept id="p1">**</ept>.</source>
        </trans-unit><trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Click through each of the different consistency models and watch the musical examples.</source>
        </trans-unit><trans-unit id="140" translate="yes" xml:space="preserve">
          <source>See how data is written to the different regions and how the choice of consistency impacts how the note data is written.</source>
        </trans-unit><trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Note that Strong is grayed out as it is only available for data written to a single region.</source>
        </trans-unit><trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Learn about consistency settings in the portal</source>
        </trans-unit><trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Let's learn more about the consistency levels.</source>
        </trans-unit><trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Think about how each of these consistency levels could work for your product and user data for your clothing retail site.</source>
        </trans-unit><trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Strong consistency</source>
        </trans-unit><trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Strong consistency offers a <bpt id="p1">[</bpt>linearizability<ept id="p1">](https://aphyr.com/posts/313-strong-consistency-models)</ept> guarantee with the reads guaranteed to return the most recent version of an item.</source>
        </trans-unit><trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Strong consistency guarantees that a write is only visible after it is committed durably by the majority quorum of replicas.</source>
        </trans-unit><trans-unit id="148" translate="yes" xml:space="preserve">
          <source>A write is either synchronously committed durably by both the primary and the quorum of secondaries, or it is aborted.</source>
        </trans-unit><trans-unit id="149" translate="yes" xml:space="preserve">
          <source>A read is always acknowledged by the majority read quorum, a client can never see an uncommitted or partial write and is always guaranteed to read the latest acknowledged write.</source>
        </trans-unit><trans-unit id="150" translate="yes" xml:space="preserve">
          <source>You can have an Azure Cosmos account with strong consistency and multiple write regions.</source>
        </trans-unit><trans-unit id="151" translate="yes" xml:space="preserve">
          <source>However, the benefits such as low write latency, high write availability that are available to multiple write regions are not applicable to Cosmos accounts configured with strong consistency, because of synchronous replication across regions.</source>
        </trans-unit><trans-unit id="152" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Consistency and Data Durability in Azure Cosmos DB<ept id="p1">](/azure/cosmos-db/consistency-levels-tradeoffs)</ept> article.</source>
        </trans-unit><trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The cost of a read operation (in terms of request units consumed) with strong consistency is higher than session and eventual, but the same as bounded staleness.</source>
        </trans-unit><trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Bounded staleness consistency</source>
        </trans-unit><trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Bounded staleness consistency guarantees that the reads may lag behind writes by at most <bpt id="p1">*</bpt>K<ept id="p1">*</ept> versions or prefixes of an item or <bpt id="p2">*</bpt>t<ept id="p2">*</ept> time-interval.</source>
        </trans-unit><trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Therefore, when choosing bounded staleness, the "staleness" can be configured in two ways: number of versions <bpt id="p1">*</bpt>K<ept id="p1">*</ept> of the item by which the reads lag behind the writes, and the time interval <bpt id="p2">*</bpt>t<ept id="p2">*</ept>.</source>
        </trans-unit><trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Bounded staleness offers total global order except within the "staleness window."</source>
        </trans-unit><trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The monotonic read guarantees exist within a region both inside and outside the "staleness window."</source>
        </trans-unit><trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Bounded staleness provides a stronger consistency guarantee than session, consistent-prefix, or eventual consistency.</source>
        </trans-unit><trans-unit id="160" translate="yes" xml:space="preserve">
          <source>For globally distributed applications, we recommend you use bounded staleness for scenarios where you would like to have strong consistency but also want 99.99% availability and low latency.</source>
        </trans-unit><trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Azure Cosmos DB accounts that are configured with bounded staleness consistency can associate any number of Azure regions with their Azure Cosmos DB account.</source>
        </trans-unit><trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The cost of a read operation (in terms of RUs consumed) with bounded staleness is higher than session and eventual consistency, but the same as strong consistency.</source>
        </trans-unit><trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Session consistency</source>
        </trans-unit><trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Unlike the global consistency models offered by strong and bounded staleness consistency levels, session consistency is scoped to a client session.</source>
        </trans-unit><trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Session consistency is ideal for all scenarios where a device or user session is involved since it guarantees monotonic reads, monotonic writes, and read your own writes (RYW) guarantees.</source>
        </trans-unit><trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Session consistency provides predictable consistency for a session, and maximum read throughput while offering the lowest latency writes and reads.</source>
        </trans-unit><trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Azure Cosmos DB accounts that are configured with session consistency can associate any number of Azure regions with their Azure Cosmos DB account.</source>
        </trans-unit><trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The cost of a read operation (in terms of RUs consumed) with session consistency level is less than strong and bounded staleness, but more than eventual consistency.</source>
        </trans-unit><trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Consistent prefix consistency</source>
        </trans-unit><trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Consistent prefix guarantees that in absence of any further writes, the replicas within the group eventually converge.</source>
        </trans-unit><trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Consistent prefix guarantees that reads never see out of order writes.</source>
        </trans-unit><trans-unit id="172" translate="yes" xml:space="preserve">
          <source>If writes were performed in the order <ph id="ph1">`A, B, C`</ph>, then a client sees either <ph id="ph2">`A`</ph>, <ph id="ph3">`A,B`</ph>, or <ph id="ph4">`A,B,C`</ph>, but never out of order like <ph id="ph5">`A,C`</ph> or <ph id="ph6">`B,A,C`</ph>.</source>
        </trans-unit><trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Azure Cosmos DB accounts that are configured with consistent prefix consistency can associate any number of Azure regions with their Azure Cosmos DB account.</source>
        </trans-unit><trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Eventual consistency</source>
        </trans-unit><trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Eventual consistency guarantees that in absence of any further writes, the replicas within the group eventually converge.</source>
        </trans-unit><trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Eventual consistency is the weakest form of consistency where a client may get the values that are older than the ones it had seen before.</source>
        </trans-unit><trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Eventual consistency provides the weakest read consistency but offers the lowest latency for both reads and writes.</source>
        </trans-unit><trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Azure Cosmos DB accounts that are configured with eventual consistency can associate any number of Azure regions with their Azure Cosmos DB account.</source>
        </trans-unit><trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The cost of a read operation (in terms of RUs consumed) with the eventual consistency level is the lowest of all the Azure Cosmos DB consistency levels.</source>
        </trans-unit><trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Summary</source>
        </trans-unit><trans-unit id="181" translate="yes" xml:space="preserve">
          <source>In this unit, you've learned how consistency levels can be used to maximize high-availability and minimize latency.</source>
        </trans-unit></group></body></file></xliff>