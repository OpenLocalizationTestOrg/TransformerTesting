<?xml version="1.0"?><xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd"><file datatype="xml" original="8-secure-webhook-payloads-with-secret.md" source-language="en-US" target-language="en-US"><header><tool tool-id="mdxliff" tool-name="mdxliff"  tool-company="Microsoft" /><xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8-secure-webhook-payloads-with-secret.a2d322.37870eedfe57c7d290475fb1b3cedb4093a5e047.skl</xliffext:skl_file_name><xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version><xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">37870eedfe57c7d290475fb1b3cedb4093a5e047</xliffext:ms.openlocfilehash><xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ba7e452ac39d7f09a5646044b44de0e1cdc54982</xliffext:ms.sourcegitcommit><xliffext:ms.openlocfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">learn-pr\azure\monitor-github-events-with-a-function-triggered-by-a-webhook\includes\8-secure-webhook-payloads-with-secret.md</xliffext:ms.openlocfilepath></header><body><group id="content" extype="content"><trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Once your server is configured to receive payloads, it will listen for any payload sent to the endpoint you configured.</source>
        </trans-unit><trans-unit id="102" translate="yes" xml:space="preserve">
          <source>For security reasons, you might want to limit requests to those coming from GitHub.</source>
        </trans-unit><trans-unit id="103" translate="yes" xml:space="preserve">
          <source>There are a few ways to go about this.</source>
        </trans-unit><trans-unit id="104" translate="yes" xml:space="preserve">
          <source>For example, you could opt to whitelist requests from GitHub's IP address.</source>
        </trans-unit><trans-unit id="105" translate="yes" xml:space="preserve">
          <source>An easier method is to set up a secret token and validate the request using this token.</source>
        </trans-unit><trans-unit id="106" translate="yes" xml:space="preserve">
          <source>In the example scenario, your IT Department's management are happy with the webhook triggered Azure Function that you've created.</source>
        </trans-unit><trans-unit id="107" translate="yes" xml:space="preserve">
          <source>All of the information regarding updates to the Technology wiki are being parsed by the Function app and sent to the business, each time the <bpt id="p1">*</bpt>Gollum<ept id="p1">*</ept> event is triggered.</source>
        </trans-unit><trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The management has asked how secure the information passed from GitHub is.</source>
        </trans-unit><trans-unit id="109" translate="yes" xml:space="preserve">
          <source>They've asked you to find a way to secure the information, and verify it's GitHub that is sending updates.</source>
        </trans-unit><trans-unit id="110" translate="yes" xml:space="preserve">
          <source>In this unit, you'll learn how to secure your webhook payload with a secret and validate payloads from GitHub.</source>
        </trans-unit><trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Webhook secrets</source>
        </trans-unit><trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Setting a webhook secret allows you to ensure that POST requests sent to the payload URL are from GitHub.</source>
        </trans-unit><trans-unit id="113" translate="yes" xml:space="preserve">
          <source>When you set a secret, you'll receive the <ph id="ph1">`X-Hub-Signature`</ph> header in the webhook POST request.</source>
        </trans-unit><trans-unit id="114" translate="yes" xml:space="preserve">
          <source>In GitHub, you can set the <bpt id="p1">*</bpt>secret<ept id="p1">*</ept> field by going to the repository where you have setup your webhook, and then editing the webhook.</source>
        </trans-unit><trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Use the following procedure</source>
        </trans-unit><trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Navigate to the repository where you're setting up your webhook.</source>
        </trans-unit><trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Enter some text into the <bpt id="p1">**</bpt>Secret<ept id="p1">**</ept> textbox.</source>
        </trans-unit><trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Use a string that can't easily be guessed.</source>
        </trans-unit><trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>Update Webhook<ept id="p1">**</ept>.</source>
        </trans-unit><trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Validating payloads from GitHub</source>
        </trans-unit><trans-unit id="121" translate="yes" xml:space="preserve">
          <source>When your secret token is set, GitHub uses it to create a hash signature for each payload.</source>
        </trans-unit><trans-unit id="122" translate="yes" xml:space="preserve">
          <source>This hash signature is passed along with each request in the headers as <ph id="ph1">`X-Hub-Signature`</ph>.</source>
        </trans-unit><trans-unit id="123" translate="yes" xml:space="preserve">
          <source>When your function receives a request, you need to compute the hash using your secret, and ensure that it matches the hash in the request header.</source>
        </trans-unit><trans-unit id="124" translate="yes" xml:space="preserve">
          <source>GitHub uses an HMAC SHA1 hex digest to compute the hash, so you must calculate your hash in this same way, using the key of your secret and your payload body.</source>
        </trans-unit><trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The hash signature starts with the text <ph id="ph1">`sha1=`</ph>.</source>
        </trans-unit></group></body></file></xliff>