<?xml version="1.0"?><xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd"><file datatype="xml" original="5-exercise-create-custom-docker-image.md" source-language="en-US" target-language="en-US"><header><tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1931010" tool-company="Microsoft" /><xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5-exercise-create-custom-docker-image.d2a077b5b162d624010e5951136ec1d2848cbe72.skl</xliffext:skl_file_name><xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version><xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b09796631d30cdd9e2f67669245b373c97a44245</xliffext:ms.openlocfilehash><xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">05/13/2019</xliffext:ms.lasthandoff><xliffext:ms.openlocfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">learn-pr\azure\intro-to-containers\includes\5-exercise-create-custom-docker-image.md</xliffext:ms.openlocfilepath></header><body><group id="content" extype="content"><trans-unit id="101" translate="yes" xml:space="preserve">
          <source>A Dockerfile contains the steps for building a custom Docker image.</source>
        </trans-unit><trans-unit id="102" translate="yes" xml:space="preserve">
          <source>You now decide to deploy one of your organization's web apps using Docker.</source>
        </trans-unit><trans-unit id="103" translate="yes" xml:space="preserve">
          <source>You select a simple web app that implements a web API for a hotel reservations web site.</source>
        </trans-unit><trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The web API exposes HTTP POST and GET operations that create and retrieve customer's bookings.</source>
        </trans-unit><trans-unit id="105" translate="yes" xml:space="preserve">
          <source>In this version of the web app, the bookings are not actually persisted, and queries return dummy data.</source>
        </trans-unit><trans-unit id="106" translate="yes" xml:space="preserve">
          <source>In this exercise, you'll create a Dockerfile for an app that doesn't have one.</source>
        </trans-unit><trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Then, you'll build the image and run it locally.</source>
        </trans-unit><trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Create a Dockerfile for the web app</source>
        </trans-unit><trans-unit id="109" translate="yes" xml:space="preserve">
          <source>In a command prompt window on your local computer, run the following command to download the source code for the web app.</source>
        </trans-unit><trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Move to the <ph id="ph1">`src`</ph> folder.</source>
        </trans-unit><trans-unit id="111" translate="yes" xml:space="preserve">
          <source>In this directory, create a new file named <ph id="ph1">`Dockerfile`</ph> with no file extension and open it in a text editor.</source>
        </trans-unit><trans-unit id="112" translate="yes" xml:space="preserve">
          <source>On Windows, you can run the following commands:</source>
        </trans-unit><trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Add the following commands to the Dockerfile.</source>
        </trans-unit><trans-unit id="114" translate="yes" xml:space="preserve">
          <source>These commands fetch an image containing the .NET Core Framework SDK.</source>
        </trans-unit><trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The project file for the web app (<ph id="ph1">`HotelReservationSystem.csproj`</ph>) is copied to the /src folder in the container.</source>
        </trans-unit><trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`*`</ph>dotnet restore<ph id="ph2">`*`</ph> command downloads the dependencies required by the project from NuGet.</source>
        </trans-unit><trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Append the following commands to the Dockerfile.</source>
        </trans-unit><trans-unit id="118" translate="yes" xml:space="preserve">
          <source>These commands copy the source code for the web app to the container and then run the dotnet build command to build the app.</source>
        </trans-unit><trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The resulting DLLs are written to the /app folder in the container.</source>
        </trans-unit><trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Add the following command to the Dockerfile.</source>
        </trans-unit><trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`dotnet publish`</ph> command copies the executables for the web site to a new folder and removes any interim files.</source>
        </trans-unit><trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The files in this folder can then be deployed to a web site.</source>
        </trans-unit><trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Add the following commands to the Dockerfile.</source>
        </trans-unit><trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The first command opens port 80 in the container.</source>
        </trans-unit><trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The second command moves to the <ph id="ph1">`/app`</ph> folder containing the published version of the web app.</source>
        </trans-unit><trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The final command specifies that when the container runs it should execute the command <ph id="ph1">`dotnet HotelReservationSystem.dll`</ph>.</source>
        </trans-unit><trans-unit id="127" translate="yes" xml:space="preserve">
          <source>This library contains the compiled code for the web app</source>
        </trans-unit><trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Save the file and close your text editor.</source>
        </trans-unit><trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Build and deploy the image using the Dockerfile</source>
        </trans-unit><trans-unit id="130" translate="yes" xml:space="preserve">
          <source>At the command prompt, run the following command to build the image for the sample app using the Dockerfile.</source>
        </trans-unit><trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Don't forget the <ph id="ph1">`.`</ph> at the end of the command.</source>
        </trans-unit><trans-unit id="132" translate="yes" xml:space="preserve">
          <source>This command builds the image and stores it locally.</source>
        </trans-unit><trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The image is given the name <ph id="ph1">`reservationsystem`</ph>.</source>
        </trans-unit><trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Verify that the image is built successfully.</source>
        </trans-unit><trans-unit id="135" translate="yes" xml:space="preserve">
          <source>A warning about file and directory permissions will be displayed when the process completes.</source>
        </trans-unit><trans-unit id="136" translate="yes" xml:space="preserve">
          <source>You can ignore these warnings for the purposes of this exercise.</source>
        </trans-unit><trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Run the following command to verify that the image has been created and stored in the local registry.</source>
        </trans-unit><trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The image will have the name <ph id="ph1">`reservationsystem`</ph>.</source>
        </trans-unit><trans-unit id="139" translate="yes" xml:space="preserve">
          <source>You'll also see an image named <bpt id="p1">*</bpt>microsoft/dotnet<ept id="p1">*</ept>.</source>
        </trans-unit><trans-unit id="140" translate="yes" xml:space="preserve">
          <source>This image contains the .NET Core SDK and was downloaded when the <ph id="ph1">`reservationsystem`</ph> image was built using the Dockerfile.</source>
        </trans-unit><trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Test the web app</source>
        </trans-unit><trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Run a container using the <ph id="ph1">`reservationsystem`</ph> image using the following command.</source>
        </trans-unit><trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Docker will respond with a lengthy string of hex digits â€“ the container runs in the background without any UI.</source>
        </trans-unit><trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Port 80 in the container is mapped to port 8080 on the host machine.</source>
        </trans-unit><trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The container is named <ph id="ph1">`reservations`</ph>.</source>
        </trans-unit><trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Start a web browser and navigate to <ph id="ph1">http://localhost:8080/api/reservations/1</ph>.</source>
        </trans-unit><trans-unit id="147" translate="yes" xml:space="preserve">
          <source>You should see a JSON document containing the data for reservation number 1 returned by the web app.</source>
        </trans-unit><trans-unit id="148" translate="yes" xml:space="preserve">
          <source>You can replace the "1" with any reservation number, and you'll see the corresponding reservation details.</source>
        </trans-unit><trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Screenshot of the hotel reservations system web app running in a browser</source>
        </trans-unit><trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Examine the status of the container using the following command.</source>
        </trans-unit><trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Verify that the status of the container is <bpt id="p1">*</bpt>Up<ept id="p1">*</ept>.</source>
        </trans-unit><trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Stop the <bpt id="p1">*</bpt>reservations<ept id="p1">*</ept> container with the following command.</source>
        </trans-unit><trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Delete the <bpt id="p1">*</bpt>reservations<ept id="p1">*</ept> container from the local registry.</source>
        </trans-unit><trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Leave the <bpt id="p1">*</bpt>reservationsystem<ept id="p1">*</ept> in your the local registry.</source>
        </trans-unit><trans-unit id="155" translate="yes" xml:space="preserve">
          <source>You will use this image in the next exercise.</source>
        </trans-unit><trans-unit id="156" translate="yes" xml:space="preserve">
          <source>You've now created an image for your web app and run it using a Docker container.</source>
        </trans-unit></group></body></file></xliff>