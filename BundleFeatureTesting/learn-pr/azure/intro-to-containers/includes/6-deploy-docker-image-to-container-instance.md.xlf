<?xml version="1.0"?><xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd"><file datatype="xml" original="6-deploy-docker-image-to-container-instance.md" source-language="en-US" target-language="en-US"><header><tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1931010" tool-company="Microsoft" /><xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6-deploy-docker-image-to-container-instance.b40942f5bb76413b2345fcccfec2405ad7400d12.skl</xliffext:skl_file_name><xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version><xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e15e65c3013a5ca0669bd60764a2fe6e309d9af4</xliffext:ms.openlocfilehash><xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/24/2019</xliffext:ms.lasthandoff><xliffext:ms.openlocfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">learn-pr\azure\intro-to-containers\includes\6-deploy-docker-image-to-container-instance.md</xliffext:ms.openlocfilepath></header><body><group id="content" extype="content"><trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Azure Container Instance loads and runs Docker images on demand.</source>
        </trans-unit><trans-unit id="102" translate="yes" xml:space="preserve">
          <source>The Azure Container Instance service can retrieve the image from a registry such as Docker Hub or Azure Container Registry.</source>
        </trans-unit><trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Your organization wants to use Azure to run its web apps.</source>
        </trans-unit><trans-unit id="104" translate="yes" xml:space="preserve">
          <source>For this reason, it makes sense to store the images in Azure Container Registry, and run them using the Azure Container Instance service.</source>
        </trans-unit><trans-unit id="105" translate="yes" xml:space="preserve">
          <source>In this unit, you'll learn how to upload a Docker image to Azure Container Registry, and run an image using the Azure Container Instance service.</source>
        </trans-unit><trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Using Azure Container Registry to store a container</source>
        </trans-unit><trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Azure Container Registry is a registry hosting service provided by Azure.</source>
        </trans-unit><trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Each Azure Container Registry resource you create is a separate registry with a unique URL.</source>
        </trans-unit><trans-unit id="109" translate="yes" xml:space="preserve">
          <source>These registries are <bpt id="p1">*</bpt>private<ept id="p1">*</ept>: they require authentication to push or pull images.</source>
        </trans-unit><trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Azure Container Registry runs in the cloud, and provides similar levels of scalability and availability to many other Azure services.</source>
        </trans-unit><trans-unit id="111" translate="yes" xml:space="preserve">
          <source>You create a registry either using the Azure portal, or using the <bpt id="p1">*</bpt>acr create<ept id="p1">*</ept> command in the Azure Command Line Interface, as shown in the following example.</source>
        </trans-unit><trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Different SKUs provide varying levels of scalability and storage.</source>
        </trans-unit><trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Azure Container Registry repositories are private <ph id="ph1">&amp;mdash;</ph> they do not support unauthenticated access.</source>
        </trans-unit><trans-unit id="114" translate="yes" xml:space="preserve">
          <source>To pull images from an Azure Container Registry repository, use the <ph id="ph1">`docker login`</ph> command and specify the URL of the login server for the registry.</source>
        </trans-unit><trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The login server URL for a registry in Azure Container Registry has the form <ph id="ph1">\&lt;</ph><bpt id="p1">*</bpt>registry_name<ept id="p1">*</ept><ph id="ph2">\&gt;</ph>.azurecr.io.</source>
        </trans-unit><trans-unit id="116" translate="yes" xml:space="preserve">
          <source>You will be prompted for a username and password.</source>
        </trans-unit><trans-unit id="117" translate="yes" xml:space="preserve">
          <source>To find this information, you can either go to the Azure portal and look up the access keys for the registry, or you can run the following command.</source>
        </trans-unit><trans-unit id="118" translate="yes" xml:space="preserve">
          <source>You <bpt id="p1">*</bpt>push<ept id="p1">*</ept> an image from your local computer to a Docker registry with the <ph id="ph1">`docker push`</ph> command.</source>
        </trans-unit><trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Before you do this though, you must create an alias for the image that specifies the repository and tag to be created in the Docker registry.</source>
        </trans-unit><trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The repository name must be of the form <ph id="ph1">\*</ph>&lt;login_server<ph id="ph2">\&gt;</ph><ph id="ph3">/&lt;</ph><bpt id="p1">*</bpt>image_name<ept id="p1">*</ept><ph id="ph4">\&gt;</ph>:&lt;<bpt id="p2">*</bpt>tag<ept id="p2">*</ept>/&gt;.</source>
        </trans-unit><trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">`docker tag`</ph> command to perform this operation.</source>
        </trans-unit><trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The following example creates an alias for the <bpt id="p1">*</bpt>myapp:v1<ept id="p1">*</ept> image described in unit 4.</source>
        </trans-unit><trans-unit id="123" translate="yes" xml:space="preserve">
          <source>If you run <ph id="ph1">`docker image ls`</ph>, you will see two entries for the image: one with the original name, and the second with the new alias.</source>
        </trans-unit><trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Upload the image to the registry in Azure Container Registry.</source>
        </trans-unit><trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Verify that the image has been uploaded correctly by querying the repositories in the registry with the <ph id="ph1">`acr repository list`</ph> command.</source>
        </trans-unit><trans-unit id="126" translate="yes" xml:space="preserve">
          <source>You can list the images in the registry with the <ph id="ph1">`acr repository show`</ph> command.</source>
        </trans-unit><trans-unit id="127" translate="yes" xml:space="preserve">
          <source>You will see at least two tags for each image in a repository.</source>
        </trans-unit><trans-unit id="128" translate="yes" xml:space="preserve">
          <source>One tag will be value you specified in the <bpt id="p1">*</bpt>acr build<ept id="p1">*</ept> command (<bpt id="p2">*</bpt>v1<ept id="p2">*</ept> in the example above).</source>
        </trans-unit><trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The other will be <bpt id="p1">*</bpt>latest<ept id="p1">*</ept>.</source>
        </trans-unit><trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Every time you rebuild an image, Azure Container Registry automatically creates the <bpt id="p1">*</bpt>latest<ept id="p1">*</ept> tag as an alias for the most recent version of the image.</source>
        </trans-unit><trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Using Azure Container Instance to run an image</source>
        </trans-unit><trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The Azure Container Instance service can load an image from Azure Container Registry and run it in Azure.</source>
        </trans-unit><trans-unit id="133" translate="yes" xml:space="preserve">
          <source>You create a container instance and start the image running with the <ph id="ph1">`az container create`</ph> command.</source>
        </trans-unit><trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Provide the username and password for the registry in the <ph id="ph1">`registry-username`</ph> and <ph id="ph2">`registry-password`</ph> parameters.</source>
        </trans-unit><trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The instance will be allocated an IP address.</source>
        </trans-unit><trans-unit id="136" translate="yes" xml:space="preserve">
          <source>You access the instance with this IP address.</source>
        </trans-unit><trans-unit id="137" translate="yes" xml:space="preserve">
          <source>You can optionally specify a DNS name if you prefer to reference the instance through a more user-friendly label.</source>
        </trans-unit><trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Notice that you specify the image as a URL that references your registry (<bpt id="p1">*</bpt>myregistry<ept id="p1">*</ept>) in the Azure Container Registry service (<bpt id="p2">*</bpt>azurecr.io<ept id="p2">*</ept>).</source>
        </trans-unit><trans-unit id="139" translate="yes" xml:space="preserve">
          <source>If you're using Docker Hub or some other registry, replace this URL with that of your image in that registry.</source>
        </trans-unit><trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The instance will be hosted by Azure with a domain name based on the DNS label you specified.</source>
        </trans-unit><trans-unit id="141" translate="yes" xml:space="preserve">
          <source>You find the fully qualified domain name of the instance by querying the IP address of the instance.</source>
        </trans-unit><trans-unit id="142" translate="yes" xml:space="preserve">
          <source>You can access the application using a web browser.</source>
        </trans-unit><trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Navigate to the URL returned by this command.</source>
        </trans-unit></group></body></file></xliff>