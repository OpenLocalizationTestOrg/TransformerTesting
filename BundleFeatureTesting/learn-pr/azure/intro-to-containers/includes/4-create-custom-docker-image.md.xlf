<?xml version="1.0"?><xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd"><file datatype="xml" original="4-create-custom-docker-image.md" source-language="en-US" target-language="en-US"><header><tool tool-id="mdxliff" tool-name="mdxliff"  tool-company="Microsoft" /><xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4-create-custom-docker-image.19e416.493fc4e303d5de9a442c27e889fb51295ed3c58c.skl</xliffext:skl_file_name><xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version><xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">493fc4e303d5de9a442c27e889fb51295ed3c58c</xliffext:ms.openlocfilehash><xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ba7e452ac39d7f09a5646044b44de0e1cdc54982</xliffext:ms.sourcegitcommit><xliffext:ms.openlocfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">learn-pr\azure\intro-to-containers\includes\4-create-custom-docker-image.md</xliffext:ms.openlocfilepath></header><body><group id="content" extype="content"><trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Docker Hub is an excellent source of images to get you started building your own containerized apps.</source>
        </trans-unit><trans-unit id="102" translate="yes" xml:space="preserve">
          <source>You can download an image that provides the basic functionality you require, and <bpt id="p1">*</bpt>layer<ept id="p1">*</ept> your own application on top of it to create a new custom image.</source>
        </trans-unit><trans-unit id="103" translate="yes" xml:space="preserve">
          <source>You can automate the steps for doing this process by writing a Dockerfile.</source>
        </trans-unit><trans-unit id="104" translate="yes" xml:space="preserve">
          <source>In the scenario of the online clothing store, the company has decided that Docker is the way forward.</source>
        </trans-unit><trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The next step is to determine the best way to containerize your web applications.</source>
        </trans-unit><trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The company plans to build many of the apps using ASP.NET Core, and you've noticed that Docker Hub contains a base image that includes this framework.</source>
        </trans-unit><trans-unit id="107" translate="yes" xml:space="preserve">
          <source>As a proof of concept, you want to take this base image and add the code for one of the web apps to create a new custom image.</source>
        </trans-unit><trans-unit id="108" translate="yes" xml:space="preserve">
          <source>You also want this process to be easily repeatable, so it can be automated whenever a new version of the web app is released.</source>
        </trans-unit><trans-unit id="109" translate="yes" xml:space="preserve">
          <source>In this unit, you'll learn how to create a custom Docker image, and how you can automate the process by writing a Dockerfile.</source>
        </trans-unit><trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Create a custom image with a Dockerfile</source>
        </trans-unit><trans-unit id="111" translate="yes" xml:space="preserve">
          <source>To create a Docker image containing your application, you'll typically begin by identifying a <bpt id="p1">*</bpt>base image<ept id="p1">*</ept> to which you add additional files and configuration.</source>
        </trans-unit><trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The process of identifying a suitable base image usually starts with a search on Docker Hub for a ready-made image that already contains an application framework and all the utilities and tools of a Linux distribution like Ubuntu or Alpine.</source>
        </trans-unit><trans-unit id="113" translate="yes" xml:space="preserve">
          <source>For example, if you have an ASP.NET Core application that you want to package into a container, Microsoft publishes an image called <ph id="ph1">`mcr.microsoft.com/dotnet/core/aspnet`</ph> that already contains the ASP.NET Core runtime.</source>
        </trans-unit><trans-unit id="114" translate="yes" xml:space="preserve">
          <source>An image can be customized by starting a container with the base image and making changes to it.</source>
        </trans-unit><trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Changes usually involve activities like copying files into the container from the local filesystem, and running various tools and utilities to compile code.</source>
        </trans-unit><trans-unit id="116" translate="yes" xml:space="preserve">
          <source>When finished, you would use the <ph id="ph1">`docker commit`</ph> command to save the changes to a new image.</source>
        </trans-unit><trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Manually completing the above process is time-consuming and error-prone.</source>
        </trans-unit><trans-unit id="118" translate="yes" xml:space="preserve">
          <source>It could be scripted with a script language like Bash, but Docker provides a more effective way of automating image creation via a <bpt id="p1">*</bpt>Dockerfile<ept id="p1">*</ept>.</source>
        </trans-unit><trans-unit id="119" translate="yes" xml:space="preserve">
          <source>A Dockerfile is a plain text file containing all the commands needed to build an image.</source>
        </trans-unit><trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Dockerfiles are written in a minimal scripting language designed for building and configuring images.</source>
        </trans-unit><trans-unit id="121" translate="yes" xml:space="preserve">
          <source>documents the operations required to build an image starting with a base image.</source>
        </trans-unit><trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The following example shows a Dockerfile that builds a .NET Core 2.2 application and packages it into a new image.</source>
        </trans-unit><trans-unit id="123" translate="yes" xml:space="preserve">
          <source>In this file:</source>
        </trans-unit><trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>FROM<ept id="p1">**</ept> statement downloads the specified image and creates a new container based on this image.</source>
        </trans-unit><trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>WORKDIR<ept id="p1">**</ept> command sets the current working directory in the container, used by the following commands.</source>
        </trans-unit><trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>COPY<ept id="p1">**</ept> command copies files from the host computer to the container.</source>
        </trans-unit><trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The first argument (<ph id="ph1">`myapp_code`</ph>) is a file or folder on the host computer.</source>
        </trans-unit><trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The second argument (<ph id="ph1">`*.*`</ph>) specifies the name of the file or folder to act as the destination in the container.</source>
        </trans-unit><trans-unit id="129" translate="yes" xml:space="preserve">
          <source>In this case, the destination is the current working directory (<ph id="ph1">`/app`</ph>).</source>
        </trans-unit><trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>RUN<ept id="p1">**</ept> command executes a command in the container.</source>
        </trans-unit><trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Arguments to the RUN command are command-line commands.</source>
        </trans-unit><trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>EXPOSE<ept id="p1">**</ept> command creates configuration in the new image that specifies which ports are intended to be opened when the container is run.</source>
        </trans-unit><trans-unit id="133" translate="yes" xml:space="preserve">
          <source>If the container is running a web app, it's common to EXPOSE port 80.</source>
        </trans-unit><trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>ENTRYPOINT<ept id="p1">**</ept> command specifies the operation the container should run when it starts.</source>
        </trans-unit><trans-unit id="135" translate="yes" xml:space="preserve">
          <source>In this example, it runs the newly-built app.</source>
        </trans-unit><trans-unit id="136" translate="yes" xml:space="preserve">
          <source>You specify the command to be run and each of its arguments as a string array.</source>
        </trans-unit><trans-unit id="137" translate="yes" xml:space="preserve">
          <source>By convention, applications meant to be packaged as Docker images typically have a Dockerfile located in the root of their source code, and it's almost always named <ph id="ph1">`Dockerfile`</ph>.</source>
        </trans-unit><trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`docker build`</ph> command creates a new image by running a Dockerfile.</source>
        </trans-unit><trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>-f<ept id="p1">*</ept> flag indicates the name of the Dockerfile to use.</source>
        </trans-unit><trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>-t<ept id="p1">*</ept> flag specifies the name of the image to be created, in this example, <bpt id="p2">*</bpt>myapp:v1<ept id="p2">*</ept>.</source>
        </trans-unit><trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The final parameter, <bpt id="p1">*</bpt>.<ept id="p1">*</ept>, provides the <bpt id="p2">*</bpt>build context<ept id="p2">*</ept> for the source files for the <bpt id="p3">**</bpt>COPY<ept id="p3">**</ept> command: the set of files on the host computer needed during the build process.</source>
        </trans-unit><trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Behind the scenes, the <ph id="ph1">`docker build`</ph> command creates and runs a container, runs commands in it, then commits the changes to a new image.</source>
        </trans-unit></group></body></file></xliff>