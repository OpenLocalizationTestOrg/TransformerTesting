<?xml version="1.0"?><xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd"><file datatype="xml" original="2-deploy-docker-image-locally.md" source-language="en-US" target-language="en-US"><header><tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1931010" tool-company="Microsoft" /><xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2-deploy-docker-image-locally.94e4672fbc1e0be31f3a39ca5d60e0b731a531d5.skl</xliffext:skl_file_name><xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version><xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ee2cf77d2999122164b3adac99f47808baa7580b</xliffext:ms.openlocfilehash><xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/24/2019</xliffext:ms.lasthandoff><xliffext:ms.openlocfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">learn-pr\azure\intro-to-containers\includes\2-deploy-docker-image-locally.md</xliffext:ms.openlocfilepath></header><body><group id="content" extype="content"><trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Docker is a technology that enables you to deploy applications and services quickly and easily.</source>
        </trans-unit><trans-unit id="102" translate="yes" xml:space="preserve">
          <source>A Docker app runs using a Docker image.</source>
        </trans-unit><trans-unit id="103" translate="yes" xml:space="preserve">
          <source>A Docker image is a prepackaged environment containing the application code and the environment in which the code executes.</source>
        </trans-unit><trans-unit id="104" translate="yes" xml:space="preserve">
          <source>In the corporate scenario described earlier, you want to investigate the feasibility of packaging and running an app with Docker.</source>
        </trans-unit><trans-unit id="105" translate="yes" xml:space="preserve">
          <source>You decide to build and deploy a Docker image running a test web app.</source>
        </trans-unit><trans-unit id="106" translate="yes" xml:space="preserve">
          <source>In this unit, you'll learn about the key concepts and processes involved in running a containerized app stored in a Docker image.</source>
        </trans-unit><trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Overview of Docker</source>
        </trans-unit><trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Docker is a tool for running containerized apps.</source>
        </trans-unit><trans-unit id="109" translate="yes" xml:space="preserve">
          <source>A containerized app includes the app and the filesystem that makes up the environment in which it runs.For example, a containerized app could include a database and other associated software and configuration information needed to run the app.</source>
        </trans-unit><trans-unit id="110" translate="yes" xml:space="preserve">
          <source>A containerized app typically has a much smaller footprint than a virtual machine configured to run the same app.</source>
        </trans-unit><trans-unit id="111" translate="yes" xml:space="preserve">
          <source>This is because a virtual machine has to supply the entire operating system and associated supporting environment.</source>
        </trans-unit><trans-unit id="112" translate="yes" xml:space="preserve">
          <source>A Docker container doesn't have this overhead because Docker uses the operating system kernel of the host computer to power the container.</source>
        </trans-unit><trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Downloading and starting a Docker image is typically much faster and more space-efficient than downloading and running a virtual machine that provides similar functionality.</source>
        </trans-unit><trans-unit id="114" translate="yes" xml:space="preserve">
          <source>You create a containerized app by building an <bpt id="p1">**</bpt>image<ept id="p1">**</ept> that contains a set of files and a block of configuration used by Docker.</source>
        </trans-unit><trans-unit id="115" translate="yes" xml:space="preserve">
          <source>You run the app by asking Docker to start a container based on the image.</source>
        </trans-unit><trans-unit id="116" translate="yes" xml:space="preserve">
          <source>When the container starts, Docker uses the image configuration to determine what application to run inside the container.</source>
        </trans-unit><trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Docker provides the operating system resources and the necessary security to ensure that containers running concurrently remain <bpt id="p1">*</bpt>relatively<ept id="p1">*</ept> isolated.</source>
        </trans-unit><trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Docker does not provide the level of isolation available with virtual machines.</source>
        </trans-unit><trans-unit id="119" translate="yes" xml:space="preserve">
          <source>A virtual machine implements isolation at the hardware level.</source>
        </trans-unit><trans-unit id="120" translate="yes" xml:space="preserve">
          <source>With Docker, containers share underlying operating system resources and libraries, although Docker ensures that one container cannot access the resources of another unless the containers are configured to do so.</source>
        </trans-unit><trans-unit id="121" translate="yes" xml:space="preserve">
          <source>You can run Docker on your desktop or laptop if you're developing and testing locally.</source>
        </trans-unit><trans-unit id="122" translate="yes" xml:space="preserve">
          <source>For production systems, Docker is available for server environments, including many variants of Linux and Microsoft Windows Server 2016.</source>
        </trans-unit><trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Many vendors also support Docker in the cloud.</source>
        </trans-unit><trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For example, you can store Docker images in Azure Container Registry and run containers with Azure Container Instances.</source>
        </trans-unit><trans-unit id="125" translate="yes" xml:space="preserve">
          <source>In this unit, you'll use Docker locally to build and run an image, then upload it to Azure Container Registry and run it in an Azure Container Instance.</source>
        </trans-unit><trans-unit id="126" translate="yes" xml:space="preserve">
          <source>This version of Docker is suitable for local development and testing of Docker images.</source>
        </trans-unit><trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Linux and Windows Docker images</source>
        </trans-unit><trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Docker was originally developed for Linux and has expanded to support Windows.</source>
        </trans-unit><trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Individual Docker images are either Windows-based or Linux-based, but can't be both at the same time.</source>
        </trans-unit><trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The operating system of the image determines what kind of operating system environment is used inside the container.</source>
        </trans-unit><trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Authors of Docker images who wish to offer similar functionality in both Linux-based and Windows-based images can build those images separately.</source>
        </trans-unit><trans-unit id="132" translate="yes" xml:space="preserve">
          <source>For example, Microsoft offers Windows and Linux Docker images containing an ASP.NET Core environment that can be used as the basis for containerized ASP.NET Core applications.</source>
        </trans-unit><trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Linux computers with Docker installed can only run Linux containers.</source>
        </trans-unit><trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Windows computers with Docker installed can run both kinds of containers.</source>
        </trans-unit><trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Windows accomplishes this by using a virtual machine to run a Linux system, and uses the virtual Linux system to run Linux containers.</source>
        </trans-unit><trans-unit id="136" translate="yes" xml:space="preserve">
          <source>In this module, you will build and run a Linux-based image.</source>
        </trans-unit><trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Docker registries and Docker Hub</source>
        </trans-unit><trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Docker images are stored and made available in <bpt id="p1">*</bpt>registries<ept id="p1">*</ept>.</source>
        </trans-unit><trans-unit id="139" translate="yes" xml:space="preserve">
          <source>A registry is a web service to which Docker can connect to upload and download container images.</source>
        </trans-unit><trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The most well-known registry is Docker Hub, which is a public registry.</source>
        </trans-unit><trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Many individuals and organizations publish images to Docker Hub, and you can download and run these images using Docker running on your desktop, on a server, or in the cloud.</source>
        </trans-unit><trans-unit id="142" translate="yes" xml:space="preserve">
          <source>You can create a Docker Hub account and upload your own images there for free.</source>
        </trans-unit><trans-unit id="143" translate="yes" xml:space="preserve">
          <source>A registry is organized as a series of <bpt id="p1">*</bpt>repositories<ept id="p1">*</ept>.</source>
        </trans-unit><trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Each repository contains multiple Docker images that share a common name (and generally the same purpose and functionality) but have different versions.</source>
        </trans-unit><trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Each version is identified by a tag.</source>
        </trans-unit><trans-unit id="146" translate="yes" xml:space="preserve">
          <source>This mechanism enables you to publish and retain multiple versions of images for compatibility reasons.</source>
        </trans-unit><trans-unit id="147" translate="yes" xml:space="preserve">
          <source>When you download and run an image, you must specify the registry, repository, and version tag for the image.</source>
        </trans-unit><trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Tags are simply text labels, and you can use your own version numbering system (v1.0, v1.1, v1.2, v2.0, and so on).</source>
        </trans-unit><trans-unit id="149" translate="yes" xml:space="preserve">
          <source>A single image can have multiple tags assigned to it.</source>
        </trans-unit><trans-unit id="150" translate="yes" xml:space="preserve">
          <source>By convention, the most recent version of an image is assigned the tag <bpt id="p1">*</bpt>latest<ept id="p1">*</ept> in addition to a tag that describes its version number.</source>
        </trans-unit><trans-unit id="151" translate="yes" xml:space="preserve">
          <source>When you release a new version of an image, you can reassign the <bpt id="p1">*</bpt>latest<ept id="p1">*</ept> tag to reference the new image.</source>
        </trans-unit><trans-unit id="152" translate="yes" xml:space="preserve">
          <source>A repository is also the unit of privacy for an image.</source>
        </trans-unit><trans-unit id="153" translate="yes" xml:space="preserve">
          <source>If you don't wish to share an image, you can make the repository private.</source>
        </trans-unit><trans-unit id="154" translate="yes" xml:space="preserve">
          <source>You can grant access to other users with whom you want to share the image.</source>
        </trans-unit><trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Browse Docker Hub and pull an image</source>
        </trans-unit><trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Often you'll find that there's an image in Docker Hub that closely matches the type of app you want to containerize.</source>
        </trans-unit><trans-unit id="157" translate="yes" xml:space="preserve">
          <source>You can download such an image and extend it with your own application code.</source>
        </trans-unit><trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Docker Hub contains many thousands of images.</source>
        </trans-unit><trans-unit id="159" translate="yes" xml:space="preserve">
          <source>While it's possible to search and browse a registry using Docker from the command line, Docker Hub offers a website that enables you to search, filter, and select images by type and publisher.</source>
        </trans-unit><trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The figure below shows an example of the search page.</source>
        </trans-unit><trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Screenshot of the Docker Hub search page</source>
        </trans-unit><trans-unit id="162" translate="yes" xml:space="preserve">
          <source>You retrieve an image by using the <ph id="ph1">`docker pull`</ph> command with the image name.</source>
        </trans-unit><trans-unit id="163" translate="yes" xml:space="preserve">
          <source>If you specify only the repository name, Docker will download the image tagged <ph id="ph1">`latest`</ph> from that repository on Docker Hub, but you can modify the command to pull different tags and from different repositories.</source>
        </trans-unit><trans-unit id="164" translate="yes" xml:space="preserve">
          <source>This example fetches the image with the tag <ph id="ph1">`aspnetapp`</ph> from the <bpt id="p1">*</bpt>microsoft/dotnet-samples<ept id="p1">*</ept> repository (this image contains a simple ASP.NET web app).</source>
        </trans-unit><trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The examples in this unit are intended to show the syntax of the various Docker commands.</source>
        </trans-unit><trans-unit id="166" translate="yes" xml:space="preserve">
          <source>You don't need to run these commands while reading this unit.</source>
        </trans-unit><trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The exercises that follow this unit will guide you through working with Docker directly.</source>
        </trans-unit><trans-unit id="168" translate="yes" xml:space="preserve">
          <source>When you fetch an image, Docker stores it locally and makes it available for running containers.</source>
        </trans-unit><trans-unit id="169" translate="yes" xml:space="preserve">
          <source>You can view the images in your local registry with the <bpt id="p1">*</bpt>docker image list<ept id="p1">*</ept> command.</source>
        </trans-unit><trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The output looks like the example below.</source>
        </trans-unit><trans-unit id="171" translate="yes" xml:space="preserve">
          <source>You use the image name ID to reference the image in many other Docker commands.</source>
        </trans-unit><trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Run a Docker container</source>
        </trans-unit><trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">`docker run`</ph> command to start a container.</source>
        </trans-unit><trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Specify the image to run with its name or ID.</source>
        </trans-unit><trans-unit id="175" translate="yes" xml:space="preserve">
          <source>If you haven't <ph id="ph1">`docker pull`</ph>ed the image already, Docker will do it for you.</source>
        </trans-unit><trans-unit id="176" translate="yes" xml:space="preserve">
          <source>In this example, the command will respond with the following message:</source>
        </trans-unit><trans-unit id="177" translate="yes" xml:space="preserve">
          <source>This image contains a web app, so it's now listening for requests to arrive on HTTP port 80.</source>
        </trans-unit><trans-unit id="178" translate="yes" xml:space="preserve">
          <source>However, if you open a web browser and navigate to <ph id="ph1">`http://localhost:80`</ph>, you won't see the app.</source>
        </trans-unit><trans-unit id="179" translate="yes" xml:space="preserve">
          <source>By default, Docker doesn't allow inbound network requests to reach your container.</source>
        </trans-unit><trans-unit id="180" translate="yes" xml:space="preserve">
          <source>To enable network requests, you need to tell Docker to assign a specific port number from your computer to a specific port number in the container by adding the <ph id="ph1">`-p`</ph> option to <ph id="ph2">`docker run`</ph>.</source>
        </trans-unit><trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Additionally, the web app in this image isn't meant to be used interactively from the command line.</source>
        </trans-unit><trans-unit id="182" translate="yes" xml:space="preserve">
          <source>When we start it, we want Docker to start it in the background and just let it run.</source>
        </trans-unit><trans-unit id="183" translate="yes" xml:space="preserve">
          <source>This can be achieved with the <ph id="ph1">`-d`</ph> flag.</source>
        </trans-unit><trans-unit id="184" translate="yes" xml:space="preserve">
          <source>You can press Ctrl-C to stop the image and then restart it as shown by the following example.</source>
        </trans-unit><trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The command maps port 80 in the container to port 8080 on your computer.</source>
        </trans-unit><trans-unit id="186" translate="yes" xml:space="preserve">
          <source>If you visit the page <ph id="ph1">http://localhost:8080</ph> in a browser, you'll see the sample web app.</source>
        </trans-unit><trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Screenshot of the sample web app running in a browser</source>
        </trans-unit><trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Containers and files</source>
        </trans-unit><trans-unit id="189" translate="yes" xml:space="preserve">
          <source>If a running container makes changes to the files in its image, those changes only exist in the container where the changes are made.</source>
        </trans-unit><trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Unless you take specific steps to preserve the state of a container, these changes will be lost when the container is removed.</source>
        </trans-unit><trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Similarly, multiple containers based on the same image that run simultaneously do not share the files in the image <ph id="ph1">&amp;mdash;</ph> each container has its own independent copy.</source>
        </trans-unit><trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Any data written by one container to its filesystem are not visible to the other.</source>
        </trans-unit><trans-unit id="193" translate="yes" xml:space="preserve">
          <source>It's possible to add writable volumes to a container.</source>
        </trans-unit><trans-unit id="194" translate="yes" xml:space="preserve">
          <source>A volume represents a filesystem that can be mounted by the container, and is made available to the application running in the container.</source>
        </trans-unit><trans-unit id="195" translate="yes" xml:space="preserve">
          <source>The data in a volume does persist when the container stops, and multiple containers can share the same volume.</source>
        </trans-unit><trans-unit id="196" translate="yes" xml:space="preserve">
          <source>The details for creating and using volumes are outside the scope of this module.</source>
        </trans-unit><trans-unit id="197" translate="yes" xml:space="preserve">
          <source>In most cases, for applications deployed with Docker, it is a best practice to avoid the need to make changes to the image filesystem, or only use it for temporary files that can afford to be lost.</source>
        </trans-unit><trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Manage Docker containers</source>
        </trans-unit><trans-unit id="199" translate="yes" xml:space="preserve">
          <source>You can view active containers with the <ph id="ph1">`docker ps`</ph> command.</source>
        </trans-unit><trans-unit id="200" translate="yes" xml:space="preserve">
          <source>The output includes the status of the container (<bpt id="p1">*</bpt>Up<ept id="p1">*</ept> if it is running, <bpt id="p2">*</bpt>Exited<ept id="p2">*</ept> if it has terminated, among other values), the command line flags specified when the image was started, and other information.</source>
        </trans-unit><trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Docker lets you run multiple containers from the same image simultaneously, so each container is assigned a unique ID as well as a unique human-readable name.</source>
        </trans-unit><trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Most Docker commands used to manage individual containers can use either the ID or the name to refer to a specific container.</source>
        </trans-unit><trans-unit id="203" translate="yes" xml:space="preserve">
          <source>In the output below, you can see two containers.</source>
        </trans-unit><trans-unit id="204" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>PORTS<ept id="p1">*</ept> field shows that the container with ID <ph id="ph1">`lucid-jang`</ph> is the image running with port 80 on the Docker host mapped to port 8080 on your computer.</source>
        </trans-unit><trans-unit id="205" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`youthful_heisenberg`</ph> instance is the container for the previous run of the image.</source>
        </trans-unit><trans-unit id="206" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>COMMAND<ept id="p1">*</ept>* field shows the command that the container ran to start the application in the image.</source>
        </trans-unit><trans-unit id="207" translate="yes" xml:space="preserve">
          <source>In this case, for both containers, it is <bpt id="p1">*</bpt>dotnet aspnetapp.dll<ept id="p1">*</ept>.</source>
        </trans-unit><trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Note that the image ID for the containers is also the same because both containers are executing the same image.</source>
        </trans-unit><trans-unit id="209" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`docker ps`</ph> is a shortcut for <ph id="ph2">`docker container ls`</ph>.</source>
        </trans-unit><trans-unit id="210" translate="yes" xml:space="preserve">
          <source>The names of these commands are based on the Linux utilities <ph id="ph1">`ps`</ph> and <ph id="ph2">`ls`</ph>, which list running processes and files, respectively.</source>
        </trans-unit><trans-unit id="211" translate="yes" xml:space="preserve">
          <source>You can stop an active container with the <ph id="ph1">`docker stop`</ph> command and specify the container ID.</source>
        </trans-unit><trans-unit id="212" translate="yes" xml:space="preserve">
          <source>If you run <ph id="ph1">`docker ps`</ph> again, you'll see that the <bpt id="p1">*</bpt>lucid_jang<ept id="p1">*</ept> container is no longer present in the output.</source>
        </trans-unit><trans-unit id="213" translate="yes" xml:space="preserve">
          <source>The container still exists, but is no longer hosting a running process.</source>
        </trans-unit><trans-unit id="214" translate="yes" xml:space="preserve">
          <source>You can include stopped containers in the output of <ph id="ph1">`docker ps`</ph> by including the <ph id="ph2">`-a`</ph> flag:</source>
        </trans-unit><trans-unit id="215" translate="yes" xml:space="preserve">
          <source>You can restart a stopped container with the <ph id="ph1">`docker start`</ph> command.</source>
        </trans-unit><trans-unit id="216" translate="yes" xml:space="preserve">
          <source>The main process of the container will be started anew.</source>
        </trans-unit><trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Typically, once a container is stopped, it should also be removed.</source>
        </trans-unit><trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Removing a container cleans up any resources it leaves behind.</source>
        </trans-unit><trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Once you remove a container, any changes made within its image filesystem are permanently lost.</source>
        </trans-unit><trans-unit id="220" translate="yes" xml:space="preserve">
          <source>You can't remove a container that is running, but you can force a container to be stopped and removed with the <bpt id="p1">*</bpt>-f<ept id="p1">*</ept> flag to the <ph id="ph1">`docker rm`</ph> command.</source>
        </trans-unit><trans-unit id="221" translate="yes" xml:space="preserve">
          <source>This is a quick way to stop and remove a container, but should only be used if the app inside the container does not need to perform any kind of graceful shutdown.</source>
        </trans-unit><trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Remove Docker images</source>
        </trans-unit><trans-unit id="223" translate="yes" xml:space="preserve">
          <source>You can remove an image from the local computer with the <ph id="ph1">`docker image rm`</ph> command.</source>
        </trans-unit><trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Specify the image ID of the image to remove.</source>
        </trans-unit><trans-unit id="225" translate="yes" xml:space="preserve">
          <source>This example removes the image for the sample web app:</source>
        </trans-unit><trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Containers running the image must be terminated before the image can be removed.</source>
        </trans-unit><trans-unit id="227" translate="yes" xml:space="preserve">
          <source>If the image is still in use by a container, you'll get an error message like the one shown below.</source>
        </trans-unit><trans-unit id="228" translate="yes" xml:space="preserve">
          <source>In this example, the error occurs because the <bpt id="p1">*</bpt>youthful_hesienburg<ept id="p1">*</ept> container is still using the image.</source>
        </trans-unit></group></body></file></xliff>