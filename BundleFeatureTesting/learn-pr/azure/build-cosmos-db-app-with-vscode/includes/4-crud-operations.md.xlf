<?xml version="1.0"?><xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd"><file datatype="xml" original="4-crud-operations.md" source-language="en-US" target-language="en-US"><header><tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1931010" tool-company="Microsoft" /><xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4-crud-operations.ee29842e8bf044e7cc3de55cc2e316e8b6596905.skl</xliffext:skl_file_name><xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version><xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">49c6bfca173265983e9bc4b3a7230ac1d17eda5c</xliffext:ms.openlocfilehash><xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">05/13/2019</xliffext:ms.lasthandoff><xliffext:ms.openlocfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">learn-pr\azure\build-cosmos-db-app-with-vscode\includes\4-crud-operations.md</xliffext:ms.openlocfilepath></header><body><group id="content" extype="content"><trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Once the connection to Azure Cosmos DB has been made, the next step is to create, read, replace, and delete the documents that are stored in the database.</source>
        </trans-unit><trans-unit id="102" translate="yes" xml:space="preserve">
          <source>In this unit, you will create User documents in your <ph id="ph1">`WebCustomer`</ph> collection.</source>
        </trans-unit><trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Then, you'll retrieve them by ID, replace them, and delete them.</source>
        </trans-unit><trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Working with documents programmatically</source>
        </trans-unit><trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Data is stored in JSON documents in Azure Cosmos DB.</source>
        </trans-unit><trans-unit id="106" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Documents<ept id="p1">](https://docs.microsoft.com/azure/cosmos-db/sql-api-resources#documents)</ept> can be created, retrieved, replaced, or deleted in the portal, as shown in the previous module, or programmatically, as described in this module.</source>
        </trans-unit><trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Azure Cosmos DB provides client-side SDKs for .NET, .NET Core, Java, Node.js, and Python, each of which supports these operations.</source>
        </trans-unit><trans-unit id="108" translate="yes" xml:space="preserve">
          <source>In this module, we'll be using the .NET Core SDK to perform CRUD (create, retrieve, update, and delete) operations on the NoSQL data stored in Azure Cosmos DB.</source>
        </trans-unit><trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The main operations for Azure Cosmos DB documents are part of the <bpt id="p1">[</bpt>DocumentClient<ept id="p1">](https://docs.microsoft.com/dotnet/api/microsoft.azure.documents.client.documentclient?view=azure-dotnet)</ept> class:</source>
        </trans-unit><trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CreateDocumentAsync<ept id="p1">](https://docs.microsoft.com/dotnet/api/microsoft.azure.documents.client.documentclient.createdocumentasync?view=azure-dotnet)</ept></source>
        </trans-unit><trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ReadDocumentAsync<ept id="p1">](https://docs.microsoft.com/dotnet/api/microsoft.azure.documents.client.documentclient.readdocumentasync?view=azure-dotnet)</ept></source>
        </trans-unit><trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ReplaceDocumentAsync<ept id="p1">](https://docs.microsoft.com/dotnet/api/microsoft.azure.documents.client.documentclient.replacedocumentasync?view=azure-dotnet)</ept></source>
        </trans-unit><trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>UpsertDocumentAsync<ept id="p1">](https://docs.microsoft.com/dotnet/api/microsoft.azure.documents.client.documentclient.upsertdocumentasync?view=azure-dotnet)</ept></source>
        </trans-unit><trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>DeleteDocumentAsync<ept id="p1">](https://docs.microsoft.com/dotnet/api/microsoft.azure.documents.client.documentclient.deletedocumentasync?view=azure-dotnet)</ept></source>
        </trans-unit><trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Upsert performs a create or replace operation depending on whether the document already exists.</source>
        </trans-unit><trans-unit id="116" translate="yes" xml:space="preserve">
          <source>To perform any of these operations, you need to create a class that represents the object stored in the database.</source>
        </trans-unit><trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Because we're working with a database of users, you'll want to create a <bpt id="p1">**</bpt>User<ept id="p1">**</ept> class to store primary data such as their first name, last name, and user id (which is required, as that's the partition key to enable horizontal scaling) and classes for shipping preferences and order history.</source>
        </trans-unit><trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Once you have those classes created to represent your users, you'll create new user documents for each instance, and then we'll perform some basic CRUD operations on the documents.</source>
        </trans-unit><trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Create documents</source>
        </trans-unit><trans-unit id="120" translate="yes" xml:space="preserve">
          <source>First, create a <bpt id="p1">**</bpt>User<ept id="p1">**</ept> class that represents the objects to store in Azure Cosmos DB.</source>
        </trans-unit><trans-unit id="121" translate="yes" xml:space="preserve">
          <source>We will also create <bpt id="p1">**</bpt>OrderHistory<ept id="p1">**</ept> and <bpt id="p2">**</bpt>ShippingPreference<ept id="p2">**</ept> classes that are used within <bpt id="p3">**</bpt>User<ept id="p3">**</ept>.</source>
        </trans-unit><trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Note that documents must have an <bpt id="p1">**</bpt>Id<ept id="p1">**</ept> property serialized as <bpt id="p2">**</bpt>id<ept id="p2">**</ept> in JSON.</source>
        </trans-unit><trans-unit id="123" translate="yes" xml:space="preserve">
          <source>To create these classes, copy and paste the following <bpt id="p1">**</bpt>User<ept id="p1">**</ept>, <bpt id="p2">**</bpt>OrderHistory<ept id="p2">**</ept>, and <bpt id="p3">**</bpt>ShippingPreference<ept id="p3">**</ept> classes underneath the <bpt id="p4">**</bpt>BasicOperations<ept id="p4">**</ept> method.</source>
        </trans-unit><trans-unit id="124" translate="yes" xml:space="preserve">
          <source>In the integrated terminal, type the following command to run the program to ensure it runs.</source>
        </trans-unit><trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Now copy and paste the <bpt id="p1">**</bpt>CreateUserDocumentIfNotExists<ept id="p1">**</ept> task under the <bpt id="p2">**</bpt>WriteToConsoleAndPromptToContinue<ept id="p2">**</ept> method at the end of the Program.cs file.</source>
        </trans-unit><trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Then, return to the <bpt id="p1">**</bpt>BasicOperations<ept id="p1">**</ept> method and add the following to the end of that method.</source>
        </trans-unit><trans-unit id="127" translate="yes" xml:space="preserve">
          <source>In the integrated terminal, again, type the following command to run the program.</source>
        </trans-unit><trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The terminal will display output as the application creates each new user document.</source>
        </trans-unit><trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Press any key to complete the program.</source>
        </trans-unit><trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Read documents</source>
        </trans-unit><trans-unit id="131" translate="yes" xml:space="preserve">
          <source>To read documents from the database, copy in the following code and place after the <bpt id="p1">**</bpt>WriteToConsoleAndPromptToContinue<ept id="p1">**</ept> method in the Program.cs file.</source>
        </trans-unit><trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Copy and paste the following code to the end of the <bpt id="p1">**</bpt>BasicOperations<ept id="p1">**</ept> method, after the <ph id="ph1">`await this.CreateUserDocumentIfNotExists("Users", "WebCustomers", nelapin);`</ph> line.</source>
        </trans-unit><trans-unit id="133" translate="yes" xml:space="preserve">
          <source>In the integrated terminal, type the following command to run the program.</source>
        </trans-unit><trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The terminal displays the following output, where the output "Read user 1" indicates the document was retrieved.</source>
        </trans-unit><trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Replace documents</source>
        </trans-unit><trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Azure Cosmos DB supports replacing JSON documents.</source>
        </trans-unit><trans-unit id="137" translate="yes" xml:space="preserve">
          <source>In this case, we'll update a user record to account for a change to their last name.</source>
        </trans-unit><trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Copy and paste the <bpt id="p1">**</bpt>ReplaceUserDocument<ept id="p1">**</ept> method after the <bpt id="p2">**</bpt>ReadUserDocument<ept id="p2">**</ept> method in the Program.cs file.</source>
        </trans-unit><trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Copy and paste the following code to the end of the <bpt id="p1">**</bpt>BasicOperations<ept id="p1">**</ept> method, after the <ph id="ph1">`await this.CreateUserDocumentIfNotExists("Users", "WebCustomers", nelapin);`</ph> line.</source>
        </trans-unit><trans-unit id="140" translate="yes" xml:space="preserve">
          <source>In the integrated terminal, run the following command.</source>
        </trans-unit><trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The terminal displays the following output, where the output "Replaced last name for Suh" indicates the document was replaced.</source>
        </trans-unit><trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Delete documents</source>
        </trans-unit><trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Copy and paste the <bpt id="p1">**</bpt>DeleteUserDocument<ept id="p1">**</ept> method underneath your <bpt id="p2">**</bpt>ReplaceUserDocument<ept id="p2">**</ept> method.</source>
        </trans-unit><trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Copy and paste the following code in the end of the <bpt id="p1">**</bpt>BasicOperations<ept id="p1">**</ept> method.</source>
        </trans-unit><trans-unit id="145" translate="yes" xml:space="preserve">
          <source>In the integrated terminal, run the following command.</source>
        </trans-unit><trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The terminal displays the following output, where the output "Deleted user 1" indicates the document was deleted.</source>
        </trans-unit><trans-unit id="147" translate="yes" xml:space="preserve">
          <source>In this unit you created, replaced, and deleted documents in your Azure Cosmos DB database.</source>
        </trans-unit></group></body></file></xliff>