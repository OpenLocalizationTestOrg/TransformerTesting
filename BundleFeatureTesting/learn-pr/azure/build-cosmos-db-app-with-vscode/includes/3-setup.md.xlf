<?xml version="1.0"?><xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd"><file datatype="xml" original="3-setup.md" source-language="en-US" target-language="en-US"><header><tool tool-id="mdxliff" tool-name="mdxliff"  tool-company="Microsoft" /><xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3-setup.e1a248.a0b5b4ce1e5070a05aa3a169f3567a8a4a8ce426.skl</xliffext:skl_file_name><xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version><xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a0b5b4ce1e5070a05aa3a169f3567a8a4a8ce426</xliffext:ms.openlocfilehash><xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ba7e452ac39d7f09a5646044b44de0e1cdc54982</xliffext:ms.sourcegitcommit><xliffext:ms.openlocfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">learn-pr\azure\build-cosmos-db-app-with-vscode\includes\3-setup.md</xliffext:ms.openlocfilepath></header><body><group id="content" extype="content"><trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Visual Studio Code enables you to create a console application by using the integrated terminal and a few short commands.</source>
        </trans-unit><trans-unit id="102" translate="yes" xml:space="preserve">
          <source>In this unit, you will create a basic console app using the integrated terminal, retrieve your Azure Cosmos DB connection string from the extension, and then configure the connection from your application to Azure Cosmos DB.</source>
        </trans-unit><trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Create a console app</source>
        </trans-unit><trans-unit id="104" translate="yes" xml:space="preserve">
          <source>In Visual Studio Code, select <bpt id="p1">**</bpt>File<ept id="p1">**</ept><ph id="ph1"> &gt; </ph><bpt id="p2">**</bpt>Open Folder<ept id="p2">**</ept>.</source>
        </trans-unit><trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Create a new folder named <ph id="ph1">`learning-module`</ph> in the location of your choice, and then click <bpt id="p1">**</bpt>Select Folder<ept id="p1">**</ept>.</source>
        </trans-unit><trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Ensure that file auto-save is enabled by clicking on the File menu and checking <bpt id="p1">**</bpt>Auto Save<ept id="p1">**</ept> if it is blank.</source>
        </trans-unit><trans-unit id="107" translate="yes" xml:space="preserve">
          <source>You will be copying in several blocks of code, and this will ensure you are always operating against the latest edits of your files.</source>
        </trans-unit><trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Open the integrated terminal from Visual Studio Code by selecting <bpt id="p1">**</bpt>View<ept id="p1">**</ept><ph id="ph1"> &gt; </ph><bpt id="p2">**</bpt>Terminal<ept id="p2">**</ept> from the main menu.</source>
        </trans-unit><trans-unit id="109" translate="yes" xml:space="preserve">
          <source>In the terminal window, copy and paste the following command.</source>
        </trans-unit><trans-unit id="110" translate="yes" xml:space="preserve">
          <source>This command creates a <bpt id="p1">**</bpt>Program.cs<ept id="p1">**</ept> file in your folder with a basic "Hello World" program already written, along with a C# project file named <bpt id="p2">**</bpt>learning-module.csproj<ept id="p2">**</ept>.</source>
        </trans-unit><trans-unit id="111" translate="yes" xml:space="preserve">
          <source>In the terminal window, copy and paste the following command to run the "Hello World" program.</source>
        </trans-unit><trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The terminal window displays "Hello world!"</source>
        </trans-unit><trans-unit id="113" translate="yes" xml:space="preserve">
          <source>as output.</source>
        </trans-unit><trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Connect the app to Azure Cosmos DB</source>
        </trans-unit><trans-unit id="115" translate="yes" xml:space="preserve">
          <source>At the terminal prompt, copy and paste the following command block to install the required NuGet packages.</source>
        </trans-unit><trans-unit id="116" translate="yes" xml:space="preserve">
          <source>At the top of the Explorer pane, click <bpt id="p1">**</bpt>Program.cs<ept id="p1">**</ept> to open the file.</source>
        </trans-unit><trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Add the following using statements after <ph id="ph1">`using System;`</ph>.</source>
        </trans-unit><trans-unit id="118" translate="yes" xml:space="preserve">
          <source>If you get a message about adding required missing assets, click <bpt id="p1">**</bpt>Yes<ept id="p1">**</ept>.</source>
        </trans-unit><trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Create a new file named App.config in the <ph id="ph1">`learning-module`</ph> folder, and add the following code.</source>
        </trans-unit><trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Copy your connection string by clicking the <ph id="ph1">![</ph>Azure icon<ph id="ph2">](../media/2-setup/visual-studio-code-explorer-icon.png)</ph> Azure icon on the left, expanding your Concierge Subscription, right-clicking your new Azure Cosmos DB account, and then clicking <bpt id="p1">**</bpt>Copy Connection String<ept id="p1">**</ept>.</source>
        </trans-unit><trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Paste the connection string into the end of the App.config file, and then copy the <bpt id="p1">**</bpt>AccountEndpoint<ept id="p1">**</ept> portion from the connection string into the <bpt id="p2">**</bpt>accountEndpoint<ept id="p2">**</ept> value in App.config.</source>
        </trans-unit><trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>accountEndpoint<ept id="p1">**</ept> should look like the following:</source>
        </trans-unit><trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Now copy the <bpt id="p1">**</bpt>AccountKey<ept id="p1">**</ept> value from the connection string into the <bpt id="p2">**</bpt>accountKey<ept id="p2">**</ept> value, and then delete the original connection string you copied in.</source>
        </trans-unit><trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Your final App.config file looks similar to this.</source>
        </trans-unit><trans-unit id="125" translate="yes" xml:space="preserve">
          <source>At the terminal prompt, copy and paste the following command to run the program.</source>
        </trans-unit><trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The program displays Hello World!</source>
        </trans-unit><trans-unit id="127" translate="yes" xml:space="preserve">
          <source>in the terminal.</source>
        </trans-unit><trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Create the DocumentClient</source>
        </trans-unit><trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Now it's time to create an instance of the <ph id="ph1">`DocumentClient`</ph>, which is the client-side representation of the Azure Cosmos DB service.</source>
        </trans-unit><trans-unit id="130" translate="yes" xml:space="preserve">
          <source>This client is used to configure and execute requests against the service.</source>
        </trans-unit><trans-unit id="131" translate="yes" xml:space="preserve">
          <source>In Program.cs, add the following to the beginning of the <ph id="ph1">`Program`</ph> class.</source>
        </trans-unit><trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Add a new asynchronous task to create a new client, and check whether the <bpt id="p1">**</bpt>Users<ept id="p1">**</ept> database exists by adding the following method after the <ph id="ph1">`Main`</ph> method.</source>
        </trans-unit><trans-unit id="133" translate="yes" xml:space="preserve">
          <source>In the integrated terminal, again, copy and paste the following command to run the program to ensure it runs.</source>
        </trans-unit><trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Copy and paste the following code into the <bpt id="p1">**</bpt>Main<ept id="p1">**</ept> method, overwriting the current <ph id="ph1">`Console.WriteLine("Hello World!");`</ph> line.</source>
        </trans-unit><trans-unit id="135" translate="yes" xml:space="preserve">
          <source>In the integrated terminal, again, type the following command to run the program to ensure it runs.</source>
        </trans-unit><trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The console displays the following output.</source>
        </trans-unit><trans-unit id="137" translate="yes" xml:space="preserve">
          <source>In this unit, you set up the groundwork for your Azure Cosmos DB application.</source>
        </trans-unit><trans-unit id="138" translate="yes" xml:space="preserve">
          <source>You set up your development environment in Visual Studio Code, created a basic "Hello World" project, connected the project to the Azure Cosmos DB endpoint, and ensured your database and collection exist.</source>
        </trans-unit></group></body></file></xliff>