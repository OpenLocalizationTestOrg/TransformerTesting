<?xml version="1.0"?><xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd"><file datatype="xml" original="5-query.md" source-language="en-US" target-language="en-US"><header><tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1931010" tool-company="Microsoft" /><xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5-query.9034b77aa5fbac1b47a39543abddcf3ca3bf106d.skl</xliffext:skl_file_name><xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version><xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">63ae9d3d7d58e942d28c0bab74c919d4a02a8038</xliffext:ms.openlocfilehash><xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">05/13/2019</xliffext:ms.lasthandoff><xliffext:ms.openlocfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">learn-pr\azure\build-cosmos-db-app-with-vscode\includes\5-query.md</xliffext:ms.openlocfilepath></header><body><group id="content" extype="content"><trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Now that you've created documents in your application, let's query them from your application.</source>
        </trans-unit><trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Azure Cosmos DB uses SQL queries and LINQ queries.</source>
        </trans-unit><trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This unit focuses on running SQL queries and LINQ queries from your application, as opposed to the portal.</source>
        </trans-unit><trans-unit id="104" translate="yes" xml:space="preserve">
          <source>We'll use the user documents you've created for your online retailer application to test these queries.</source>
        </trans-unit><trans-unit id="105" translate="yes" xml:space="preserve">
          <source>LINQ query basics</source>
        </trans-unit><trans-unit id="106" translate="yes" xml:space="preserve">
          <source>LINQ is a .NET programming model that expresses computations as queries on streams of objects.</source>
        </trans-unit><trans-unit id="107" translate="yes" xml:space="preserve">
          <source>You can create an <bpt id="p1">**</bpt>IQueryable<ept id="p1">**</ept> object that directly queries Azure Cosmos DB, which translates the LINQ query into a Cosmos DB query.</source>
        </trans-unit><trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The query is then passed to the Azure Cosmos DB server to retrieve a set of results in JSON format.</source>
        </trans-unit><trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The returned results are deserialized into a stream of .NET objects on the client side.</source>
        </trans-unit><trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Many developers prefer LINQ queries, as they provide a single consistent programming model across how they work with objects in application code and how they express query logic running in the database.</source>
        </trans-unit><trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The following table shows how LINQ queries are translated into SQL.</source>
        </trans-unit><trans-unit id="112" translate="yes" xml:space="preserve">
          <source>LINQ expression</source>
        </trans-unit><trans-unit id="113" translate="yes" xml:space="preserve">
          <source>SQL translation</source>
        </trans-unit><trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Run SQL and LINQ queries</source>
        </trans-unit><trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The following sample shows how a query could be performed in SQL, LINQ, or LINQ lambda from your .NET code.</source>
        </trans-unit><trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Copy the code and add it to the end of the Program.cs file.</source>
        </trans-unit><trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Copy and paste the following code to your <bpt id="p1">**</bpt>BasicOperations<ept id="p1">**</ept> method, before the <ph id="ph1">`await this.DeleteUserDocument("Users", "WebCustomers", yanhe);`</ph> line.</source>
        </trans-unit><trans-unit id="118" translate="yes" xml:space="preserve">
          <source>In the integrated terminal, run the following command.</source>
        </trans-unit><trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The console displays the output of the LINQ and SQL queries.</source>
        </trans-unit><trans-unit id="120" translate="yes" xml:space="preserve">
          <source>In this unit you learned about LINQ queries, and then added a LINQ and SQL query to your application to retrieve user records.</source>
        </trans-unit></group></body></file></xliff>