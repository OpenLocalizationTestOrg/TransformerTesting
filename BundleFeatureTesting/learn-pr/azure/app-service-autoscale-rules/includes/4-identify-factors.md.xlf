<?xml version="1.0"?><xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd"><file datatype="xml" original="4-identify-factors.md" source-language="en-US" target-language="en-US"><header><tool tool-id="mdxliff" tool-name="mdxliff"  tool-company="Microsoft" /><xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4-identify-factors.a8fcaf.3bb4c51bf0614336bae5e878d08ba55d09f810d8.skl</xliffext:skl_file_name><xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version><xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3bb4c51bf0614336bae5e878d08ba55d09f810d8</xliffext:ms.openlocfilehash><xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ba7e452ac39d7f09a5646044b44de0e1cdc54982</xliffext:ms.sourcegitcommit><xliffext:ms.openlocfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">learn-pr\azure\app-service-autoscale-rules\includes\4-identify-factors.md</xliffext:ms.openlocfilepath></header><body><group id="content" extype="content"><trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Autoscaling enables you to specify the conditions under which a web app should be scaled out, and back in again.</source>
        </trans-unit><trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Effective autoscaling ensures sufficient resources are available to handle large volumes of requests at peak times, while managing costs when the demand drops.</source>
        </trans-unit><trans-unit id="103" translate="yes" xml:space="preserve">
          <source>You can configure autoscaling to detect when to scale in and out according to a combination of factors, based on resource usage.</source>
        </trans-unit><trans-unit id="104" translate="yes" xml:space="preserve">
          <source>You can also configure autoscaling to occur according to a schedule.</source>
        </trans-unit><trans-unit id="105" translate="yes" xml:space="preserve">
          <source>In this unit, you'll learn how to specify the factors that can be used to autoscale a service.</source>
        </trans-unit><trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Autoscaling and the App Service Plan</source>
        </trans-unit><trans-unit id="107" translate="yes" xml:space="preserve">
          <source>When you create a web app, you also create an App Service Plan.</source>
        </trans-unit><trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The App Service Plan defines the operating system (Windows or Linux) used to host the web app.</source>
        </trans-unit><trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The Pricing Tier of the plan specifies the hardware available (memory capacity, CPU processing capacity, disk storage), and other services, such as regular backups for each instance of the web app.</source>
        </trans-unit><trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Autoscaling is a feature of the App Service Plan used by the web app.</source>
        </trans-unit><trans-unit id="111" translate="yes" xml:space="preserve">
          <source>When the web app scales out, Azure starts new instances of the hardware defined by the App Service Plan to the app.</source>
        </trans-unit><trans-unit id="112" translate="yes" xml:space="preserve">
          <source>To prevent runaway autoscaling, an App Service Plan has an instance limit.</source>
        </trans-unit><trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Plans in more expensive pricing tiers have a higher limit.</source>
        </trans-unit><trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Autoscaling cannot create more instances than this limit.</source>
        </trans-unit><trans-unit id="115" translate="yes" xml:space="preserve">
          <source>As an example, the Standard series of service plans support up to 10 instances, and cost up to $0.40/hour for each instance.</source>
        </trans-unit><trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The Premium series of service plans enable 20 instances, at a price of up to $0.80/hour for each instance.</source>
        </trans-unit><trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The Isolated service plans allow 100 instances, and cost $1.60/hour for each instance.</source>
        </trans-unit><trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Not all App Service Plan pricing tiers support autoscaling.</source>
        </trans-unit><trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Autoscale conditions</source>
        </trans-unit><trans-unit id="120" translate="yes" xml:space="preserve">
          <source>You indicate how to autoscale by creating autoscale conditions.</source>
        </trans-unit><trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Azure provides two options for autoscaling:</source>
        </trans-unit><trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Scale based on a metric, such as the length of the disk queue, or the number of HTTP requests awaiting processing,</source>
        </trans-unit><trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Scale to a specific instance count according to a schedule.</source>
        </trans-unit><trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For example, you can arrange to scale out at a particular time of day, or on a specific date or day of the week.</source>
        </trans-unit><trans-unit id="125" translate="yes" xml:space="preserve">
          <source>You also specify an end date, and the system will scale back in at this time.</source>
        </trans-unit><trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Scaling to a specific instance count only enables you to scale out to a defined number of instances.</source>
        </trans-unit><trans-unit id="127" translate="yes" xml:space="preserve">
          <source>If you need to scale out incrementally, you can combine metric and schedule-based autoscaling in the same autocale condition.</source>
        </trans-unit><trans-unit id="128" translate="yes" xml:space="preserve">
          <source>So, you could arrange for the system to scale out if the number of HTTP requests exceeds some threshold, but only between certain hours of the day.</source>
        </trans-unit><trans-unit id="129" translate="yes" xml:space="preserve">
          <source>You can create multiple autoscale conditions to handle different schedules and metrics.</source>
        </trans-unit><trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Azure will autoscale your service when any of these conditions apply.</source>
        </trans-unit><trans-unit id="131" translate="yes" xml:space="preserve">
          <source>An App Service Plan also has a default condition that will be used if none of the other conditions are applicable.</source>
        </trans-unit><trans-unit id="132" translate="yes" xml:space="preserve">
          <source>This condition is always active and doesn't have a schedule.</source>
        </trans-unit><trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Metrics for autoscale rules</source>
        </trans-unit><trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Autoscaling by metric requires that you define one or more autoscale rules.</source>
        </trans-unit><trans-unit id="135" translate="yes" xml:space="preserve">
          <source>An autoscale rule specifies a metric to monitor, and how autoscaling should respond when this metric crosses a defined threshold.</source>
        </trans-unit><trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The metrics you can monitor for a web app are:</source>
        </trans-unit><trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CPU Percentage<ept id="p1">**</ept>.</source>
        </trans-unit><trans-unit id="138" translate="yes" xml:space="preserve">
          <source>This metric is an indication of the CPU utilization across all instances.</source>
        </trans-unit><trans-unit id="139" translate="yes" xml:space="preserve">
          <source>A high value shows that instances are becoming CPU-bound, which could cause delays in processing client requests.</source>
        </trans-unit><trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Memory Percentage<ept id="p1">**</ept>.</source>
        </trans-unit><trans-unit id="141" translate="yes" xml:space="preserve">
          <source>This metric captures the memory occupancy of the application across all instances.</source>
        </trans-unit><trans-unit id="142" translate="yes" xml:space="preserve">
          <source>A high value indicates that free memory could be running low, and could cause one or more instances to fail.</source>
        </trans-unit><trans-unit id="143" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Disk Queue Length<ept id="p1">**</ept>.</source>
        </trans-unit><trans-unit id="144" translate="yes" xml:space="preserve">
          <source>This metric is a measure of the number of outstanding I/O requests across all instances.</source>
        </trans-unit><trans-unit id="145" translate="yes" xml:space="preserve">
          <source>A high value means that disk contention could be occurring.</source>
        </trans-unit><trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Http Queue Length<ept id="p1">**</ept>.</source>
        </trans-unit><trans-unit id="147" translate="yes" xml:space="preserve">
          <source>This metric shows how many client requests are waiting for processing by the web app.</source>
        </trans-unit><trans-unit id="148" translate="yes" xml:space="preserve">
          <source>If this number is large, client requests might fail with HTTP 408 (Timeout) errors.</source>
        </trans-unit><trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Data In<ept id="p1">**</ept>.</source>
        </trans-unit><trans-unit id="150" translate="yes" xml:space="preserve">
          <source>This metric is the number of bytes received across all instances.</source>
        </trans-unit><trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Data Out<ept id="p1">**</ept>. This metric is te number of bytes sent by all instances.</source>
        </trans-unit><trans-unit id="152" translate="yes" xml:space="preserve">
          <source>You can also scale based on metrics for other Azure services.</source>
        </trans-unit><trans-unit id="153" translate="yes" xml:space="preserve">
          <source>For example, if the web app processes requests received from a Service Bus Queue, you might want to spin up additional instances of a web app if the number of items held in an Azure Service Bus Queue exceeds a critical length.</source>
        </trans-unit><trans-unit id="154" translate="yes" xml:space="preserve">
          <source>How an autoscale rule analyzes metrics</source>
        </trans-unit><trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Autoscaling works by analyzing trends in metric values over time across and all instances.</source>
        </trans-unit><trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Analysis is a multistep process.</source>
        </trans-unit><trans-unit id="157" translate="yes" xml:space="preserve">
          <source>In the first step, an autoscale rule aggregates the values retrieved for a metric for all instances across a period of time known as the <bpt id="p1">*</bpt>time grain<ept id="p1">*</ept>.</source>
        </trans-unit><trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Each metric has its own intrinsic time grain, but in most cases this period is 1 minute.</source>
        </trans-unit><trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The aggregated value is known as the <bpt id="p1">*</bpt>time aggregation<ept id="p1">*</ept>.</source>
        </trans-unit><trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The options available are <bpt id="p1">*</bpt>Average<ept id="p1">*</ept>, <bpt id="p2">*</bpt>Minimum<ept id="p2">*</ept>, <bpt id="p3">*</bpt>Maximum<ept id="p3">*</ept>, <bpt id="p4">*</bpt>Total<ept id="p4">*</ept>, <bpt id="p5">*</bpt>Last<ept id="p5">*</ept>, and <bpt id="p6">*</bpt>Count<ept id="p6">*</ept>.</source>
        </trans-unit><trans-unit id="161" translate="yes" xml:space="preserve">
          <source>An interval of one minute is a very short interval in which to determine whether any change in metric is long-lasting enough to make autoscaling worthwhile.</source>
        </trans-unit><trans-unit id="162" translate="yes" xml:space="preserve">
          <source>So, an autoscale rule performs a second step that performs a further aggregation of the value calculated by the <bpt id="p1">*</bpt>time aggregation<ept id="p1">*</ept> over a longer, user-specified period, known as the <bpt id="p2">*</bpt>Duration<ept id="p2">*</ept>.</source>
        </trans-unit><trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The minimum <bpt id="p1">*</bpt>Duration<ept id="p1">*</ept> is 5 minutes.</source>
        </trans-unit><trans-unit id="164" translate="yes" xml:space="preserve">
          <source>If the <bpt id="p1">*</bpt>Duration<ept id="p1">*</ept> is set to 10 minutes for example, the autoscale rule will aggregate the 10 values calculated for the <bpt id="p2">*</bpt>time grain<ept id="p2">*</ept>.</source>
        </trans-unit><trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The aggregation calculation for the <bpt id="p1">*</bpt>Duration<ept id="p1">*</ept> can be different for that of the <bpt id="p2">*</bpt>time grain<ept id="p2">*</ept>.</source>
        </trans-unit><trans-unit id="166" translate="yes" xml:space="preserve">
          <source>For example, if the <bpt id="p1">*</bpt>time aggregation<ept id="p1">*</ept> is <bpt id="p2">*</bpt>Average<ept id="p2">*</ept> and the statistic gathered is <bpt id="p3">*</bpt>CPU Percentage<ept id="p3">*</ept> across a one-minute <bpt id="p4">*</bpt>time grain<ept id="p4">*</ept>, each minute the average CPU percentage utilization across all instances for that minute will be calculated.</source>
        </trans-unit><trans-unit id="167" translate="yes" xml:space="preserve">
          <source>If the <bpt id="p1">*</bpt>time grain statistic<ept id="p1">*</ept> is set to <bpt id="p2">*</bpt>Maximum<ept id="p2">*</ept>, and the <bpt id="p3">*</bpt>Duration<ept id="p3">*</ept> of the rule is set to 10 minutes, the maximum of the 10 average values for the CPU percentage utilization will be used to determine whether the rule threshold has been crossed.</source>
        </trans-unit><trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Autoscale actions</source>
        </trans-unit><trans-unit id="169" translate="yes" xml:space="preserve">
          <source>When an autoscale rule detects that a metric has crossed a threshold, it can perform an autoscale action.</source>
        </trans-unit><trans-unit id="170" translate="yes" xml:space="preserve">
          <source>An autoscale action can be <bpt id="p1">*</bpt>scale-out<ept id="p1">*</ept> or <bpt id="p2">*</bpt>scale-in<ept id="p2">*</ept>.</source>
        </trans-unit><trans-unit id="171" translate="yes" xml:space="preserve">
          <source>A scale-out action increases the number of instances, and a scale-in action reduces the instance count.</source>
        </trans-unit><trans-unit id="172" translate="yes" xml:space="preserve">
          <source>An autoscale action uses an operator (such as <bpt id="p1">*</bpt>less than<ept id="p1">*</ept>, <bpt id="p2">*</bpt>greater than<ept id="p2">*</ept>, <bpt id="p3">*</bpt>equal to<ept id="p3">*</ept>, and so on) to determine how to react to the threshold.</source>
        </trans-unit><trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Scale-out actions typically use the <bpt id="p1">*</bpt>greater than<ept id="p1">*</ept> operator to compare the metric value to the threshold.</source>
        </trans-unit><trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Scale-in actions tend to compare the metric value to the threshold with the <bpt id="p1">*</bpt>less than<ept id="p1">*</ept> operator.</source>
        </trans-unit><trans-unit id="175" translate="yes" xml:space="preserve">
          <source>An autoscale action can also set the instance count to a specific level, rather than incrementing or decrementing the number available.</source>
        </trans-unit><trans-unit id="176" translate="yes" xml:space="preserve">
          <source>An autoscale action has a <bpt id="p1">*</bpt>cool down<ept id="p1">*</ept> period, specified in minutes.</source>
        </trans-unit><trans-unit id="177" translate="yes" xml:space="preserve">
          <source>During this interval, the scale rule won't be triggered again.</source>
        </trans-unit><trans-unit id="178" translate="yes" xml:space="preserve">
          <source>This is to allow the system to stabilize between autoscale events.</source>
        </trans-unit><trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Remember that it takes time to start up or shut down instances, and so any metrics gathered might not show any significant changes for several minutes.</source>
        </trans-unit><trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The minimum cool down period is five minutes.</source>
        </trans-unit><trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Pairing autoscale rules</source>
        </trans-unit><trans-unit id="182" translate="yes" xml:space="preserve">
          <source>You should plan for scaling-in when a workload decreases.</source>
        </trans-unit><trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Consider defining autoscale rules in pairs in the same autoscale condition.</source>
        </trans-unit><trans-unit id="184" translate="yes" xml:space="preserve">
          <source>One autoscale rule should indicate how to scale the system out when a metric exceeds an upper threshold.</source>
        </trans-unit><trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The the other rule should define how to scale the system back in again when the same metric drops below a lower threshold.</source>
        </trans-unit><trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Combining autoscale rules</source>
        </trans-unit><trans-unit id="187" translate="yes" xml:space="preserve">
          <source>A single autoscale condition can contain several autoscale rules (for example, a scale-out rule and the corresponding scale-in rule).</source>
        </trans-unit><trans-unit id="188" translate="yes" xml:space="preserve">
          <source>However, the autoscale rules in an autoscale condition don't have to be directly related.</source>
        </trans-unit><trans-unit id="189" translate="yes" xml:space="preserve">
          <source>You could define the following four rules in the same autoscale condition:</source>
        </trans-unit><trans-unit id="190" translate="yes" xml:space="preserve">
          <source>If the HTTP queue length exceeds 10, scale out by 1</source>
        </trans-unit><trans-unit id="191" translate="yes" xml:space="preserve">
          <source>If the CPU utilization exceeds 70%, scale out by 1</source>
        </trans-unit><trans-unit id="192" translate="yes" xml:space="preserve">
          <source>If the HTTP queue length is zero, scale in by 1</source>
        </trans-unit><trans-unit id="193" translate="yes" xml:space="preserve">
          <source>If the CPU utilization drops below 50%, scale in by 1</source>
        </trans-unit><trans-unit id="194" translate="yes" xml:space="preserve">
          <source>When determining whether to scale out, the autoscale action will be performed if <bpt id="p1">**</bpt>any<ept id="p1">**</ept> of the scale-out rules are met (HTTP queue length exceeds 10 <bpt id="p2">**</bpt>or<ept id="p2">**</ept> CPU utilization exceeds 70%).</source>
        </trans-unit><trans-unit id="195" translate="yes" xml:space="preserve">
          <source>When scaling in, the autoscale action will run <bpt id="p1">**</bpt>only if all<ept id="p1">**</ept> of the scale-in rules are met (HTTP queue length drops to zero <bpt id="p2">**</bpt>and<ept id="p2">**</ept> CPU utilization falls below 50%).</source>
        </trans-unit><trans-unit id="196" translate="yes" xml:space="preserve">
          <source>If you need to scale in if only one the scale-in rules are met, you must define the rules in separate autoscale conditions.</source>
        </trans-unit></group></body></file></xliff>