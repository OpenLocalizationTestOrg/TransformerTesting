<?xml version="1.0"?><xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd"><file datatype="xml" original="3-creating-vaults-storing-secrets.md" source-language="en-US" target-language="en-US"><header><tool tool-id="mdxliff" tool-name="mdxliff"  tool-company="Microsoft" /><xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3-creating-vaults-storing-secrets.60857d.98aab4d245f76690f396e9c0cb07e8fa508ef6f9.skl</xliffext:skl_file_name><xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version><xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">98aab4d245f76690f396e9c0cb07e8fa508ef6f9</xliffext:ms.openlocfilehash><xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ba7e452ac39d7f09a5646044b44de0e1cdc54982</xliffext:ms.sourcegitcommit><xliffext:ms.openlocfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">learn-pr\azure\manage-secrets-with-azure-key-vault\includes\3-creating-vaults-storing-secrets.md</xliffext:ms.openlocfilepath></header><body><group id="content" extype="content"><trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Creating Key Vaults for your applications</source>
        </trans-unit><trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Good practice is to create a separate vault for each deployment environment of each of your applications, such as development, test, and production.</source>
        </trans-unit><trans-unit id="103" translate="yes" xml:space="preserve">
          <source>It's possible to use vaults to share secrets across multiple apps, but the impact of an attacker gaining read access to a vault increases with the number of secrets in the vault.</source>
        </trans-unit><trans-unit id="104" translate="yes" xml:space="preserve">
          <source>If you use the same names for secrets across different environments for an application, the only environment-specific configuration that has to change in your app is the vault URL.</source>
        </trans-unit><trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Creating a vault requires no initial configuration.</source>
        </trans-unit><trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Your user identity is automatically granted the full set of secret management permissions and you can start adding secrets immediately.</source>
        </trans-unit><trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Once you have a vault, adding and managing secrets can be done from any Azure administrative interface, including the Azure portal, the Azure CLI, and Azure PowerShell.</source>
        </trans-unit><trans-unit id="108" translate="yes" xml:space="preserve">
          <source>When you set up your application to use the vault, you'll need to assign the correct permissions to it; we'll see that in the next unit.</source>
        </trans-unit><trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Vault authentication and permissions</source>
        </trans-unit><trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Azure Key Vault's API uses Azure Active Directory to authenticate users and applications.</source>
        </trans-unit><trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Vault access policies are based on <bpt id="p1">*</bpt>actions<ept id="p1">*</ept>, and are applied across an entire vault.</source>
        </trans-unit><trans-unit id="112" translate="yes" xml:space="preserve">
          <source>For example, an application with <bpt id="p1">**</bpt>Get<ept id="p1">**</ept> (read secret values), <bpt id="p2">**</bpt>List<ept id="p2">**</ept> (list names of all secrets), and <bpt id="p3">**</bpt>Set<ept id="p3">**</ept> (create or update secret values) permissions to a vault is able to create secrets, list all secret names, and get and set all secret values in that vault.</source>
        </trans-unit><trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>All<ept id="p1">*</ept> actions performed on a vault require authentication and authorization <ph id="ph1">&amp;mdash;</ph> there is no way to grant any kind of anonymous access.</source>
        </trans-unit><trans-unit id="114" translate="yes" xml:space="preserve">
          <source>When granting vault access to developers and apps, grant only the minimum set of permissions needed.</source>
        </trans-unit><trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Permissions restrictions help avoid accidents caused by code bugs and reduce the impact of stolen credentials or malicious code injected into your app.</source>
        </trans-unit><trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Developers will usually only need <bpt id="p1">**</bpt>Get<ept id="p1">**</ept> and <bpt id="p2">**</bpt>List<ept id="p2">**</ept> permissions to a development-environment vault.</source>
        </trans-unit><trans-unit id="117" translate="yes" xml:space="preserve">
          <source>A lead or senior developer will need full permissions to the vault to change and add secrets when necessary.</source>
        </trans-unit><trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Full permissions to production-environment vaults are typically reserved for senior operations staff.</source>
        </trans-unit><trans-unit id="119" translate="yes" xml:space="preserve">
          <source>For apps, often only <bpt id="p1">**</bpt>Get<ept id="p1">**</ept> permissions are required.</source>
        </trans-unit><trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Some apps may require <bpt id="p1">**</bpt>List<ept id="p1">**</ept> depending on the way the app is implemented.</source>
        </trans-unit><trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The app we'll implement in this module's exercise requires the <bpt id="p1">**</bpt>List<ept id="p1">**</ept> permission because of the technique it uses to read secrets from the vault.</source>
        </trans-unit><trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Given all the trouble the company's been having with application secrets, management has asked you to create a small starter app to set the other developers on the right path.</source>
        </trans-unit><trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The app needs to demonstrate best practices for managing secrets as simply and securely as possible.</source>
        </trans-unit><trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Create the vault and store the secret in it</source>
        </trans-unit><trans-unit id="125" translate="yes" xml:space="preserve">
          <source>To start, you'll create a vault and store one secret.</source>
        </trans-unit><trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Create the vault</source>
        </trans-unit><trans-unit id="127" translate="yes" xml:space="preserve">
          <source>First, we'll create the vault and store our secret in it.</source>
        </trans-unit><trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Key Vault names must be globally unique, so you'll need to pick a unique name<ept id="p1">**</ept>.</source>
        </trans-unit><trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Vault names must be 3-24 characters long and contain only alphanumeric characters and dashes.</source>
        </trans-unit><trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Make a note of the vault name you choose, as you'll need it throughout this exercise.</source>
        </trans-unit><trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Run the following command in the Cloud Shell to create your vault.</source>
        </trans-unit><trans-unit id="132" translate="yes" xml:space="preserve">
          <source>When it finishes, you'll see JSON output describing the new vault.</source>
        </trans-unit><trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The command used the pre-created resource group named <bpt id="p1">**</bpt><bpt id="p2">&lt;rgn&gt;</bpt>[sandbox Resource Group]<ept id="p2">&lt;/rgn&gt;</ept><ept id="p1">**</ept>.</source>
        </trans-unit><trans-unit id="134" translate="yes" xml:space="preserve">
          <source>When working with your own subscription, you would want to either create a new resource group, or use an existing one you have previously created.</source>
        </trans-unit><trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Add the secret</source>
        </trans-unit><trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Now add the secret: our secret will be named <bpt id="p1">**</bpt>SecretPassword<ept id="p1">**</ept> with a value of <bpt id="p2">**</bpt>reindeer_flotilla<ept id="p2">**</ept>.</source>
        </trans-unit><trans-unit id="137" translate="yes" xml:space="preserve">
          <source>We'll write the code for our application shortly, but first we need to learn a little bit about how our app is going to authenticate to a vault.</source>
        </trans-unit></group></body></file></xliff>