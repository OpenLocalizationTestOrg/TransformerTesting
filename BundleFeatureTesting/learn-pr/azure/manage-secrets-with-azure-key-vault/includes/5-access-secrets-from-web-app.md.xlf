<?xml version="1.0"?><xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd"><file datatype="xml" original="5-access-secrets-from-web-app.md" source-language="en-US" target-language="en-US"><header><tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1931010" tool-company="Microsoft" /><xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5-access-secrets-from-web-app.38ea774a98592329a2cad55fc31ccac469125ba6.skl</xliffext:skl_file_name><xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version><xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ab27cfc2127dfe8ba10edc34b5839e376effee88</xliffext:ms.openlocfilehash><xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">05/13/2019</xliffext:ms.lasthandoff><xliffext:ms.openlocfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">learn-pr\azure\manage-secrets-with-azure-key-vault\includes\5-access-secrets-from-web-app.md</xliffext:ms.openlocfilepath></header><body><group id="content" extype="content"><trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Now that you know how enabling managed identities for Azure resources creates an identity for our app to use for authentication, we'll create an app that uses that identity to access secrets in the vault.</source>
        </trans-unit><trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Reading secrets in an ASP.NET Core app</source>
        </trans-unit><trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The Azure Key Vault API is a REST API that handles all management and usage of keys and vaults.</source>
        </trans-unit><trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Each secret in a vault has a unique URL, and secret values are retrieved with HTTP GET requests.</source>
        </trans-unit><trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The official Key Vault client for .NET Core is the <ph id="ph1">`KeyVaultClient`</ph> class in the Microsoft.Azure.KeyVault NuGet package.</source>
        </trans-unit><trans-unit id="106" translate="yes" xml:space="preserve">
          <source>You don't need to use it directly, though <ph id="ph1">&amp;mdash;</ph> with ASP.NET Core's <ph id="ph2">`AddAzureKeyVault`</ph> method, you can load all the secrets from a vault into the Configuration API at startup.</source>
        </trans-unit><trans-unit id="107" translate="yes" xml:space="preserve">
          <source>This technique enables you to access all of your secrets by name using the same <ph id="ph1">`IConfiguration`</ph> interface you use for the rest of your configuration.</source>
        </trans-unit><trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Apps that use <ph id="ph1">`AddAzureKeyVault`</ph> require both <bpt id="p1">**</bpt>Get<ept id="p1">**</ept> and <bpt id="p2">**</bpt>List<ept id="p2">**</ept> permissions to the vault.</source>
        </trans-unit><trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Regardless of the framework or language you use to build your app, you should design it to cache secret values locally or load them into memory at startup unless you have a specific reason not to.</source>
        </trans-unit><trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Reading them directly from the vault every time you need them is unnecessarily slow and expensive.</source>
        </trans-unit><trans-unit id="111" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`AddAzureKeyVault`</ph> only requires the vault name as an input, which we'll get from our local app configuration.</source>
        </trans-unit><trans-unit id="112" translate="yes" xml:space="preserve">
          <source>It also automatically handles managed identity authentication <ph id="ph1">&amp;mdash;</ph> when used in an app deployed to Azure App Service with managed identities for Azure resources enabled, it will detect the managed identities token service and use it to authenticate.</source>
        </trans-unit><trans-unit id="113" translate="yes" xml:space="preserve">
          <source>It's a good fit for most scenarios and implements all best practices, and we'll use it in this unit's exercise.</source>
        </trans-unit><trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Reading secrets in a Node.js app</source>
        </trans-unit><trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The Azure Key Vault API is a REST API that handles all management and usage of keys and vaults.</source>
        </trans-unit><trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Each secret in a vault has a unique URL, and secret values are retrieved with HTTP GET requests.</source>
        </trans-unit><trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The official Key Vault client for Node.js apps is the <ph id="ph1">`KeyVaultClient`</ph> class in the <ph id="ph2">`azure-keyvault`</ph> npm package.</source>
        </trans-unit><trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Apps that include secret names in their configuration or code will generally only need to use its <ph id="ph1">`getSecret`</ph> method, which loads a secret value given its name.</source>
        </trans-unit><trans-unit id="119" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`getSecret`</ph> requires your app's identity to have the <bpt id="p1">**</bpt>Get<ept id="p1">**</ept> permission on the vault.</source>
        </trans-unit><trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Apps designed to load all secrets from a vault will also use the <ph id="ph1">`getSecrets`</ph> method, which loads a list of secrets and requires the <bpt id="p1">**</bpt>List<ept id="p1">**</ept> permission.</source>
        </trans-unit><trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Before your app can create a <ph id="ph1">`KeyVaultClient`</ph> instance, it must get a credential object by authenticating to the vault.</source>
        </trans-unit><trans-unit id="122" translate="yes" xml:space="preserve">
          <source>To authenticate, use the one of the login functions provided by the <ph id="ph1">`ms-rest-azure`</ph> npm package.</source>
        </trans-unit><trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Each of these functions will return a credential object that can be used to create a <ph id="ph1">`KeyVaultClient`</ph>.</source>
        </trans-unit><trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`loginWithAppServiceMSI`</ph> function will automatically use the managed identity credentials that App Service makes available to your app via environment variables.</source>
        </trans-unit><trans-unit id="125" translate="yes" xml:space="preserve">
          <source>For test environments or other non-App Service environments where your app does not have access to a managed identity, you can manually create a service principal for your app and use the <ph id="ph1">`loginWithServicePrincipalSecret`</ph> function to authenticate.</source>
        </trans-unit><trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Regardless of the framework or language you use to build your app, you should design it to cache secret values locally or load them into memory at startup unless you have a specific reason not to.</source>
        </trans-unit><trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Reading them directly from the vault every time you need them is unnecessarily slow and expensive.</source>
        </trans-unit><trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Handling secrets in an app</source>
        </trans-unit><trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Once a secret is loaded into your app, it's up to your app to handle it securely.</source>
        </trans-unit><trans-unit id="130" translate="yes" xml:space="preserve">
          <source>In the app we build in this module, we write our secret value out to the client response and view it in a web browser to demonstrate that it has been loaded successfully.</source>
        </trans-unit><trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Returning a secret value to the client is <bpt id="p2">*</bpt>not<ept id="p2">*</ept> something you'd normally do!<ept id="p1">**</ept></source>
        </trans-unit><trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Usually, you'll use secrets to do things like initialize client libraries for databases or remote APIs.</source>
        </trans-unit><trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Always carefully review your code to ensure that your app never writes secrets to any kind of output, including logs, storage, and responses.</source>
        </trans-unit><trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Exercise</source>
        </trans-unit><trans-unit id="135" translate="yes" xml:space="preserve">
          <source>We'll create a new ASP.NET Core web API and use <ph id="ph1">`AddAzureKeyVault`</ph> to load the secret from our vault.</source>
        </trans-unit><trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Create the app</source>
        </trans-unit><trans-unit id="137" translate="yes" xml:space="preserve">
          <source>In the Azure Cloud Shell terminal, run the following to create a new ASP.NET Core web API application and open it in the editor.</source>
        </trans-unit><trans-unit id="138" translate="yes" xml:space="preserve">
          <source>After the editor loads, run the following commands in the shell to add the NuGet package containing <ph id="ph1">`AddAzureKeyVault`</ph> and restore all of the app's dependencies.</source>
        </trans-unit><trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Add code to load and use secrets</source>
        </trans-unit><trans-unit id="140" translate="yes" xml:space="preserve">
          <source>To demonstrate good usage of Key Vault, we will modify our app to load secrets from the vault at startup.</source>
        </trans-unit><trans-unit id="141" translate="yes" xml:space="preserve">
          <source>We'll also add a new controller with an endpoint that gets our <bpt id="p1">**</bpt>SecretPassword<ept id="p1">**</ept> secret from the vault.</source>
        </trans-unit><trans-unit id="142" translate="yes" xml:space="preserve">
          <source>First, the app startup: Open <ph id="ph1">`Program.cs`</ph>, delete the contents and replace them with the following code:</source>
        </trans-unit><trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Make sure to save files when you're done editing them.</source>
        </trans-unit><trans-unit id="144" translate="yes" xml:space="preserve">
          <source>You can do this either through the "..." menu, or the accelerator key (<bpt id="p1">&lt;kbd&gt;</bpt>Ctrl+S<ept id="p1">&lt;/kbd&gt;</ept> on Windows and Linux, <bpt id="p2">&lt;kbd&gt;</bpt>Cmd+S<ept id="p2">&lt;/kbd&gt;</ept> on macOS).</source>
        </trans-unit><trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The only change from the starter code is the addition of <ph id="ph1">`ConfigureAppConfiguration`</ph>.</source>
        </trans-unit><trans-unit id="146" translate="yes" xml:space="preserve">
          <source>This is where we load the vault name from configuration and call <ph id="ph1">`AddAzureKeyVault`</ph> with it.</source>
        </trans-unit><trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Next, the controller: Create a new file in the <ph id="ph1">`Controllers`</ph> folder called <ph id="ph2">`SecretTestController.cs`</ph> and paste the following code into it.</source>
        </trans-unit><trans-unit id="148" translate="yes" xml:space="preserve">
          <source>To create a new file, use the <ph id="ph1">`touch`</ph> command in the shell.</source>
        </trans-unit><trans-unit id="149" translate="yes" xml:space="preserve">
          <source>In this case, use <ph id="ph1">`touch Controllers/SecretTestController.cs`</ph>.</source>
        </trans-unit><trans-unit id="150" translate="yes" xml:space="preserve">
          <source>You'll need to click the refresh button in the Files pane of the editor to see it there.</source>
        </trans-unit><trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Run <ph id="ph1">`dotnet build`</ph> in the shell to make sure everything compiles.</source>
        </trans-unit><trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The app is ready to run <ph id="ph1">&amp;mdash;</ph> now let's get it into Azure!</source>
        </trans-unit><trans-unit id="153" translate="yes" xml:space="preserve">
          <source>We'll create a new web API with Express.js and use the <ph id="ph1">`azure-keyvault`</ph> and <ph id="ph2">`ms-rest-azure`</ph> packages to load the secret from our vault.</source>
        </trans-unit><trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Create the app</source>
        </trans-unit><trans-unit id="155" translate="yes" xml:space="preserve">
          <source>In the Azure Cloud Shell terminal, run the following to initialize a new Node.js application, install the needed packages, and open a new file in the editor.</source>
        </trans-unit><trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Add code to load and use secrets</source>
        </trans-unit><trans-unit id="157" translate="yes" xml:space="preserve">
          <source>To demonstrate good usage of Key Vault, our app will load secrets from the vault at startup.</source>
        </trans-unit><trans-unit id="158" translate="yes" xml:space="preserve">
          <source>To demonstrate that our secrets have been loaded, we'll create an endpoint that displays the value of the <bpt id="p1">**</bpt>SecretPassword<ept id="p1">**</ept> secret.</source>
        </trans-unit><trans-unit id="159" translate="yes" xml:space="preserve">
          <source>First, paste the following code into the editor to set up the application.</source>
        </trans-unit><trans-unit id="160" translate="yes" xml:space="preserve">
          <source>This will import the necessary packages, set up the port and vault URL configuration, and create a new object to hold the secret names and values.</source>
        </trans-unit><trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Make sure to save files as you work on them, especially when you're finished.</source>
        </trans-unit><trans-unit id="162" translate="yes" xml:space="preserve">
          <source>You can do this either through the "..." menu, or the accelerator key (<bpt id="p1">&lt;kbd&gt;</bpt>Ctrl+S<ept id="p1">&lt;/kbd&gt;</ept> on Windows and Linux, <bpt id="p2">&lt;kbd&gt;</bpt>Cmd+S<ept id="p2">&lt;/kbd&gt;</ept> on macOS).</source>
        </trans-unit><trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Next, we'll add the code to authenticate to the vault and load the secrets.</source>
        </trans-unit><trans-unit id="164" translate="yes" xml:space="preserve">
          <source>We'll add this as two separate functions.</source>
        </trans-unit><trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Insert a couple of blank lines after the code you previously added and then paste in the following code:</source>
        </trans-unit><trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Now create the Express endpoint we'll use to test whether our secret was loaded.</source>
        </trans-unit><trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Paste in this code next:</source>
        </trans-unit><trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Finally, we'll call our functions to load the secrets from our vault, then start the app.</source>
        </trans-unit><trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Paste in this last snippet to complete the application:</source>
        </trans-unit><trans-unit id="170" translate="yes" xml:space="preserve">
          <source>We're finished writing code, so make sure to save the file.</source>
        </trans-unit><trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The app is ready to run <ph id="ph1">&amp;mdash;</ph> now let's get it into Azure!</source>
        </trans-unit></group></body></file></xliff>