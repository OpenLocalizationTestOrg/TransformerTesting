<?xml version="1.0"?><xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd"><file datatype="xml" original="4-detect-transient-errors.md" source-language="en-US" target-language="en-US"><header><tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1931010" tool-company="Microsoft" /><xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4-detect-transient-errors.89d58ffc27bbadb62d7023aadaccecc86a6d84d4.skl</xliffext:skl_file_name><xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version><xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9da7f4492809e92dec2552e1c0da9be0fa28e7ee</xliffext:ms.openlocfilehash><xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">05/13/2019</xliffext:ms.lasthandoff><xliffext:ms.openlocfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">learn-pr\azure\handle-transient-errors-in-your-app\includes\4-detect-transient-errors.md</xliffext:ms.openlocfilepath></header><body><group id="content" extype="content"><trans-unit id="101" translate="yes" xml:space="preserve">
          <source>After exploring the possible transient faults your company's applications could face, you want to add code to detect them.</source>
        </trans-unit><trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Any application that makes use of external services should be built to detect issues when they arise.</source>
        </trans-unit><trans-unit id="103" translate="yes" xml:space="preserve">
          <source>If the cloud-based service is well-written and designed, it might come with a well-documented transient fault contract that gives your app some steps that it can take to handle and recover from the fault.</source>
        </trans-unit><trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Representational State Transfer (REST), is an approach for writing client and server application.</source>
        </trans-unit><trans-unit id="105" translate="yes" xml:space="preserve">
          <source>RESTful services are stateless, the client and server don't keep track of the state of the other.</source>
        </trans-unit><trans-unit id="106" translate="yes" xml:space="preserve">
          <source>A REST request is sent from a client, and a response is returned.</source>
        </trans-unit><trans-unit id="107" translate="yes" xml:space="preserve">
          <source>REST requests are normally sent via HTTP requests (for example GET and POST), so standard HTTP errors can be returned in the response for example:</source>
        </trans-unit><trans-unit id="108" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>404<ept id="p1">**</ept>: URI unavailable, the server can't find the requested resource on the server</source>
        </trans-unit><trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>408<ept id="p1">**</ept>: Request timeout, client hasn't sent a request in time for the server</source>
        </trans-unit><trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>449<ept id="p1">**</ept>: Microsoft-specific return code, that gives the client information that can be used to retry the operation</source>
        </trans-unit><trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>503<ept id="p1">**</ept>: The service is temporarily unable to handle the request received, it could be possible future request mighty work</source>
        </trans-unit><trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>504<ept id="p1">**</ept>: Gateway timeout, upstream services have been unable to respond quick enough</source>
        </trans-unit><trans-unit id="113" translate="yes" xml:space="preserve">
          <source>For your companies apps that make use of REST services, these transient errors need to be handled.</source>
        </trans-unit><trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Your company has made the decision to use Azure, and depending on the features being used, Azure has some well-defined errors that need to be handled.</source>
        </trans-unit><trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Azure connections in APS.NET can receive WebExceptionStatus.ConnectionClosed, WebExceptionStatus.Timeout, or WebExceptionStatus.RequestCanceled responses.</source>
        </trans-unit><trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Azure Cosmos DB databases are RESTful services, so can return all the above plus a specific <bpt id="p1">**</bpt>429<ept id="p1">**</ept> error code that notifies the client that the request rate is too high.</source>
        </trans-unit><trans-unit id="117" translate="yes" xml:space="preserve">
          <source>This error can be returned when the throughput is too low, or the number and size of requests are too high.</source>
        </trans-unit><trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Azure SQL Database also has well-defined error codes, for example, <bpt id="p1">**</bpt>40501<ept id="p1">**</ept>: The service is currently busy.</source>
        </trans-unit><trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Retry the request after <bpt id="p1">**</bpt>X<ept id="p1">**</ept> seconds.</source>
        </trans-unit><trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Your team's chat app implements a virtual white board.</source>
        </trans-unit><trans-unit id="121" translate="yes" xml:space="preserve">
          <source>People can leave messages for the whole team to read.</source>
        </trans-unit><trans-unit id="122" translate="yes" xml:space="preserve">
          <source>It uses a Cosmos DB database as the message store, created with the MongoDB API.</source>
        </trans-unit><trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The team could quickly create clients for the chat app in C# .Net Core, Java, and Node using their previous MongoDB knowledge.</source>
        </trans-unit><trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The chat app should detect the following types of errors:</source>
        </trans-unit><trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Lost connections to Cosmos DB</source>
        </trans-unit><trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Any service unavailability</source>
        </trans-unit><trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Handle exceptions raised by other parts of the app</source>
        </trans-unit><trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Whatever the error returned by a service, apps need to catch a returned error, check what it is, and then take appropriate steps to handle it.</source>
        </trans-unit><trans-unit id="129" translate="yes" xml:space="preserve">
          <source>All programming languages have features available to developers to handle errors in code.</source>
        </trans-unit><trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Detecting errors in code</source>
        </trans-unit><trans-unit id="131" translate="yes" xml:space="preserve">
          <source>In C# the mechanism for detecting and handling errors is a <ph id="ph1">`try catch`</ph> block.</source>
        </trans-unit><trans-unit id="132" translate="yes" xml:space="preserve">
          <source>You can define different ways to handle different errors by specifying the exception you wish to handle.</source>
        </trans-unit><trans-unit id="133" translate="yes" xml:space="preserve">
          <source>All errors inherit from the Exception class.</source>
        </trans-unit><trans-unit id="134" translate="yes" xml:space="preserve">
          <source>When defining <ph id="ph1">`catch`</ph> blocks, they should be defined in order of most specific to most general.</source>
        </trans-unit><trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The last <ph id="ph1">`catch`</ph> block should be similar to the following block:</source>
        </trans-unit><trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Using this <ph id="ph1">`catch`</ph> block enables a program to handle unexpected errors, and do additional logging if necessary.</source>
        </trans-unit><trans-unit id="137" translate="yes" xml:space="preserve">
          <source>In your company's chat app there are transient errors that can be returned from the MongoDB database:</source>
        </trans-unit><trans-unit id="138" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`MongoDB.Driver.MongoConnectionException`</ph>: A password, credential, or other Mongo DB issue has occurred</source>
        </trans-unit><trans-unit id="139" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`System.TimeoutException`</ph>: A problem with the database connection has occurred</source>
        </trans-unit><trans-unit id="140" translate="yes" xml:space="preserve">
          <source>In Java the mechanism for detecting and handling errors is a <ph id="ph1">`try catch`</ph> block.</source>
        </trans-unit><trans-unit id="141" translate="yes" xml:space="preserve">
          <source>You can define a number of catches specifying the exception you wish to handle.</source>
        </trans-unit><trans-unit id="142" translate="yes" xml:space="preserve">
          <source>All errors inherit from the Exception class.</source>
        </trans-unit><trans-unit id="143" translate="yes" xml:space="preserve">
          <source>When defining <ph id="ph1">`catch`</ph> blocks, they should be defined in order of most specific to most general.</source>
        </trans-unit><trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The last <ph id="ph1">`catch`</ph> block should be:</source>
        </trans-unit><trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Using this <ph id="ph1">`catch`</ph> block enables a program to handle unexpected errors, and do additional logging if necessary.</source>
        </trans-unit><trans-unit id="146" translate="yes" xml:space="preserve">
          <source>In your company's chat app there are transient errors that can be returned from the MongoDB database:</source>
        </trans-unit><trans-unit id="147" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`com.mongodb.MongoCommandException`</ph>: A problem with the database connection has occurred, the command can't be executed</source>
        </trans-unit><trans-unit id="148" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`com.mongodb.MongoSecurityException`</ph>: A password or credential issue has occurred, or the database is unreachable</source>
        </trans-unit><trans-unit id="149" translate="yes" xml:space="preserve">
          <source>In Node the mechanism for detecting and handling errors depends on the context.</source>
        </trans-unit><trans-unit id="150" translate="yes" xml:space="preserve">
          <source>There's a <ph id="ph1">`try catch`</ph> block for synchronous code.</source>
        </trans-unit><trans-unit id="151" translate="yes" xml:space="preserve">
          <source>If an exception is raised while the code is running, you can define a number of catches specifying the exception you wish to handle.</source>
        </trans-unit><trans-unit id="152" translate="yes" xml:space="preserve">
          <source>However, Node is built to be asynchronous.</source>
        </trans-unit><trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The language defines the concept of promises to be able handle errors that happen in asynchronous code.</source>
        </trans-unit><trans-unit id="154" translate="yes" xml:space="preserve">
          <source>If you call an async function, you can use a catch() promise that will execute if any errors are returned by the function.</source>
        </trans-unit><trans-unit id="155" translate="yes" xml:space="preserve">
          <source>In your company's chat app there are transient errors that can be returned from the MongoDB database:</source>
        </trans-unit><trans-unit id="156" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`MongoNetworkError`</ph>:  A problem with the database connection has occurred</source>
        </trans-unit><trans-unit id="157" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`MongoError`</ph>: A password, credential, or other database issue has occurred</source>
        </trans-unit><trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Assuming an error is detected, and the error is classified as transient, the app needs to decide if it can retry the operation in a safe way for the app and for the service.</source>
        </trans-unit></group></body></file></xliff>