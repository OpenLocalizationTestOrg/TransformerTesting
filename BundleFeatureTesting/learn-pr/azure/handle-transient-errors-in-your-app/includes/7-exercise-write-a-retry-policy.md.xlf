<?xml version="1.0"?><xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd"><file datatype="xml" original="7-exercise-write-a-retry-policy.md" source-language="en-US" target-language="en-US"><header><tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1931010" tool-company="Microsoft" /><xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7-exercise-write-a-retry-policy.20e53972830e4d33c4adcaaa12e754c9b329d5ab.skl</xliffext:skl_file_name><xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version><xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8286f12914e56500c1874f34bfc2fb432c264e1d</xliffext:ms.openlocfilehash><xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">05/13/2019</xliffext:ms.lasthandoff><xliffext:ms.openlocfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">learn-pr\azure\handle-transient-errors-in-your-app\includes\7-exercise-write-a-retry-policy.md</xliffext:ms.openlocfilepath></header><body><group id="content" extype="content"><trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Your team's chat app has been improved to detect errors.</source>
        </trans-unit><trans-unit id="102" translate="yes" xml:space="preserve">
          <source>When using a cloud-based database, there are different transient errors that can occur.</source>
        </trans-unit><trans-unit id="103" translate="yes" xml:space="preserve">
          <source>In this exercise, we'll  focus on resolving connection problems by implementing a retry policy.</source>
        </trans-unit><trans-unit id="104" translate="yes" xml:space="preserve">
          <source>If the error is due to database connection issues, we'll adopt the following strategy:</source>
        </trans-unit><trans-unit id="105" translate="yes" xml:space="preserve">
          <source>If the error is network-related, quickly try to reconnect</source>
        </trans-unit><trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Keep retrying to reconnect every 60 seconds</source>
        </trans-unit><trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Retry up to five times</source>
        </trans-unit><trans-unit id="108" translate="yes" xml:space="preserve">
          <source>After five retries, notify the end user of the database problem and quit</source>
        </trans-unit><trans-unit id="109" translate="yes" xml:space="preserve">
          <source>For other unknown errors, quit the app.</source>
        </trans-unit><trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Use a class to implement a retry policy</source>
        </trans-unit><trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Run the following command in the CloudShell to navigate to the C# chatapp-retry folder.</source>
        </trans-unit><trans-unit id="112" translate="yes" xml:space="preserve">
          <source>This version includes your first draft at coding a retry policy class.</source>
        </trans-unit><trans-unit id="113" translate="yes" xml:space="preserve">
          <source>It includes an appsettings.json configuration file to allow system administrators to set the delay and number of retries.</source>
        </trans-unit><trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Open the <bpt id="p1">**</bpt>RetryPolicy<ept id="p1">**</ept> class.</source>
        </trans-unit><trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Take a moment to read through the code in this class.</source>
        </trans-unit><trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>RetryPolicy<ept id="p1">**</ept> class keeps track of the number of retries, and handles adding a delay before code can be retried.</source>
        </trans-unit><trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Most of the logic for our retry policy is in the <ph id="ph1">`CanRetry()`</ph> method:</source>
        </trans-unit><trans-unit id="118" translate="yes" xml:space="preserve">
          <source>After checking the number of retries, the <ph id="ph1">`CanRetry()`</ph> returns a true to the calling code if it is OK to keep retrying, or false if the app should now stop retrying.</source>
        </trans-unit><trans-unit id="119" translate="yes" xml:space="preserve">
          <source>We'll now use this class in our app to implement a retry policy.</source>
        </trans-unit><trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Add a retry policy</source>
        </trans-unit><trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Select the three ellipses (<bpt id="p1">**</bpt>...<ept id="p1">**</ept>) to the top right of the editor and then select <bpt id="p2">**</bpt>Open File ...<ept id="p2">**</ept>. Select  <bpt id="p3">**</bpt>Program.cs<ept id="p3">**</ept> in the file chooser dialog, and press Enter.</source>
        </trans-unit><trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Update the <ph id="ph1">`connectionString`</ph> variable in this class to the value of the connection string of your Cosmos DB database we found earlier.</source>
        </trans-unit><trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Scroll down to the <ph id="ph1">`getAllChats()`</ph> method.</source>
        </trans-unit><trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Add the code to retry the connection in the two MongoDB-specific catch blocks.</source>
        </trans-unit><trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The method should be the following code:</source>
        </trans-unit><trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Define the retries object, and reset it with each call to the database.</source>
        </trans-unit><trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Add a declaration for the retries object before the main method:</source>
        </trans-unit><trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Reset the retries in the while loop of the <ph id="ph1">`Main()`</ph> method in <bpt id="p1">**</bpt>Program.cs<ept id="p1">**</ept>, as shown in the following code snippet.</source>
        </trans-unit><trans-unit id="129" translate="yes" xml:space="preserve">
          <source>To save our changes, select the three ellipses (<bpt id="p1">**</bpt>...<ept id="p1">**</ept>) to the top right of the editor and then select <bpt id="p2">**</bpt>Close Editor<ept id="p2">**</ept> and then <bpt id="p3">**</bpt>Save<ept id="p3">**</ept>.</source>
        </trans-unit><trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Compile and run app.</source>
        </trans-unit><trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The app should compile, and then run, add a new message press N, and then Enter a name and message.</source>
        </trans-unit><trans-unit id="132" translate="yes" xml:space="preserve">
          <source>List all the messages by pressing <bpt id="p1">**</bpt>R<ept id="p1">**</ept> then enter.</source>
        </trans-unit><trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Leave the app running.</source>
        </trans-unit><trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Use a class to implement a retry policy</source>
        </trans-unit><trans-unit id="135" translate="yes" xml:space="preserve">
          <source>In the Cloud Shell navigate to the Java chatapp-retry folder.</source>
        </trans-unit><trans-unit id="136" translate="yes" xml:space="preserve">
          <source>This version includes your first draft at coding a retry policy class.</source>
        </trans-unit><trans-unit id="137" translate="yes" xml:space="preserve">
          <source>It includes a config.properties configuration file to allow system administrators to set the delay and number of retries.</source>
        </trans-unit><trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Open the <bpt id="p1">**</bpt>RetryPolicy<ept id="p1">**</ept> class.</source>
        </trans-unit><trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The class keeps track of the number of retries, and handles adding a delay before code can be retried.</source>
        </trans-unit><trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The main logic in the <ph id="ph1">`canRetry`</ph> method:</source>
        </trans-unit><trans-unit id="141" translate="yes" xml:space="preserve">
          <source>After checking the number of retries the <ph id="ph1">`canRetry`</ph> method will return a true to the calling code if it is OK to keep retrying, or false if the app should now stop.</source>
        </trans-unit><trans-unit id="142" translate="yes" xml:space="preserve">
          <source>You'll now use this class to add a retry policy to the chat app.</source>
        </trans-unit><trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Add a retry policy</source>
        </trans-unit><trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Select the three ellipses (<bpt id="p1">**</bpt>...<ept id="p1">**</ept>) to the top right of the editor and then select <bpt id="p2">**</bpt>Open<ept id="p2">**</ept> in the dialog type <bpt id="p3">**</bpt>javaChat.java<ept id="p3">**</ept>, and press Enter.</source>
        </trans-unit><trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Locate the <ph id="ph1">`printAllMessages()`</ph> method in <bpt id="p1">**</bpt>javaChat.java<ept id="p1">**</ept>.</source>
        </trans-unit><trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Replace the implementation of <ph id="ph1">`printAllMessages`</ph> with the following code.</source>
        </trans-unit><trans-unit id="147" translate="yes" xml:space="preserve">
          <source>This code adds retry logic to the MongoDB catch blocks.</source>
        </trans-unit><trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Add a declaration for the RetryPolicy object before the <ph id="ph1">`Main`</ph> method in <bpt id="p1">**</bpt>javaChat.java<ept id="p1">**</ept>.</source>
        </trans-unit><trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Instantiate the <ph id="ph1">`retries`</ph> variable inside the <ph id="ph2">`Main`</ph> method:</source>
        </trans-unit><trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Add the following line of code at the top of the while loop to reset the retries.</source>
        </trans-unit><trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Select the three ellipses (<bpt id="p1">**</bpt>...<ept id="p1">**</ept>) to the top right of the editor and then select <bpt id="p2">**</bpt>Close<ept id="p2">**</ept> in the window click <bpt id="p3">**</bpt>Save<ept id="p3">**</ept>.</source>
        </trans-unit><trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Build the project using the following command:</source>
        </trans-unit><trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Run the app with the following command in the Cloud Shell.</source>
        </trans-unit><trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Use a function to implement a retry policy</source>
        </trans-unit><trans-unit id="155" translate="yes" xml:space="preserve">
          <source>In the Cloud Shell navigate to the node chatapp-retry folder.</source>
        </trans-unit><trans-unit id="156" translate="yes" xml:space="preserve">
          <source>This version includes your first draft at coding a retry policy class.</source>
        </trans-unit><trans-unit id="157" translate="yes" xml:space="preserve">
          <source>It includes an appsettings.json configuration file to allow system administrators to set the delay and number of retries.</source>
        </trans-unit><trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Download the dependencies.</source>
        </trans-unit><trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Open the <bpt id="p1">**</bpt>retryPolicy.js<ept id="p1">**</ept> script.</source>
        </trans-unit><trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The class keeps track of the number of retries, and handles adding a delay before code can be retried.</source>
        </trans-unit><trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The main logic in the <ph id="ph1">`checkRetries`</ph> function:</source>
        </trans-unit><trans-unit id="162" translate="yes" xml:space="preserve">
          <source>After checking the number of retries the <ph id="ph1">`checkRetries`</ph> method will return a true to the calling code if it is OK to keep retrying, or false if the app should now stop.</source>
        </trans-unit><trans-unit id="163" translate="yes" xml:space="preserve">
          <source>You'll now use this code to add a retry policy to the chat app.</source>
        </trans-unit><trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Add a retry policy</source>
        </trans-unit><trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Select the three ellipses (<bpt id="p1">**</bpt>...<ept id="p1">**</ept>) to the top right of the editor and then select <bpt id="p2">**</bpt>Open<ept id="p2">**</ept> in the dialog type <bpt id="p3">**</bpt>server.js<ept id="p3">**</ept>, and press Enter.</source>
        </trans-unit><trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Scroll down to the mongoose call to connect to the database.</source>
        </trans-unit><trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Add code to use the retry policy inside the catch promise.</source>
        </trans-unit><trans-unit id="168" translate="yes" xml:space="preserve">
          <source>There are a number of ways in javascript to retry the code, for simplicity this example uses recursion.</source>
        </trans-unit><trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Replace the connection code with the following.</source>
        </trans-unit><trans-unit id="170" translate="yes" xml:space="preserve">
          <source>There are other retry npm packages, including polly-js, that can simplify the code and offer additional features like exponential back-off.</source>
        </trans-unit><trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Define the retries object, and include retryPolicy.js at line 6:</source>
        </trans-unit><trans-unit id="172" translate="yes" xml:space="preserve">
          <source>By adding this code:</source>
        </trans-unit><trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Select the three ellipses (<bpt id="p1">**</bpt>...<ept id="p1">**</ept>) to the top right of the editor and then select <bpt id="p2">**</bpt>Close<ept id="p2">**</ept> in the window click <bpt id="p3">**</bpt>Save<ept id="p3">**</ept>.</source>
        </trans-unit><trans-unit id="174" translate="yes" xml:space="preserve">
          <source>If you haven't got the browser open from the previous exercise run:</source>
        </trans-unit><trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Run the node app with:</source>
        </trans-unit><trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Click the returned hyperlink from the previous step.</source>
        </trans-unit><trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Add some messages, and refresh the page.</source>
        </trans-unit><trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Leave the app running.</source>
        </trans-unit><trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Test the retry code</source>
        </trans-unit><trans-unit id="180" translate="yes" xml:space="preserve">
          <source>If the firewall is still switched on for the Cosmos DB, the chat app can't connect to the database.</source>
        </trans-unit><trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Otherwise, if the chat app is still working then follow these steps to switch on the firewall.</source>
        </trans-unit><trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Sign into the <bpt id="p1">[</bpt>Azure portal<ept id="p1">](https://portal.azure.com/learn.docs.microsoft.com?azure-portal=true)</ept> using the same account you used to activate the sandbox.</source>
        </trans-unit><trans-unit id="183" translate="yes" xml:space="preserve">
          <source>In the resources list on the left-hand side of the portal, select <bpt id="p1">**</bpt>Azure Cosmos DB<ept id="p1">**</ept>.</source>
        </trans-unit><trans-unit id="184" translate="yes" xml:space="preserve">
          <source>In the list of database accounts, select the database account with a name beginning with <bpt id="p1">**</bpt>learn-cosmos-db-<ept id="p1">**</ept>.</source>
        </trans-unit><trans-unit id="185" translate="yes" xml:space="preserve">
          <source>In the Cosmos DB panel, select <bpt id="p1">**</bpt>Firewall and virtual networks<ept id="p1">**</ept>.</source>
        </trans-unit><trans-unit id="186" translate="yes" xml:space="preserve">
          <source>In <bpt id="p1">*</bpt>Allow access from<ept id="p1">*</ept>, choose the option <bpt id="p2">**</bpt>Selected networks<ept id="p2">**</ept>.</source>
        </trans-unit><trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Uncheck <bpt id="p1">**</bpt>Allow access from Azure portal<ept id="p1">**</ept>.</source>
        </trans-unit><trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Select <bpt id="p1">**</bpt>I understand that the current settings will block all VNets and IPs including Azure portal<ept id="p1">**</ept>.</source>
        </trans-unit><trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Select <bpt id="p1">**</bpt>Save<ept id="p1">**</ept> to save the firewall configuration updates.</source>
        </trans-unit><trans-unit id="190" translate="yes" xml:space="preserve">
          <source>These changes have enabled a firewall for the Cosmos DB account, which will block access from the Cloud Shell, simulating a connection outage.</source>
        </trans-unit><trans-unit id="191" translate="yes" xml:space="preserve">
          <source>It can take a while for these firewall updates to complete, so wait for them to finish before proceeding to the next step.</source>
        </trans-unit><trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Run app and select <bpt id="p1">**</bpt>R<ept id="p1">**</ept> to refresh all the messages.</source>
        </trans-unit><trans-unit id="193" translate="yes" xml:space="preserve">
          <source>The app will catch a <ph id="ph1">`System.TimeoutException`</ph> and retry the connection to the database once again.</source>
        </trans-unit><trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Based on the <ph id="ph1">`number-of-retries`</ph> setting in the <bpt id="p1">**</bpt>appsettings.json<ept id="p1">**</ept> file of our project, the code will retry connecting up to five times.</source>
        </trans-unit><trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Based on the <ph id="ph1">`number_of_retries`</ph> setting in the <bpt id="p1">**</bpt>config.properties<ept id="p1">**</ept> file of our project, the code will retry connecting up to five times.</source>
        </trans-unit><trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Based on the <ph id="ph1">`number-of-retries`</ph> setting in the <bpt id="p1">**</bpt>appsettings.json<ept id="p1">**</ept> file of our project, the code will retry connecting up to five times.</source>
        </trans-unit><trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Back on the Azure portal, click <bpt id="p1">**</bpt>All networks<ept id="p1">**</ept>, and then click <bpt id="p2">**</bpt>Save<ept id="p2">**</ept> to disable the firewall.</source>
        </trans-unit><trans-unit id="198" translate="yes" xml:space="preserve">
          <source>If the app has finished, restart it.</source>
        </trans-unit><trans-unit id="199" translate="yes" xml:space="preserve">
          <source>If the firewall is removed in time, the Chat App will recover, reconnect, and display the stored messages.</source>
        </trans-unit><trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Change the retry policy</source>
        </trans-unit><trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Quite the app, and update the retry policy configuration to only wait 5 seconds (5000 milliseconds) before each retry.</source>
        </trans-unit><trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Open the configuration file in the code editor.</source>
        </trans-unit><trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Change the delay from <ph id="ph1">`60000`</ph> to <ph id="ph2">`5000`</ph>.</source>
        </trans-unit><trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Select the three ellipses (<bpt id="p1">**</bpt>...<ept id="p1">**</ept>) to the top right of the editor and then select <bpt id="p2">**</bpt>Close<ept id="p2">**</ept> in the window click <bpt id="p3">**</bpt>Save<ept id="p3">**</ept>.</source>
        </trans-unit><trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Run app, and note that the retries happen much more quickly.</source>
        </trans-unit><trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Open the configuration file in the code editor.</source>
        </trans-unit><trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Change the delay from <ph id="ph1">`60`</ph> to <ph id="ph2">`5`</ph>.</source>
        </trans-unit><trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Select the three ellipses (<bpt id="p1">**</bpt>...<ept id="p1">**</ept>) to the top right of the editor and then select <bpt id="p2">**</bpt>Close<ept id="p2">**</ept> in the window click <bpt id="p3">**</bpt>Save<ept id="p3">**</ept>.</source>
        </trans-unit><trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Run app, and note that the retries happen much more quickly.</source>
        </trans-unit><trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Open the configuration file in the code editor.</source>
        </trans-unit><trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Change the delay from <ph id="ph1">`60000`</ph> to <ph id="ph2">`5000`</ph>.</source>
        </trans-unit><trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Select the three ellipses (<bpt id="p1">**</bpt>...<ept id="p1">**</ept>) to the top right of the editor and then select <bpt id="p2">**</bpt>Close<ept id="p2">**</ept> in the window click <bpt id="p3">**</bpt>Save<ept id="p3">**</ept>.</source>
        </trans-unit><trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Run app, and note that the retries happen much more quickly.</source>
        </trans-unit></group></body></file></xliff>