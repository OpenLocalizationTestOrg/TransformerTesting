<?xml version="1.0"?><xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd"><file datatype="xml" original="6-define-appropriate-retry-policy.md" source-language="en-US" target-language="en-US"><header><tool tool-id="mdxliff" tool-name="mdxliff"  tool-company="Microsoft" /><xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6-define-appropriate-retry-policy.35d757.275a9d43f0fd39d7e5955779b65ab3d9fff2267c.skl</xliffext:skl_file_name><xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version><xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">275a9d43f0fd39d7e5955779b65ab3d9fff2267c</xliffext:ms.openlocfilehash><xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ba7e452ac39d7f09a5646044b44de0e1cdc54982</xliffext:ms.sourcegitcommit><xliffext:ms.openlocfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">learn-pr\azure\handle-transient-errors-in-your-app\includes\6-define-appropriate-retry-policy.md</xliffext:ms.openlocfilepath></header><body><group id="content" extype="content"><trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Your chat app needs to respond appropriately to errors it detects.</source>
        </trans-unit><trans-unit id="102" translate="yes" xml:space="preserve">
          <source>If it's a transient error, trying the operation again is a sensible approach.</source>
        </trans-unit><trans-unit id="103" translate="yes" xml:space="preserve">
          <source>However, retrying an operation when the service is busy will only make the situation worse.</source>
        </trans-unit><trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Likewise, if the service is unavailable and the service has notified the client that it should try again in 10 minutes, there's no point retrying instantly.</source>
        </trans-unit><trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Knowledge of the service being called enables you to decide on the key properties of a retry strategy.</source>
        </trans-unit><trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The first decision needs to be how many times the app is going to retry calling the service.</source>
        </trans-unit><trans-unit id="107" translate="yes" xml:space="preserve">
          <source>If this number is larger than one, how long should the interval be between retries?</source>
        </trans-unit><trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The following table lists common retry interval strategies to try when a transient error occurs.</source>
        </trans-unit><trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Interval</source>
        </trans-unit><trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit><trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Instant retry</source>
        </trans-unit><trans-unit id="112" translate="yes" xml:space="preserve">
          <source>If packets are corrupted because of networking issues, trying again straight away is a good option</source>
        </trans-unit><trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Regular</source>
        </trans-unit><trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Instant retry, then try again every 5 seconds</source>
        </trans-unit><trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Incremental</source>
        </trans-unit><trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Instant retry, then increase the wait period by fixed amounts, 2 seconds, 4 seconds, 6 seconds</source>
        </trans-unit><trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Exponential</source>
        </trans-unit><trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Instant retry, then increase the wait period exponentially, 1 second, 8 seconds, 20 seconds</source>
        </trans-unit><trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Random</source>
        </trans-unit><trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Can be used with any of the above, the aim being to reduce the chance that clients of a service retry at the same time</source>
        </trans-unit><trans-unit id="121" translate="yes" xml:space="preserve">
          <source>A good practice for usability is to use an exponential interval for background operations that an end user may not notice.</source>
        </trans-unit><trans-unit id="122" translate="yes" xml:space="preserve">
          <source>For interactive operations, like user interface updates, regular retries is a better choice.</source>
        </trans-unit><trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The users will be waiting the least amount of time as possible.</source>
        </trans-unit><trans-unit id="124" translate="yes" xml:space="preserve">
          <source>In other cases, you may have a Service Level Agreement (SLA) with end users, or one with the service.</source>
        </trans-unit><trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The SLA will set a hard limit on the number of times the app can spend trying to get a response.</source>
        </trans-unit><trans-unit id="126" translate="yes" xml:space="preserve">
          <source>As stated above, apps need to ensure they're using idempotent operations.</source>
        </trans-unit><trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Instead of sending delta operations, for example increase or decreasing values, send absolute values, by setting values rather than adjusting them.</source>
        </trans-unit><trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Let's look at the example of when a service you're using returns an HTTP 503 Service Unavailable exception.</source>
        </trans-unit><trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The service can return a <bpt id="p1">*</bpt>Retry-After<ept id="p1">*</ept> header in the response.</source>
        </trans-unit><trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The response from the service gives your app the best chance to get a successful response.</source>
        </trans-unit><trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Many services will have a built-in ability to retry operations, so in some cases this feature might provide enough functionality to serve as your app's retry strategy.</source>
        </trans-unit><trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Once you've defined a strategy, a good approach is to have a central process or object that handles retries and allow parameters such as max retry count and retry intervals to be changed via configuration.</source>
        </trans-unit><trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Your system administrators will then have the flexibility to adjust the apps performance when deployed into production, without the need for any code changes.</source>
        </trans-unit><trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Eventually, if the service still hasn't responded, your app needs to make the decision to give up.</source>
        </trans-unit><trans-unit id="135" translate="yes" xml:space="preserve">
          <source>External libraries</source>
        </trans-unit><trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Although it's possible to write your own retry logic in code, there are some open-source projects that have already codified the good practices above.</source>
        </trans-unit><trans-unit id="137" translate="yes" xml:space="preserve">
          <source>For C# there is <bpt id="p1">[</bpt>Polly<ept id="p1">](http://www.thepollyproject.org)</ept>, it supports defining a retry policy, including random and exponential intervals.</source>
        </trans-unit><trans-unit id="138" translate="yes" xml:space="preserve">
          <source>It allows for the reties to be stopped after a specified number or by using a circuit breaker.</source>
        </trans-unit><trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Finally for more permanent errors, fallback and caching can be used.</source>
        </trans-unit><trans-unit id="140" translate="yes" xml:space="preserve">
          <source>For Java there is <bpt id="p1">[</bpt>Resilience4j<ept id="p1">](https://github.com/resilience4j/resilience4j)</ept>, it supports defining a retry policy, including random and exponential intervals.</source>
        </trans-unit><trans-unit id="141" translate="yes" xml:space="preserve">
          <source>It allows for the reties to be stopped after a specified number or by using a circuit breaker.</source>
        </trans-unit><trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Finally for more permanent errors, fallback and caching can be used.</source>
        </trans-unit><trans-unit id="143" translate="yes" xml:space="preserve">
          <source>For Node there is <bpt id="p1">[</bpt>Polly.js<ept id="p1">](https://github.com/mauricedb/polly-js)</ept>, Which is based on the .NET Polly project.</source>
        </trans-unit><trans-unit id="144" translate="yes" xml:space="preserve">
          <source>It doesn't have as many features as the C# library, but does implement retry and circuit breaker logic.</source>
        </trans-unit></group></body></file></xliff>