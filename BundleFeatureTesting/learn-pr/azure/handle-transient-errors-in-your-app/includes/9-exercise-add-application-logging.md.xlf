<?xml version="1.0"?><xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd"><file datatype="xml" original="9-exercise-add-application-logging.md" source-language="en-US" target-language="en-US"><header><tool tool-id="mdxliff" tool-name="mdxliff"  tool-company="Microsoft" /><xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9-exercise-add-application-logging.9983e3.773fc08998a1fca4073d3dcb853e50866e6a1f3c.skl</xliffext:skl_file_name><xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version><xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">773fc08998a1fca4073d3dcb853e50866e6a1f3c</xliffext:ms.openlocfilehash><xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ba7e452ac39d7f09a5646044b44de0e1cdc54982</xliffext:ms.sourcegitcommit><xliffext:ms.openlocfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">learn-pr\azure\handle-transient-errors-in-your-app\includes\9-exercise-add-application-logging.md</xliffext:ms.openlocfilepath></header><body><group id="content" extype="content"><trans-unit id="101" translate="yes" xml:space="preserve">
          <source>In this exercise, we'll enhance the current logging of the chat app, by building on the code from the previous exercises.</source>
        </trans-unit><trans-unit id="102" translate="yes" xml:space="preserve">
          <source>For simplicity, we'll focus on logging messages to the console in this exercise.</source>
        </trans-unit><trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The following list enumerates the information you'd like to log:</source>
        </trans-unit><trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Time the error occurred</source>
        </trans-unit><trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Number of retries</source>
        </trans-unit><trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Time the error was resolved</source>
        </trans-unit><trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Location in the code</source>
        </trans-unit><trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Transient errors should be at the warning level</source>
        </trans-unit><trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Exceptions that cause the app to close should be errors</source>
        </trans-unit><trans-unit id="110" translate="yes" xml:space="preserve">
          <source>You'll write the code in a way that can be enhanced in the future to write these log messages to files, or other services like Azure Application Insights.</source>
        </trans-unit><trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Add logging provider</source>
        </trans-unit><trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Microsoft provides a <ph id="ph1">`Microsoft.Extensions.Logging`</ph> NuGet package that adds a great set of functionality for logging.</source>
        </trans-unit><trans-unit id="113" translate="yes" xml:space="preserve">
          <source>It can be customized with providers, and has a built-in console provider to log messages to the console.</source>
        </trans-unit><trans-unit id="114" translate="yes" xml:space="preserve">
          <source>You'll also use the new dependency injection features of .NET Core to enable log messages to print the class they're in.</source>
        </trans-unit><trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Make sure you are still in the C# <bpt id="p1">**</bpt>chatapp-retry<ept id="p1">**</ept> folder with the following command.</source>
        </trans-unit><trans-unit id="116" translate="yes" xml:space="preserve">
          <source>In the cloud shell, add <ph id="ph1">`Microsoft.Extensions.Logging`</ph> to the app by installing the following three dependencies.</source>
        </trans-unit><trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Make sure you installed all three packages successfully before proceeding with this exercise.</source>
        </trans-unit><trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Open the editor with the following command.</source>
        </trans-unit><trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The code editor opens and displays all files in the current folder in the left-hand navigation window.</source>
        </trans-unit><trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Select <bpt id="p1">**</bpt>Program.cs<ept id="p1">**</ept> from the left-hand navigation window to open it in the editor.</source>
        </trans-unit><trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Reference <ph id="ph1">`Microsoft.Extensions.Logging`</ph> in <bpt id="p1">**</bpt>Program.cs<ept id="p1">**</ept> by adding <ph id="ph2">`using`</ph> statements as shown in the following snippet.</source>
        </trans-unit><trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Add a private member to the class for our logging object.</source>
        </trans-unit><trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Add logging</source>
        </trans-unit><trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Add the following code to the beginning of the <ph id="ph1">`Main()`</ph> method in <bpt id="p1">**</bpt>Program.cs<ept id="p1">**</ept>.</source>
        </trans-unit><trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The above code instantiates a ServiceCollection, adds a console provider, and sets a default logging level to debug.</source>
        </trans-unit><trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The next two lines create two loggers, one to be used in the retry policy class, the other for the main app.</source>
        </trans-unit><trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The following code needs to be changed, as the retry policy is being created above.</source>
        </trans-unit><trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Change this code:</source>
        </trans-unit><trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>To:<ept id="p1">**</ept></source>
        </trans-unit><trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Replace <ph id="ph1">`getAllChats`</ph> with the following update.</source>
        </trans-unit><trans-unit id="131" translate="yes" xml:space="preserve">
          <source>This replaces all the <ph id="ph1">`Console.WriteLine`</ph> calls that are related to system errors.</source>
        </trans-unit><trans-unit id="132" translate="yes" xml:space="preserve">
          <source>There will still be calls to <ph id="ph1">`Console.WriteLine`</ph> for the user interface.</source>
        </trans-unit><trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Now that we've enhanced logging from the main app, let's turn our attention to the <ph id="ph1">`RetryPolicy`</ph> class we created earlier.</source>
        </trans-unit><trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`RetryPolicy`</ph> class also needs do some logging to add meaningful information about transient errors.</source>
        </trans-unit><trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Select the three ellipses (<bpt id="p1">**</bpt>...<ept id="p1">**</ept>) to the top right of the editor and then select <bpt id="p2">**</bpt>Save<ept id="p2">**</ept>.</source>
        </trans-unit><trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Select <bpt id="p1">**</bpt>RetryPolicy.cs<ept id="p1">**</ept>  in the navigation window to the left.</source>
        </trans-unit><trans-unit id="137" translate="yes" xml:space="preserve">
          <source>This opens <bpt id="p1">**</bpt>RetryPolicy.cs<ept id="p1">**</ept> in the code editor.</source>
        </trans-unit><trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Add a reference to the logging library with the following <ph id="ph1">`using`</ph> statement.</source>
        </trans-unit><trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Add a private member to the class for our logging object.</source>
        </trans-unit><trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Update the constructor of the class with the following code to Instantiate the logger.</source>
        </trans-unit><trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Notice that the constructor now takes a parameter of type ILogger.</source>
        </trans-unit><trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Replace the <ph id="ph1">`Console.WriteLine`</ph> call in <ph id="ph2">`CanRetry`</ph>:</source>
        </trans-unit><trans-unit id="143" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>With:<ept id="p1">**</ept></source>
        </trans-unit><trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Select the three ellipses (<bpt id="p1">**</bpt>...<ept id="p1">**</ept>) to the top right of the editor and then select <bpt id="p2">**</bpt>Quit<ept id="p2">**</ept> in the dialog click <bpt id="p3">**</bpt>Save<ept id="p3">**</ept>.</source>
        </trans-unit><trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Compile and run app.</source>
        </trans-unit><trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Add logging provider</source>
        </trans-unit><trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The Java runtime provides a <ph id="ph1">`import java.util.logging`</ph> library that adds a great set of functionality for logging.</source>
        </trans-unit><trans-unit id="148" translate="yes" xml:space="preserve">
          <source>It can be customized with providers, messages can have formats applied, and it logs to the console by default.</source>
        </trans-unit><trans-unit id="149" translate="yes" xml:space="preserve">
          <source>You don't need to add this library to the Chat App as it's already being used to hide MongoDB log messages.</source>
        </trans-unit><trans-unit id="150" translate="yes" xml:space="preserve">
          <source>You'll add a new logger for use in the main app and retry policy, and add the new time library to allow access to the current time.</source>
        </trans-unit><trans-unit id="151" translate="yes" xml:space="preserve">
          <source>In the Cloud Shell navigate to the node chatapp-retry folder.</source>
        </trans-unit><trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Edit <ph id="ph1">`javaChat.java`</ph> in the code editor.</source>
        </trans-unit><trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Import time helper libraries  by adding the following <ph id="ph1">`import`</ph> statements to <bpt id="p1">**</bpt>javaChat.java<ept id="p1">**</ept>.</source>
        </trans-unit><trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Add a logger private member variable to <ph id="ph1">`javaChat`</ph> that we'll use across the app.</source>
        </trans-unit><trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Update <ph id="ph1">`printAllMessages`</ph> to the following code.</source>
        </trans-unit><trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The update replaces the <ph id="ph1">`System.out.Println`</ph> calls in the catch blocks.</source>
        </trans-unit><trans-unit id="157" translate="yes" xml:space="preserve">
          <source>There are still calls to <ph id="ph1">`System.out.Println`</ph> for the user interface.</source>
        </trans-unit><trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The retry policy class also needs do some logging to add meaningful information about transient errors.</source>
        </trans-unit><trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Select the three ellipses (<bpt id="p1">**</bpt>...<ept id="p1">**</ept>) to the top right of the editor and then select <bpt id="p2">**</bpt>Save<ept id="p2">**</ept>.</source>
        </trans-unit><trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Select the three ellipses (<bpt id="p1">**</bpt>...<ept id="p1">**</ept>) to the top right of the editor and then select <bpt id="p2">**</bpt>Open<ept id="p2">**</ept>, and in the dialog type <bpt id="p3">**</bpt>RetryPolicy.java<ept id="p3">**</ept>, and press Enter.</source>
        </trans-unit><trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Import logging and time libraries by adding the following <ph id="ph1">`import`</ph> statements to the class.</source>
        </trans-unit><trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Declare a variable for our logger instance.</source>
        </trans-unit><trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Replace the <ph id="ph1">`System.out.printf`</ph> call in <ph id="ph2">`canRetry()`</ph> with a logging message:</source>
        </trans-unit><trans-unit id="164" translate="yes" xml:space="preserve">
          <source>With:</source>
        </trans-unit><trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Select the three ellipses (<bpt id="p1">**</bpt>...<ept id="p1">**</ept>) to the top right of the editor and then select <bpt id="p2">**</bpt>Quit<ept id="p2">**</ept> in the dialog click <bpt id="p3">**</bpt>Save<ept id="p3">**</ept>.</source>
        </trans-unit><trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Compile and run app.</source>
        </trans-unit><trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Add a logging provider</source>
        </trans-unit><trans-unit id="168" translate="yes" xml:space="preserve">
          <source>There's no inbuilt logging library provided as Node.js is built on the JavaScript language.</source>
        </trans-unit><trans-unit id="169" translate="yes" xml:space="preserve">
          <source>There are many options of additional logging libraries, but your team has decided to standardize on Winston across all its node apps.</source>
        </trans-unit><trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Winston can write to the console by default, and also has options for different transports and log message formats.</source>
        </trans-unit><trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Make sure you are still in the Node.js <bpt id="p1">**</bpt>chatapp-retry<ept id="p1">**</ept> folder by running the following command.</source>
        </trans-unit><trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Install the Winston package.</source>
        </trans-unit><trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Edit <ph id="ph1">`server.js`</ph> in the code editor.</source>
        </trans-unit><trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Require the new Winston logging library, by adding javascript to line 16.</source>
        </trans-unit><trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Replace all the <ph id="ph1">`console.log`</ph> calls with the new logger.</source>
        </trans-unit><trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The retry policy class also needs do some logging to add meaningful information about transient errors.</source>
        </trans-unit><trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Select the three ellipses (<bpt id="p1">**</bpt>...<ept id="p1">**</ept>) to the top right of the editor and then select <bpt id="p2">**</bpt>Save<ept id="p2">**</ept>.</source>
        </trans-unit><trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Select the three ellipses (<bpt id="p1">**</bpt>...<ept id="p1">**</ept>) to the top right of the editor and then select <bpt id="p2">**</bpt>Open<ept id="p2">**</ept>, and in the dialog type <bpt id="p3">**</bpt>retryPolicy.js<ept id="p3">**</ept>, and press Enter.</source>
        </trans-unit><trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Enhance the  <bpt id="p1">**</bpt>retryPolicy.js<ept id="p1">**</ept> to log information about transient errors by adding code to use Winston at line 4.</source>
        </trans-unit><trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Replace the <ph id="ph1">`console.log`</ph> line in the <ph id="ph2">`checkRetries`</ph> method:</source>
        </trans-unit><trans-unit id="181" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>With:<ept id="p1">**</ept></source>
        </trans-unit><trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Select the three ellipses (<bpt id="p1">**</bpt>...<ept id="p1">**</ept>) to the top right of the editor and then select <bpt id="p2">**</bpt>Quit<ept id="p2">**</ept> in the dialog click <bpt id="p3">**</bpt>Save<ept id="p3">**</ept>.</source>
        </trans-unit><trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Run app.</source>
        </trans-unit><trans-unit id="184" translate="yes" xml:space="preserve">
          <source>If you no longer have the browser page opened on the app, run <ph id="ph1">`curl -X POST http://localhost:8888/openPort/8000;`</ph> and click on the url.</source>
        </trans-unit><trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Test the new logging</source>
        </trans-unit><trans-unit id="186" translate="yes" xml:space="preserve">
          <source>If the firewall is still switched on for the Cosmos DB, the chat app can't connect to the database.</source>
        </trans-unit><trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Otherwise, if the chat app is still working then follow these steps to switch on the firewall.</source>
        </trans-unit><trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Sign into the <bpt id="p1">[</bpt>Azure portal for sandbox<ept id="p1">](https://portal.azure.com/learn.docs.microsoft.com?azure-portal=true)</ept>.</source>
        </trans-unit><trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Select <bpt id="p1">**</bpt>Azure Cosmos DB<ept id="p1">**</ept> in the left navigation panel.</source>
        </trans-unit><trans-unit id="190" translate="yes" xml:space="preserve">
          <source>You should see a database account with a name beginning with <bpt id="p1">**</bpt>learn-cosmos-db-<ept id="p1">**</ept>.</source>
        </trans-unit><trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Select that database account.</source>
        </trans-unit><trans-unit id="192" translate="yes" xml:space="preserve">
          <source>In the Cosmos DB panel, select <bpt id="p1">**</bpt>Firewall and virtual networks<ept id="p1">**</ept>.</source>
        </trans-unit><trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Select <bpt id="p1">**</bpt>Selected networks<ept id="p1">**</ept>.</source>
        </trans-unit><trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Uncheck <bpt id="p1">**</bpt>Allow access from Azure portal<ept id="p1">**</ept>.</source>
        </trans-unit><trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Select <bpt id="p1">**</bpt>I understand that the current settings will block all VNets and IPs including Azure portal<ept id="p1">**</ept>.</source>
        </trans-unit><trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Select <bpt id="p1">**</bpt>Save<ept id="p1">**</ept>.</source>
        </trans-unit><trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Return to the CloudShell and try to refresh the messages.</source>
        </trans-unit><trans-unit id="198" translate="yes" xml:space="preserve">
          <source>You should see the new logging messages in the console, similar to the following messages.</source>
        </trans-unit></group></body></file></xliff>