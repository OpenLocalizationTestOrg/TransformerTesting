<?xml version="1.0"?><xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd"><file datatype="xml" original="5-exercise-detect-transient-errors.md" source-language="en-US" target-language="en-US"><header><tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1931010" tool-company="Microsoft" /><xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5-exercise-detect-transient-errors.c9f38849ec0bd79391f2576e2eef7b355facd5b5.skl</xliffext:skl_file_name><xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version><xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">06a1359b642b0148253aad80c010bcd3ec988aae</xliffext:ms.openlocfilehash><xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/24/2019</xliffext:ms.lasthandoff><xliffext:ms.openlocfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">learn-pr\azure\handle-transient-errors-in-your-app\includes\5-exercise-detect-transient-errors.md</xliffext:ms.openlocfilepath></header><body><group id="content" extype="content"><trans-unit id="101" translate="yes" xml:space="preserve">
          <source>You'll now add code to detect transient errors in your team's chat app.</source>
        </trans-unit><trans-unit id="102" translate="yes" xml:space="preserve">
          <source>You can choose to change the C#, Java, or Node.js app.</source>
        </trans-unit><trans-unit id="103" translate="yes" xml:space="preserve">
          <source>To get started, let's set up the chat app.</source>
        </trans-unit><trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Set up the database</source>
        </trans-unit><trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The first thing to do is configure the app's back end.</source>
        </trans-unit><trans-unit id="106" translate="yes" xml:space="preserve">
          <source>It uses a Cosmos DB with a Mongo API.</source>
        </trans-unit><trans-unit id="107" translate="yes" xml:space="preserve">
          <source>We'll use the following set of instructions to set up the database through the Azure CLI.</source>
        </trans-unit><trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Run the following command in the Cloud Shell to set a variable called COSMOS_DB_NAME with a random name for our database.</source>
        </trans-unit><trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Run the following <ph id="ph1">`az cosmosdb create`</ph> command to create a new Azure Cosmos DB database account.</source>
        </trans-unit><trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The option <ph id="ph1">`--kind MongoDB`</ph> sets up a CosmosDB with a MongoAPI.</source>
        </trans-unit><trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Setting up the database account can take a while, so please wait for it to complete.</source>
        </trans-unit><trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Once the creation of our database account has finished, we can create a database in that account.</source>
        </trans-unit><trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The option <ph id="ph1">`--db-name chat-app`</ph> creates a database named chat-app to store your chat documents in.</source>
        </trans-unit><trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Finally, run the following command in the Azure Cloud Shell to retrieve the connection strings for our new database.</source>
        </trans-unit><trans-unit id="115" translate="yes" xml:space="preserve">
          <source>This command <ph id="ph1">`az cosmosdb list-connection-strings`</ph> returns a json object with connection information, piping <ph id="ph2">`|`</ph> the JSON into two <ph id="ph3">`sed`</ph> commands to strip out just the MongoDB connection string.</source>
        </trans-unit><trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Save the connection string as it's needed for the rest of the module.</source>
        </trans-unit><trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Clone the Chat App repository</source>
        </trans-unit><trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Use the following steps to clone the Chat App GitHub repository with <ph id="ph1">`git`</ph>.</source>
        </trans-unit><trans-unit id="119" translate="yes" xml:space="preserve">
          <source>You can execute this right in the Cloud Shell.</source>
        </trans-unit><trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The source files for the applications that you'll build in this unit are located in a GitHub repository.</source>
        </trans-unit><trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Use the following commands to make sure that you are in your home directory in Cloud Shell, and then to clone this repository:</source>
        </trans-unit><trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The repository is cloned to your home folder.</source>
        </trans-unit><trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Move into the C# app folder.</source>
        </trans-unit><trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Use the code editor to edit <bpt id="p1">**</bpt>Program.cs<ept id="p1">**</ept>.</source>
        </trans-unit><trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Update the <ph id="ph1">`connectionString`</ph> variable with the connection string value you saved earlier.</source>
        </trans-unit><trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Select the three ellipses (<bpt id="p1">**</bpt>...<ept id="p1">**</ept>) to the top right of the editor and then select <bpt id="p2">**</bpt>Close<ept id="p2">**</ept> in the window click <bpt id="p3">**</bpt>Save<ept id="p3">**</ept>.</source>
        </trans-unit><trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Compile and run the .Net Core app.</source>
        </trans-unit><trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The app displays the following interface in the Cloud Shell.</source>
        </trans-unit><trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The chat console app interface at startup, showing the New, Read All, and Quit commands.</source>
        </trans-unit><trans-unit id="130" translate="yes" xml:space="preserve">
          <source>To test the app, type <bpt id="p1">**</bpt>N<ept id="p1">**</ept> and enter a name and message for a new message.</source>
        </trans-unit><trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Type <bpt id="p1">**</bpt>R<ept id="p1">**</ept> to read all messages posted to date.</source>
        </trans-unit><trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Type <bpt id="p1">**</bpt>Q<ept id="p1">**</ept> to quit the app.</source>
        </trans-unit><trans-unit id="133" translate="yes" xml:space="preserve">
          <source>If you quit the app and the restart, notice that the messages you typed  in the last session are available.</source>
        </trans-unit><trans-unit id="134" translate="yes" xml:space="preserve">
          <source>That's because the app is connecting to our Mongo DB in Cosmos DB to retrieve all this data.</source>
        </trans-unit><trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Let's see what happens when we break the connection to the backend database.</source>
        </trans-unit><trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Add code to detect errors</source>
        </trans-unit><trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Use the code editor.</source>
        </trans-unit><trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Scroll down to the getAllChats method.</source>
        </trans-unit><trans-unit id="139" translate="yes" xml:space="preserve">
          <source>It should look the same as the following method.</source>
        </trans-unit><trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The Find method queries all the documents in the Cosmos DB.</source>
        </trans-unit><trans-unit id="141" translate="yes" xml:space="preserve">
          <source>But, what if a transient error occurs while we try that operation?</source>
        </trans-unit><trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Let's start by catching that error.</source>
        </trans-unit><trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Replace the <ph id="ph1">`getAllChats()`</ph> implementation with the code in the following block.</source>
        </trans-unit><trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Notice that we include a small helper method called <ph id="ph1">`diagnose()`</ph> to print the exception message.</source>
        </trans-unit><trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Let's save our changes and try them out. Select the three ellipses (<bpt id="p1">**</bpt>...<ept id="p1">**</ept>) to the top right of the editor and then select <bpt id="p2">**</bpt>Close Editor<ept id="p2">**</ept> followed by <bpt id="p3">**</bpt>Save<ept id="p3">**</ept>.</source>
        </trans-unit><trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Build and run the app.</source>
        </trans-unit><trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Compile and run the .Net Core app.</source>
        </trans-unit><trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The example messages you created previously are listed.</source>
        </trans-unit><trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Leave the app running, so we can demonstrate a transient error in the following section.</source>
        </trans-unit><trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Move into the Java app folder.</source>
        </trans-unit><trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Use the code editor to edit <bpt id="p1">**</bpt>javaChat.java<ept id="p1">**</ept>.</source>
        </trans-unit><trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Change line 26 to contain the connection string shown previously.</source>
        </trans-unit><trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Select the three ellipses (<bpt id="p1">**</bpt>...<ept id="p1">**</ept>) to the top right of the editor and then select <bpt id="p2">**</bpt>Close<ept id="p2">**</ept> in the window click <bpt id="p3">**</bpt>Save<ept id="p3">**</ept>.</source>
        </trans-unit><trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Compile and run the Java app.</source>
        </trans-unit><trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Test the app, create a new message, or read all the messages.</source>
        </trans-unit><trans-unit id="156" translate="yes" xml:space="preserve">
          <source>When finished type Q to quit.</source>
        </trans-unit><trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Add code to detect errors</source>
        </trans-unit><trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Use the code editor.</source>
        </trans-unit><trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Replace the method <ph id="ph1">`printAllMessages`</ph> with the following update.</source>
        </trans-unit><trans-unit id="160" translate="yes" xml:space="preserve">
          <source>This snippet adds a try-catch block to detect transient errors from our database.</source>
        </trans-unit><trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Select the three ellipses (<bpt id="p1">**</bpt>...<ept id="p1">**</ept>) to the top right of the editor and then select <bpt id="p2">**</bpt>Close Editor<ept id="p2">**</ept> in the window click <bpt id="p3">**</bpt>Save<ept id="p3">**</ept>.</source>
        </trans-unit><trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Build and run the app.</source>
        </trans-unit><trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Compile and run the Java app.</source>
        </trans-unit><trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The example messages you created previously are listed.</source>
        </trans-unit><trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Quit the app.</source>
        </trans-unit><trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Run the following command in the Cloud Shell to move into the node <ph id="ph1">`chatapp`</ph> folder.</source>
        </trans-unit><trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Use the code editor to edit <bpt id="p1">**</bpt>server.js<ept id="p1">**</ept>.</source>
        </trans-unit><trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Change line 25 to contain the Mongo DB connection string returned after creating the database.</source>
        </trans-unit><trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Select the three ellipses (<bpt id="p1">**</bpt>...<ept id="p1">**</ept>) to the top right of the editor and then select <bpt id="p2">**</bpt>Close<ept id="p2">**</ept> in the window click <bpt id="p3">**</bpt>Save<ept id="p3">**</ept>.</source>
        </trans-unit><trans-unit id="170" translate="yes" xml:space="preserve">
          <source>To navigate to our Node.js app in the browser, we have to open port 8000 in the sandbox.</source>
        </trans-unit><trans-unit id="171" translate="yes" xml:space="preserve">
          <source>To open port 8000, run the following <ph id="ph1">`curl`</ph> command in the Cloud Shell.</source>
        </trans-unit><trans-unit id="172" translate="yes" xml:space="preserve">
          <source>When the port is opened successfully, you'll see a message similar to the following message.</source>
        </trans-unit><trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Note the url value in the message that was returned from the curl command.</source>
        </trans-unit><trans-unit id="174" translate="yes" xml:space="preserve">
          <source>This is the url of our app.</source>
        </trans-unit><trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Compile and run the Node.js app.</source>
        </trans-unit><trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Open the url you saved previously in your favorite browser.</source>
        </trans-unit><trans-unit id="177" translate="yes" xml:space="preserve">
          <source>You should see a user interface similar to the following screenshot.</source>
        </trans-unit><trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The chat node app interface at startup, showing fields to enter name and message and buttons to send and delete a message.</source>
        </trans-unit><trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Test the app by adding messages to the chat board through the interface.</source>
        </trans-unit><trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Add code to detect errors</source>
        </trans-unit><trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Run the following command to edit <bpt id="p1">**</bpt>server.js<ept id="p1">**</ept> in the code editor of the Cloud Shell.</source>
        </trans-unit><trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Scroll down to the code that connects to the database, starting at line 41.</source>
        </trans-unit><trans-unit id="183" translate="yes" xml:space="preserve">
          <source>When connecting to the database, you can handle any exceptions by adding a catch promise.</source>
        </trans-unit><trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Add a catch to the save call to the database.</source>
        </trans-unit><trans-unit id="185" translate="yes" xml:space="preserve">
          <source>And the delete call.</source>
        </trans-unit><trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Select the three ellipses (<bpt id="p1">**</bpt>...<ept id="p1">**</ept>) to the top right of the editor and then select <bpt id="p2">**</bpt>Close<ept id="p2">**</ept> in the window click <bpt id="p3">**</bpt>Save<ept id="p3">**</ept>.</source>
        </trans-unit><trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Run the app.</source>
        </trans-unit><trans-unit id="188" translate="yes" xml:space="preserve">
          <source>You may need to refresh the browser.</source>
        </trans-unit><trans-unit id="189" translate="yes" xml:space="preserve">
          <source>The example messages you created previously are still listed.</source>
        </trans-unit><trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Create an error</source>
        </trans-unit><trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Sign into the <bpt id="p1">[</bpt>Azure portal<ept id="p1">](https://portal.azure.com/learn.docs.microsoft.com?azure-portal=true)</ept> using the same account you activated the sandbox with.</source>
        </trans-unit><trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Select <bpt id="p1">**</bpt>Azure Cosmos DB<ept id="p1">**</ept> in the left navigation panel.</source>
        </trans-unit><trans-unit id="193" translate="yes" xml:space="preserve">
          <source>You should see a database account with a name beginning with <bpt id="p1">**</bpt>learn-cosmos-db-<ept id="p1">**</ept>.</source>
        </trans-unit><trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Select that database account.</source>
        </trans-unit><trans-unit id="195" translate="yes" xml:space="preserve">
          <source>In the Cosmos DB panel, select <bpt id="p1">**</bpt>Firewall and virtual networks<ept id="p1">**</ept>.</source>
        </trans-unit><trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Select <bpt id="p1">**</bpt>Selected networks<ept id="p1">**</ept>.</source>
        </trans-unit><trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Uncheck <bpt id="p1">**</bpt>Allow access from Azure portal<ept id="p1">**</ept>.</source>
        </trans-unit><trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Select <bpt id="p1">**</bpt>I understand that the current settings will block all VNets and IPs including Azure portal<ept id="p1">**</ept>.</source>
        </trans-unit><trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Select <bpt id="p1">**</bpt>Save<ept id="p1">**</ept> to save the firewall configuration updates.</source>
        </trans-unit><trans-unit id="200" translate="yes" xml:space="preserve">
          <source>These changes have enabled a firewall for the Cosmos DB account, which will block access from the Cloud Shell, simulating a connection outage.</source>
        </trans-unit><trans-unit id="201" translate="yes" xml:space="preserve">
          <source>It can take a while for these firewall updates to complete, so wait for them to finish before proceeding to the next step.</source>
        </trans-unit><trans-unit id="202" translate="yes" xml:space="preserve">
          <source>When the firewall configuration update has finished successfully, return to the chat app and select <bpt id="p1">**</bpt>R<ept id="p1">**</ept> to refresh all the messages.</source>
        </trans-unit><trans-unit id="203" translate="yes" xml:space="preserve">
          <source>This calls our <ph id="ph1">`getAllChats()`</ph> method.</source>
        </trans-unit><trans-unit id="204" translate="yes" xml:space="preserve">
          <source>After a few seconds, the call to find all messages times out and you should see that the code handled a System.TimeoutException and printed that to the console.</source>
        </trans-unit><trans-unit id="205" translate="yes" xml:space="preserve">
          <source>The app is still running.</source>
        </trans-unit><trans-unit id="206" translate="yes" xml:space="preserve">
          <source>If you now try to add a new message, you get another System.TimeoutException.</source>
        </trans-unit><trans-unit id="207" translate="yes" xml:space="preserve">
          <source>However, this time the app crashes.</source>
        </trans-unit><trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Why?</source>
        </trans-unit><trans-unit id="209" translate="yes" xml:space="preserve">
          <source>If you look closely at the code in Program.cs,** you can see that we only handle the exception gracefully in the <ph id="ph1">`getAllChats()`</ph> method.</source>
        </trans-unit><trans-unit id="210" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Main()`</ph> doesn't handle the exception so the app crashes instead.</source>
        </trans-unit><trans-unit id="211" translate="yes" xml:space="preserve">
          <source>When the firewall configuration update has finished successfully, return to the browser and try sending more messages.</source>
        </trans-unit><trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Observe the messages displayed in the Cloud Shell.</source>
        </trans-unit><trans-unit id="213" translate="yes" xml:space="preserve">
          <source>The app is still running, but we are catching transient errors caused by the lost connection to the database.</source>
        </trans-unit><trans-unit id="214" translate="yes" xml:space="preserve">
          <source>When the firewall configuration update has finished successfully, return to the browser and try sending more messages.</source>
        </trans-unit><trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Observe the messages displayed in the Cloud Shell.</source>
        </trans-unit><trans-unit id="216" translate="yes" xml:space="preserve">
          <source>The app is still running, but we are catching transient errors caused by the lost connection to the database.</source>
        </trans-unit><trans-unit id="217" translate="yes" xml:space="preserve">
          <source>To disable the firewall and let the app read and write to the Cosmos DB database again, perform the following steps.</source>
        </trans-unit><trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Visit the <bpt id="p1">[</bpt>Azure portal for sandbox<ept id="p1">](https://portal.azure.com/learn.docs.microsoft.com?azure-portal=true)</ept> using the same account you activated the sandbox with.</source>
        </trans-unit><trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Select <bpt id="p1">**</bpt>Azure Cosmos DB<ept id="p1">**</ept> in the left navigation panel.</source>
        </trans-unit><trans-unit id="220" translate="yes" xml:space="preserve">
          <source>You should see a database account with a name beginning with <bpt id="p1">**</bpt>learn-cosmos-db-<ept id="p1">**</ept>.</source>
        </trans-unit><trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Select that database account.</source>
        </trans-unit><trans-unit id="222" translate="yes" xml:space="preserve">
          <source>In the Cosmos DB panel, select <bpt id="p1">**</bpt>Firewall and virtual networks<ept id="p1">**</ept>.</source>
        </trans-unit><trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Select <bpt id="p1">**</bpt>All networks<ept id="p1">**</ept> and then select <bpt id="p2">**</bpt>Save<ept id="p2">**</ept> at the bottom of the screen.</source>
        </trans-unit><trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Wait for the firewall configuration updates to finish, which can take a few minutes</source>
        </trans-unit><trans-unit id="225" translate="yes" xml:space="preserve">
          <source>This exercise shows how to detect an error in your app.</source>
        </trans-unit><trans-unit id="226" translate="yes" xml:space="preserve">
          <source>So far, we just notify that an error has occurred.</source>
        </trans-unit><trans-unit id="227" translate="yes" xml:space="preserve">
          <source>In the following units, we'll see how to retry our calls so that our app can recover from these kinds of errors.</source>
        </trans-unit></group></body></file></xliff>