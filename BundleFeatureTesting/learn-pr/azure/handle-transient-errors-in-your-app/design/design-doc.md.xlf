<?xml version="1.0"?><xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd"><file datatype="xml" original="design-doc.md" source-language="en-US" target-language="en-US"><header><tool tool-id="mdxliff" tool-name="mdxliff"  tool-company="Microsoft" /><xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">design-doc.2d3c86.adb4162e529e54f20120b82e2abe3f46c8b711b3.skl</xliffext:skl_file_name><xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version><xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">adb4162e529e54f20120b82e2abe3f46c8b711b3</xliffext:ms.openlocfilehash><xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ba7e452ac39d7f09a5646044b44de0e1cdc54982</xliffext:ms.sourcegitcommit><xliffext:ms.openlocfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">learn-pr\azure\handle-transient-errors-in-your-app\design\design-doc.md</xliffext:ms.openlocfilepath></header><body><group id="content" extype="content"><trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Module Design</source>
        </trans-unit><trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Title</source>
        </trans-unit><trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Build code that recovers from transient errors</source>
        </trans-unit><trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Role(s)</source>
        </trans-unit><trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Developer</source>
        </trans-unit><trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Level</source>
        </trans-unit><trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Beginner</source>
        </trans-unit><trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Product(s)</source>
        </trans-unit><trans-unit id="109" translate="yes" xml:space="preserve">
          <source>N/A</source>
        </trans-unit><trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Prerequisites</source>
        </trans-unit><trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Entry-level developer knowledge in the covered language</source>
        </trans-unit><trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Summary</source>
        </trans-unit><trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Customers building their very first cloud-based apps and who are not accustomed to the many kinds of transient faults that can occur (network connectivity, service unavailability, timeouts, etc.)</source>
        </trans-unit><trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Learning objectives</source>
        </trans-unit><trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Identify common strategies for handling transient errors</source>
        </trans-unit><trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Detect transient errors in code</source>
        </trans-unit><trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Perform appropriate task retry, delay and cancellation and logging in code</source>
        </trans-unit><trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Chunk your content into subtasks</source>
        </trans-unit><trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Identify the subtasks of <bpt id="p1">*</bpt>Build code that recovers from transient errors<ept id="p1">*</ept></source>
        </trans-unit><trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Subtask</source>
        </trans-unit><trans-unit id="121" translate="yes" xml:space="preserve">
          <source>What part of the introduction scenario does this subtask satisfy?</source>
        </trans-unit><trans-unit id="122" translate="yes" xml:space="preserve">
          <source>How will you assess it: <bpt id="p1">**</bpt>Exercise or Knowledge check<ept id="p1">**</ept>?</source>
        </trans-unit><trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Which learning objective(s) does this help meet?</source>
        </trans-unit><trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Does the subtask have enough learning content to justify an entire unit?</source>
        </trans-unit><trans-unit id="125" translate="yes" xml:space="preserve">
          <source>If not, which other subtask will you combine it with?</source>
        </trans-unit><trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Define transient errors</source>
        </trans-unit><trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Understand what transient errors are</source>
        </trans-unit><trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Knowledge check</source>
        </trans-unit><trans-unit id="129" translate="yes" xml:space="preserve">
          <source>1</source>
        </trans-unit><trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit><trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Detect transient errors in code</source>
        </trans-unit><trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Identify all the places the code currently handles transient errors</source>
        </trans-unit><trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Exercise</source>
        </trans-unit><trans-unit id="134" translate="yes" xml:space="preserve">
          <source>2</source>
        </trans-unit><trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit><trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Identify approaches to errors</source>
        </trans-unit><trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Categorize strategies for handling errors</source>
        </trans-unit><trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Exercise</source>
        </trans-unit><trans-unit id="139" translate="yes" xml:space="preserve">
          <source>3</source>
        </trans-unit><trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit><trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Perform appropriate logging</source>
        </trans-unit><trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Enhance the existing chat app if there are any missing errors not being handled</source>
        </trans-unit><trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Exercise</source>
        </trans-unit><trans-unit id="144" translate="yes" xml:space="preserve">
          <source>3</source>
        </trans-unit><trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Yes</source>
        </trans-unit><trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Outline the units</source>
        </trans-unit><trans-unit id="147" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Introduction<ept id="p1">**</ept></source>
        </trans-unit><trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Your company has been developing on-premise desktop applications. It has recently had a serious data incident where a large amount of data was lost. The CTO has been asked to improve the companyâ€™s entire suite of apps to use microservices and cloud-based data storage. Your team leader has given you time to examine your team's in-house chat app to help you get experience of how transient errors may impact your team's other apps.<ept id="p1">*</ept></source>
        </trans-unit><trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Talking the design through with your manager, you both agree that a good starting point is to identify all the places the code currently handles transient errors. You need to group these different approaches into categories, and define a common set of strategies that can be applied across all the companies applications. The existing chat app should be enhanced if it's missing any error handling.<ept id="p1">*</ept></source>
        </trans-unit><trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Explore what transient errors are for cloud-based apps<ept id="p1">**</ept></source>
        </trans-unit><trans-unit id="151" translate="yes" xml:space="preserve">
          <source>List the content that will enable the learner to <bpt id="p1">*</bpt>Define transient errors<ept id="p1">*</ept>:</source>
        </trans-unit><trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Video\Animation: Show how transient errors can bring down a service if an anti-pattern has been applied (for example, too many retries overloading a service)</source>
        </trans-unit><trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Set the scene for the issues cloud-based applications can face:</source>
        </trans-unit><trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Connectivity issues</source>
        </trans-unit><trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Timeouts</source>
        </trans-unit><trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Services unavailable</source>
        </trans-unit><trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Throughput</source>
        </trans-unit><trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Explain the challenges that need to be addressed:</source>
        </trans-unit><trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Detection</source>
        </trans-unit><trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Retry strategies</source>
        </trans-unit><trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Don't make it worse - when to back-off</source>
        </trans-unit><trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Define the difference between terminal, permanent and transient errors and the possible approaches for each type of error.</source>
        </trans-unit><trans-unit id="163" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Knowledge check<ept id="p1">**</ept></source>
        </trans-unit><trans-unit id="164" translate="yes" xml:space="preserve">
          <source>What types of questions will test <bpt id="p1">*</bpt>Identify common strategies for handling transient errors<ept id="p1">*</ept>?</source>
        </trans-unit><trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Why would an app need to back-off from trying to read from a database?</source>
        </trans-unit><trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Why is a <bpt id="p1">*</bpt>fast first retry<ept id="p1">*</ept> a good approach for cloud-based services?</source>
        </trans-unit><trans-unit id="167" translate="yes" xml:space="preserve">
          <source>What is the best approach when making a large number of retry attempts to an Azure-based service?</source>
        </trans-unit><trans-unit id="168" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Detect transient errors in code<ept id="p1">**</ept></source>
        </trans-unit><trans-unit id="169" translate="yes" xml:space="preserve">
          <source>List the content that will enable the learner to <bpt id="p1">*</bpt>Detect transient errors<ept id="p1">*</ept>:</source>
        </trans-unit><trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Do the services being used have well-documented transient failure contracts?</source>
        </trans-unit><trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Use examples for typical resources:</source>
        </trans-unit><trans-unit id="172" translate="yes" xml:space="preserve">
          <source>HTTP status codes (for example, 408, 449, 503, 504)</source>
        </trans-unit><trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Azure connections WebExceptionStatus.ConnectionClosed, WebExceptionStatus.Timeout, WebExceptionStatus.RequestCanceled</source>
        </trans-unit><trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Azure Cosmos DB <ph id="ph1">`RequestRateTooLarge`</ph> error 429</source>
        </trans-unit><trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Azure SQL Database Error Codes (for example, 40501: The service is currently busy.</source>
        </trans-unit><trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Retry the request after 10 seconds)</source>
        </trans-unit><trans-unit id="177" translate="yes" xml:space="preserve">
          <source>REST APIs may return status and time until next retry</source>
        </trans-unit><trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Use the service's built-in retry logic.</source>
        </trans-unit><trans-unit id="179" translate="yes" xml:space="preserve">
          <source>For example, reference CosmosDB <bpt id="p1">*</bpt>retryOptions<ept id="p1">*</ept>.</source>
        </trans-unit><trans-unit id="180" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Exercise - Detect transient errors in code<ept id="p1">**</ept></source>
        </trans-unit><trans-unit id="181" translate="yes" xml:space="preserve">
          <source>List the steps which apply the learning content from previous unit (separate out each language):</source>
        </trans-unit><trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Run a script in the Cloud Shell to create a cosmos DB account and database.</source>
        </trans-unit><trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Complete the steps to get the MongoDB connection string.</source>
        </trans-unit><trans-unit id="184" translate="yes" xml:space="preserve">
          <source>git clone source code.</source>
        </trans-unit><trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Build the app in chosen language.</source>
        </trans-unit><trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Review existing detection code (each example app should have implemented one) - <bpt id="p1">**</bpt>(JohnS - "one" what?)<ept id="p1">**</ept></source>
        </trans-unit><trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Add code to detect any transient errors.</source>
        </trans-unit><trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Test the code.</source>
        </trans-unit><trans-unit id="189" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Define an appropriate retry policy for cloud-based apps<ept id="p1">**</ept></source>
        </trans-unit><trans-unit id="190" translate="yes" xml:space="preserve">
          <source>List the content that will enable the learner to <bpt id="p1">*</bpt>Identify approaches to errors<ept id="p1">*</ept>:</source>
        </trans-unit><trans-unit id="191" translate="yes" xml:space="preserve">
          <source>You can take different approaches depending on the nature of the transient error.</source>
        </trans-unit><trans-unit id="192" translate="yes" xml:space="preserve">
          <source>These include:</source>
        </trans-unit><trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Fast first retry</source>
        </trans-unit><trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Exponential back-off</source>
        </trans-unit><trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Incremental intervals</source>
        </trans-unit><trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Randomized back-off intervals</source>
        </trans-unit><trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Customize when more information is available (for example, from HTTP response Retry-After header value)</source>
        </trans-unit><trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Use a circuit breaker to stop retrying indefinitely</source>
        </trans-unit><trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Expand on improving the apps resilience by having a central process that handles retries, including parameterizing retry counts and intervals.</source>
        </trans-unit><trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Explain that there are libraries that can be used to help write fault tolerant code more efficiently.</source>
        </trans-unit><trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Polly, and Resilience4j, are two currently developed open-source projects.</source>
        </trans-unit><trans-unit id="202" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Exercise - Write a retry policy<ept id="p1">**</ept></source>
        </trans-unit><trans-unit id="203" translate="yes" xml:space="preserve">
          <source>List the steps which apply the learning content from previous unit (separate out each language):</source>
        </trans-unit><trans-unit id="204" translate="yes" xml:space="preserve">
          <source>C# and Java</source>
        </trans-unit><trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Add a class to handle retries.</source>
        </trans-unit><trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Add methods to implement fast retry, randomized incremental retires, and a circuit breaker.</source>
        </trans-unit><trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Include CosmosDB retryOptions.</source>
        </trans-unit><trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Use the class to handle retries when connecting to the database.</source>
        </trans-unit><trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Node.JS</source>
        </trans-unit><trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Add code to the server.js to add functions to fast retry, randomized incremental retires, and a circuit breaker.</source>
        </trans-unit><trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Include CosmosDB retryOptions.</source>
        </trans-unit><trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Edit index.html to use these new functions when connecting to the database.</source>
        </trans-unit><trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Run the application.</source>
        </trans-unit><trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Using Azure CLI remove the firewall rule to allow connections to CosmosDB.</source>
        </trans-unit><trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Use the app and then add the firewall rule back to see the app recover.</source>
        </trans-unit><trans-unit id="216" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Log useful information related to errors faced by cloud-based apps<ept id="p1">**</ept></source>
        </trans-unit><trans-unit id="217" translate="yes" xml:space="preserve">
          <source>List the content that will enable the learner to <bpt id="p1">*</bpt>Perform appropriate logging<ept id="p1">*</ept>:</source>
        </trans-unit><trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Explain how and why to log entries for all transient errors as warnings, and why.</source>
        </trans-unit><trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Explain how and why to log time taken to recover from transient errors.</source>
        </trans-unit><trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Explain how and why to log number of retries.</source>
        </trans-unit><trans-unit id="221" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Exercise - Add application logging<ept id="p1">**</ept></source>
        </trans-unit><trans-unit id="222" translate="yes" xml:space="preserve">
          <source>List the steps which apply the learning content from previous unit (separate out each language):</source>
        </trans-unit><trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Add logging to the console for each of the retry policies.</source>
        </trans-unit><trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Run the same test, blocking CosmosDB network access, and watch the logging in the console.</source>
        </trans-unit><trans-unit id="225" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Summary<ept id="p1">**</ept></source>
        </trans-unit><trans-unit id="226" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>{How did you solve the problem in the initial scenario with the knowledge learned in the module?}<ept id="p1">*</ept></source>
        </trans-unit><trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Code was added to the chat app to handle more transient errors.</source>
        </trans-unit><trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Code was added to log transient errors.</source>
        </trans-unit><trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Several different approaches to transient errors have been defined.</source>
        </trans-unit><trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Notes</source>
        </trans-unit><trans-unit id="231" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>This module is associated directly with an OD task and therefore is a high priority for coverage.<ept id="p1">**</ept></source>
        </trans-unit><trans-unit id="232" translate="yes" xml:space="preserve">
          <source>It is general developer knowledge and does not correspond to a particular Azure service or technology, although strategies discussed should mention specific services where applicable, specifically queuing.</source>
        </trans-unit><trans-unit id="233" translate="yes" xml:space="preserve">
          <source>This module should cover standard, simple detection and mitigation strategies in C#, JavaScript and Java code.</source>
        </trans-unit><trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Code should be idiomatic.</source>
        </trans-unit><trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Module content should mention commonly-used libraries for handling transient errors, but should not be reliant on them.</source>
        </trans-unit><trans-unit id="236" translate="yes" xml:space="preserve">
          <source>It should include code samples and strategies that require no external libraries.</source>
        </trans-unit><trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Detection should focus on simple strategies for recognizing exceptions/errors such as timeouts and differentiating them (and their mitigation strategy) from non-transient errors.</source>
        </trans-unit><trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Resources:</source>
        </trans-unit><trans-unit id="239" translate="yes" xml:space="preserve">
          <source><ph id="ph1">https://docs.microsoft.com/azure/architecture/best-practices/transient-faults</ph>,</source>
        </trans-unit><trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Libraries:</source>
        </trans-unit><trans-unit id="241" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Transient Fault Handling Application Block*<ept id="p1">](https://www.nuget.org/packages/EnterpriseLibrary.TransientFaultHandling/)</ept></source>
        </trans-unit><trans-unit id="242" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Polly .NET<ept id="p1">](http://www.thepollyproject.org/)</ept></source>
        </trans-unit><trans-unit id="243" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Polly.JS<ept id="p1">](https://www.npmjs.com/package/polly-js)</ept></source>
        </trans-unit><trans-unit id="244" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Resilience4j<ept id="p1">](https://github.com/resilience4j/resilience4j)</ept></source>
        </trans-unit><trans-unit id="245" translate="yes" xml:space="preserve">
          <source>*no longer recommended</source>
        </trans-unit><trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Comsos DB retry:</source>
        </trans-unit><trans-unit id="247" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>C#<ept id="p1">](https://docs.microsoft.com/dotnet/api/microsoft.azure.documents.client.connectionpolicy.retryoptions?redirectedfrom=MSDN&amp;view=azure-dotnet#overloads)</ept></source>
        </trans-unit><trans-unit id="248" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Java<ept id="p1">](https://docs.microsoft.com/java/api/com.microsoft.azure.cosmosdb.retryoptions?view=azure-java-stable)</ept></source>
        </trans-unit><trans-unit id="249" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Node.JS<ept id="p1">](https://docs.microsoft.com/javascript/api/%40azure/cosmos/retryoptions?view=azure-node-latest)</ept></source>
        </trans-unit><trans-unit id="250" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>MongoDB<ept id="p1">](https://docs.mongodb.com/manual/core/retryable-writes/#retryable-writes)</ept></source>
        </trans-unit><trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Additional Comments</source>
        </trans-unit><trans-unit id="252" translate="yes" xml:space="preserve">
          <source>The learners will be presented with three chat apps written in C# .NET Core (console app), Node.JS (web app), and Java (console app).</source>
        </trans-unit><trans-unit id="253" translate="yes" xml:space="preserve">
          <source>All of them can be run from the Cloud Shell.</source>
        </trans-unit><trans-unit id="254" translate="yes" xml:space="preserve">
          <source>The chat app will read and write chat messages through a MongoDB API to a back-end Cosmos DB.</source>
        </trans-unit><trans-unit id="255" translate="yes" xml:space="preserve">
          <source>The module will be written generically, with the students able to switch to the language they're more familiar with.</source>
        </trans-unit></group></body></file></xliff>