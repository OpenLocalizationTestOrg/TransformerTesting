<?xml version="1.0"?><xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd"><file datatype="xml" original="6-javascript-programming.md" source-language="en-US" target-language="en-US"><header><tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1931010" tool-company="Microsoft" /><xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6-javascript-programming.551227b900f66105d52822a3dd1bf70d3cce9dd7.skl</xliffext:skl_file_name><xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version><xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2dadb0ed7b6b145a0e9eb8b273b3cdf4a7cd41f9</xliffext:ms.openlocfilehash><xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/24/2019</xliffext:ms.lasthandoff><xliffext:ms.openlocfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">learn-pr\azure\access-data-with-cosmos-db-and-sql-api\includes\6-javascript-programming.md</xliffext:ms.openlocfilepath></header><body><group id="content" extype="content"><trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Multiple documents in your database frequently need to be updated at the same time.</source>
        </trans-unit><trans-unit id="102" translate="yes" xml:space="preserve">
          <source>For your online retail application, when a user places an order and wants to use a coupon code, a credit, or a dividend (or all three at once), you need to query their account for those options, make updates to their account indicating they used them, update the order total, and process the order.</source>
        </trans-unit><trans-unit id="103" translate="yes" xml:space="preserve">
          <source>All of these actions need to happen at the same time, within a single transaction.</source>
        </trans-unit><trans-unit id="104" translate="yes" xml:space="preserve">
          <source>If the user chooses to cancel the order, you want to roll back the changes and not modify their account information, so that their coupon codes, credits, and dividends are available for their next purchase.</source>
        </trans-unit><trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The way to perform these transactions in Azure Cosmos DB is by using stored procedures and user-defined functions (UDFs).</source>
        </trans-unit><trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Stored procedures are the only way to ensure ACID (Atomicity, Consistency, Isolation, Durability) transactions because they are run on the server, and are thus referred to as server-side programming.</source>
        </trans-unit><trans-unit id="107" translate="yes" xml:space="preserve">
          <source>UDFs are also stored on the server and are used during queries to perform computational logic on values or documents within the query.</source>
        </trans-unit><trans-unit id="108" translate="yes" xml:space="preserve">
          <source>In this module, you'll learn about stored procedures and UDFs, and then run some in the portal.</source>
        </trans-unit><trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Stored procedure basics</source>
        </trans-unit><trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Stored procedures perform complex transactions on documents and properties.</source>
        </trans-unit><trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Stored procedures are written in JavaScript and are stored in a collection on Azure Cosmos DB.</source>
        </trans-unit><trans-unit id="112" translate="yes" xml:space="preserve">
          <source>By performing the stored procedures on the database engine and close to the data, you can improve performance over client-side programming.</source>
        </trans-unit><trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Stored procedures are the only way to achieve atomic transactions within Azure Cosmos DB; the client-side SDKs do not support transactions.</source>
        </trans-unit><trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Performing batch operations in stored procedures is also recommended because of the reduced need to create separate transactions.</source>
        </trans-unit><trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Stored procedure example</source>
        </trans-unit><trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The following sample is a simple HelloWorld stored procedure that gets the current context and sends a response that displays "Hello, World".</source>
        </trans-unit><trans-unit id="117" translate="yes" xml:space="preserve">
          <source>User-defined function basics</source>
        </trans-unit><trans-unit id="118" translate="yes" xml:space="preserve">
          <source>UDFs are used to extend the Azure Cosmos DB SQL query language grammar and implement custom business logic, such as calculations on properties and documents.</source>
        </trans-unit><trans-unit id="119" translate="yes" xml:space="preserve">
          <source>UDFs can be called only from inside queries and, unlike stored procedures, they do not have access to the context object, so they cannot read or write documents.</source>
        </trans-unit><trans-unit id="120" translate="yes" xml:space="preserve">
          <source>In an online commerce scenario, a UDF could be used to determine the sales tax to apply to an order total or a percentage discount to apply to products or orders.</source>
        </trans-unit><trans-unit id="121" translate="yes" xml:space="preserve">
          <source>User-defined function example</source>
        </trans-unit><trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The following sample creates a UDF to calculate tax on a product in a fictitious company based the product cost:</source>
        </trans-unit><trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Create a stored procedure in the portal</source>
        </trans-unit><trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Let's create a new stored procedure in the portal.</source>
        </trans-unit><trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The portal automatically populates a simple stored procedure that retrieves the first item in the collection, so we'll run this stored procedure first.</source>
        </trans-unit><trans-unit id="126" translate="yes" xml:space="preserve">
          <source>In the Data Explorer, click <bpt id="p1">**</bpt>New Stored Procedure<ept id="p1">**</ept>.</source>
        </trans-unit><trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Data Explorer displays a new tab with a sample stored procedure.</source>
        </trans-unit><trans-unit id="128" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Stored Procedure Id<ept id="p1">**</ept> box, enter the name <bpt id="p2">*</bpt>sample<ept id="p2">*</ept>, click <bpt id="p3">**</bpt>Save<ept id="p3">**</ept>, and then click <bpt id="p4">**</bpt>Execute<ept id="p4">**</ept>.</source>
        </trans-unit><trans-unit id="129" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Input parameters<ept id="p1">**</ept> box, type the name of a partition key, <bpt id="p2">*</bpt>33218896<ept id="p2">*</ept>, and then click <bpt id="p3">**</bpt>Execute<ept id="p3">**</ept>.</source>
        </trans-unit><trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Note that stored procedures work within a single partition.</source>
        </trans-unit><trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Run a stored procedure in the portal</source>
        </trans-unit><trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Result<ept id="p1">**</ept> pane displays the feed from the first document in the collection.</source>
        </trans-unit><trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Create a stored procedure that creates documents</source>
        </trans-unit><trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Now, let's create a stored procedure that creates documents.</source>
        </trans-unit><trans-unit id="135" translate="yes" xml:space="preserve">
          <source>In the Data Explorer, click <bpt id="p1">**</bpt>New Stored Procedure<ept id="p1">**</ept>.</source>
        </trans-unit><trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Name this stored procedure <bpt id="p1">*</bpt>createMyDocument<ept id="p1">*</ept>, copy and paste the following code into the <bpt id="p2">**</bpt>Stored Procedure Body<ept id="p2">**</ept> box, click <bpt id="p3">**</bpt>Save<ept id="p3">**</ept>, and then click <bpt id="p4">**</bpt>Execute<ept id="p4">**</ept>.</source>
        </trans-unit><trans-unit id="137" translate="yes" xml:space="preserve">
          <source>In the Input parameters box, enter a Partition Key Value of <bpt id="p1">*</bpt>33218898<ept id="p1">*</ept>, and then click <bpt id="p2">**</bpt>Execute<ept id="p2">**</ept>.</source>
        </trans-unit><trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Data Explorer displays the newly created document in the Result area.</source>
        </trans-unit><trans-unit id="139" translate="yes" xml:space="preserve">
          <source>You can go back to the Documents tab, click the <bpt id="p1">**</bpt>Refresh<ept id="p1">**</ept> button and see the new document.</source>
        </trans-unit><trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Create a user-defined function</source>
        </trans-unit><trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Now, let's create a UDF in Data Explorer.</source>
        </trans-unit><trans-unit id="142" translate="yes" xml:space="preserve">
          <source>In the Data Explorer, click <bpt id="p1">**</bpt>New UDF<ept id="p1">**</ept>.</source>
        </trans-unit><trans-unit id="143" translate="yes" xml:space="preserve">
          <source>You may need to click the down arrow next to <bpt id="p1">**</bpt>New Stored Prodedure<ept id="p1">**</ept> to see <bpt id="p2">**</bpt>New UDF<ept id="p2">**</ept>.</source>
        </trans-unit><trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Copy the following code into the window, name the UDF <bpt id="p1">*</bpt>producttax<ept id="p1">*</ept>, and then click <bpt id="p2">**</bpt>Save<ept id="p2">**</ept>.</source>
        </trans-unit><trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Once you have defined the UDF, go to the <bpt id="p1">**</bpt>Query 1<ept id="p1">**</ept> tab and copy and paste the following query into the query area to run the UDF.</source>
        </trans-unit></group></body></file></xliff>