<?xml version="1.0"?><xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd"><file datatype="xml" original="4-query-types.md" source-language="en-US" target-language="en-US"><header><tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1931010" tool-company="Microsoft" /><xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4-query-types.b0dc00d931df661f4de399dbea4751b7b32a52ce.skl</xliffext:skl_file_name><xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version><xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">507490840350dc7949fd473e8db8735e40191d32</xliffext:ms.openlocfilehash><xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">05/13/2019</xliffext:ms.lasthandoff><xliffext:ms.openlocfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">learn-pr\azure\access-data-with-cosmos-db-and-sql-api\includes\4-query-types.md</xliffext:ms.openlocfilepath></header><body><group id="content" extype="content"><trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Using the two documents you added to the database as the target of our queries, let's walk through some query basics.</source>
        </trans-unit><trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Azure Cosmos DB uses SQL queries, just like SQL Server, to perform query operations.</source>
        </trans-unit><trans-unit id="103" translate="yes" xml:space="preserve">
          <source>All properties are automatically indexed by default, so all data in the database is instantly available to query.</source>
        </trans-unit><trans-unit id="104" translate="yes" xml:space="preserve">
          <source>SQL query basics</source>
        </trans-unit><trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Every SQL query consists of a SELECT clause and optional FROM and WHERE clauses.</source>
        </trans-unit><trans-unit id="106" translate="yes" xml:space="preserve">
          <source>In addition, you can add other clauses like ORDER BY and JOIN to get the information you need.</source>
        </trans-unit><trans-unit id="107" translate="yes" xml:space="preserve">
          <source>A SQL query has the following format:</source>
        </trans-unit><trans-unit id="108" translate="yes" xml:space="preserve">
          <source>SELECT clause</source>
        </trans-unit><trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The SELECT clause determines the type of values that will be produced when the query is executed.</source>
        </trans-unit><trans-unit id="110" translate="yes" xml:space="preserve">
          <source>A value of <ph id="ph1">`SELECT *`</ph> indicates that the entire JSON document is returned.</source>
        </trans-unit><trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Query<ept id="p1">**</ept></source>
        </trans-unit><trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Returns<ept id="p1">**</ept></source>
        </trans-unit><trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Or, you can limit the output to include only certain properties by including a list of properties in the SELECT clause.</source>
        </trans-unit><trans-unit id="114" translate="yes" xml:space="preserve">
          <source>In the following query, only the ID, manufacturer, and product description are returned.</source>
        </trans-unit><trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Query<ept id="p1">**</ept></source>
        </trans-unit><trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Returns<ept id="p1">**</ept></source>
        </trans-unit><trans-unit id="117" translate="yes" xml:space="preserve">
          <source>FROM clause</source>
        </trans-unit><trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The FROM clause specifies the data source upon which the query operates.</source>
        </trans-unit><trans-unit id="119" translate="yes" xml:space="preserve">
          <source>You can make the whole collection the source of the query or you can specify a subset of the collection instead.</source>
        </trans-unit><trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The FROM clause is optional unless the source is filtered or projected later in the query.</source>
        </trans-unit><trans-unit id="121" translate="yes" xml:space="preserve">
          <source>A query such as <ph id="ph1">`SELECT * FROM Products`</ph> indicates that the entire Products collection is the source over which to enumerate the query.</source>
        </trans-unit><trans-unit id="122" translate="yes" xml:space="preserve">
          <source>A collection can be aliased, such as <ph id="ph1">`SELECT p.id FROM Products AS p`</ph> or simply <ph id="ph2">`SELECT p.id FROM Products p`</ph>, where <ph id="ph3">`p`</ph> is the equivalent of <ph id="ph4">`Products`</ph>.</source>
        </trans-unit><trans-unit id="123" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`AS`</ph> is an optional keyword to alias the identifier.</source>
        </trans-unit><trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Once aliased, the original source cannot be bound.</source>
        </trans-unit><trans-unit id="125" translate="yes" xml:space="preserve">
          <source>For example, <ph id="ph1">`SELECT Products.id FROM Products p`</ph> is syntactically invalid because the identifier "Products" cannot be resolved anymore.</source>
        </trans-unit><trans-unit id="126" translate="yes" xml:space="preserve">
          <source>All properties that need to be referenced must be fully qualified.</source>
        </trans-unit><trans-unit id="127" translate="yes" xml:space="preserve">
          <source>In the absence of strict schema adherence, this is enforced to avoid any ambiguous bindings.</source>
        </trans-unit><trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Therefore, <ph id="ph1">`SELECT id FROM Products p`</ph> is syntactically invalid because the property <ph id="ph2">`id`</ph> is not bound.</source>
        </trans-unit><trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Subdocuments in a FROM clause</source>
        </trans-unit><trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The source can also be reduced to a smaller subset.</source>
        </trans-unit><trans-unit id="131" translate="yes" xml:space="preserve">
          <source>For instance, to enumerate only a subtree in each document, the subroot could then become the source, as shown in the following example:</source>
        </trans-unit><trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Query<ept id="p1">**</ept></source>
        </trans-unit><trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Results<ept id="p1">**</ept></source>
        </trans-unit><trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Although the above example used an array as the source, an object could also be used as the source, which is what's shown in the following example.</source>
        </trans-unit><trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Any valid JSON value (that's not undefined) that can be found in the source is considered for inclusion in the result of the query.</source>
        </trans-unit><trans-unit id="136" translate="yes" xml:space="preserve">
          <source>If some products donâ€™t have a <ph id="ph1">`shipping.weight`</ph> value, they are excluded in the query result.</source>
        </trans-unit><trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Query<ept id="p1">**</ept></source>
        </trans-unit><trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Results<ept id="p1">**</ept></source>
        </trans-unit><trans-unit id="139" translate="yes" xml:space="preserve">
          <source>WHERE clause</source>
        </trans-unit><trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The WHERE clause specifies the conditions that the JSON documents provided by the source must satisfy in order to be included as part of the result.</source>
        </trans-unit><trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Any JSON document must evaluate the specified conditions to <bpt id="p1">**</bpt>true<ept id="p1">**</ept> to be considered for the result.</source>
        </trans-unit><trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The WHERE clause is optional.</source>
        </trans-unit><trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The following query requests documents that contain an ID whose value is 1:</source>
        </trans-unit><trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Query<ept id="p1">**</ept></source>
        </trans-unit><trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Results<ept id="p1">**</ept></source>
        </trans-unit><trans-unit id="146" translate="yes" xml:space="preserve">
          <source>ORDER BY clause</source>
        </trans-unit><trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The ORDER BY clause enables you to order the results in ascending or descending order.</source>
        </trans-unit><trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The following ORDER BY query returns the price, description, and product ID for all products, ordered by price, in ascending order:</source>
        </trans-unit><trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Query<ept id="p1">**</ept></source>
        </trans-unit><trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Results<ept id="p1">**</ept></source>
        </trans-unit><trans-unit id="151" translate="yes" xml:space="preserve">
          <source>JOIN clause</source>
        </trans-unit><trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The JOIN clause enables you to perform inner joins with the document and the document subroots.</source>
        </trans-unit><trans-unit id="153" translate="yes" xml:space="preserve">
          <source>So in the product database, for example, you can join the documents with the shipping data.</source>
        </trans-unit><trans-unit id="154" translate="yes" xml:space="preserve">
          <source>In the following query, the product IDs are returned for each product that has a shipping method.</source>
        </trans-unit><trans-unit id="155" translate="yes" xml:space="preserve">
          <source>If you added a third product that didn't have a shipping property, the result would be the same because the third item would be excluded for not having a shipping property.</source>
        </trans-unit><trans-unit id="156" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Query<ept id="p1">**</ept></source>
        </trans-unit><trans-unit id="157" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Results<ept id="p1">**</ept></source>
        </trans-unit><trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Geospatial queries</source>
        </trans-unit><trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Geospatial queries enable you to perform spatial queries using GeoJSON Points.</source>
        </trans-unit><trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Using the coordinates in the database, you can calculate the distance between two points and determine whether a Point, Polygon, or LineString is within another Point, Polygon, or LineString.</source>
        </trans-unit><trans-unit id="161" translate="yes" xml:space="preserve">
          <source>For product catalog data, this would enable your users to enter their location information and determine whether there were any stores within a 50-mile radius that have the item they're looking for.</source>
        </trans-unit><trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Summary</source>
        </trans-unit><trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Being able to quickly query all your data after adding it to Azure Cosmos DB and using familiar SQL query techniques can help you and your customers to explore and gain insights into your stored data.</source>
        </trans-unit></group></body></file></xliff>