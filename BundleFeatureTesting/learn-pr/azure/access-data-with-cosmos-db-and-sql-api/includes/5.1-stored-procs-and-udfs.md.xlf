<?xml version="1.0"?><xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd"><file datatype="xml" original="5.1-stored-procs-and-udfs.md" source-language="en-US" target-language="en-US"><header><tool tool-id="mdxliff" tool-name="mdxliff"  tool-company="Microsoft" /><xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5.1-stored-procs-and-udfs.03762a.10999c6cba223690e70e08450e449f68a49e0feb.skl</xliffext:skl_file_name><xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version><xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">10999c6cba223690e70e08450e449f68a49e0feb</xliffext:ms.openlocfilehash><xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ba7e452ac39d7f09a5646044b44de0e1cdc54982</xliffext:ms.sourcegitcommit><xliffext:ms.openlocfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">learn-pr\azure\access-data-with-cosmos-db-and-sql-api\includes\5.1-stored-procs-and-udfs.md</xliffext:ms.openlocfilepath></header><body><group id="content" extype="content"><trans-unit id="101" translate="yes" xml:space="preserve">
          <source>In your online retail application, when a user places an order and wants to use a coupon code, a credit, or a dividend (or all three at once), you need to query their account for those options, make updates to their account indicating they used them, update the order total, and process the order.</source>
        </trans-unit><trans-unit id="102" translate="yes" xml:space="preserve">
          <source>All of these actions need to happen at the same time, within a single transaction.</source>
        </trans-unit><trans-unit id="103" translate="yes" xml:space="preserve">
          <source>If the user chooses to cancel the order, you want to roll back the changes and not modify their account information, so that their coupon codes, credits, and dividends are available for their next purchase.</source>
        </trans-unit><trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The way to perform these transactions in Azure Cosmos DB is by using stored procedures and user-defined functions (UDFs).</source>
        </trans-unit><trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Stored procedures are the only way to ensure <bpt id="p1">**</bpt>ACID<ept id="p1">**</ept> (Atomicity, Consistency, Isolation, Durability) transactions because they are run on the server, and are thus referred to as server-side programming.</source>
        </trans-unit><trans-unit id="106" translate="yes" xml:space="preserve">
          <source>UDFs are also stored on the server and are used during queries to perform computational logic on values or documents within the query.</source>
        </trans-unit><trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Stored procedure basics</source>
        </trans-unit><trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Stored procedures perform complex transactions on documents and properties.</source>
        </trans-unit><trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Stored procedures are written in JavaScript and are stored in a collection on Azure Cosmos DB.</source>
        </trans-unit><trans-unit id="110" translate="yes" xml:space="preserve">
          <source>By performing the stored procedures on the database engine and close to the data, you can improve performance over client-side programming.</source>
        </trans-unit><trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Stored procedures are the only way to achieve atomic transactions within Azure Cosmos DB; the client-side SDKs do not support transactions.</source>
        </trans-unit><trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Performing batch operations in stored procedures is also recommended because of the reduced need to create separate transactions.</source>
        </trans-unit><trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Stored procedure example</source>
        </trans-unit><trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The following sample is a simple HelloWorld stored procedure that gets the current context and sends a response that displays "Hello, World".</source>
        </trans-unit><trans-unit id="115" translate="yes" xml:space="preserve">
          <source>User-defined function basics</source>
        </trans-unit><trans-unit id="116" translate="yes" xml:space="preserve">
          <source>UDFs are used to extend the Azure Cosmos DB SQL query language grammar and implement custom business logic, such as calculations on properties and documents.</source>
        </trans-unit><trans-unit id="117" translate="yes" xml:space="preserve">
          <source>UDFs can be called only from inside queries and, unlike stored procedures, they do not have access to the context object, so they cannot read or write documents.</source>
        </trans-unit><trans-unit id="118" translate="yes" xml:space="preserve">
          <source>In an online commerce scenario, a UDF could be used to determine the sales tax to apply to an order total or a percentage discount to apply to products or orders.</source>
        </trans-unit><trans-unit id="119" translate="yes" xml:space="preserve">
          <source>User-defined function example</source>
        </trans-unit><trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The following sample creates a UDF to calculate tax on a product in a fictitious company based the product cost:</source>
        </trans-unit><trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Let's try these features out in the Data Explorer.</source>
        </trans-unit></group></body></file></xliff>