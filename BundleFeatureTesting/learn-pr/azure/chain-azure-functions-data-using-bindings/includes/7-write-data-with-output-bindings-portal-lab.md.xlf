<?xml version="1.0"?><xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd"><file datatype="xml" original="7-write-data-with-output-bindings-portal-lab.md" source-language="en-US" target-language="en-US"><header><tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1931010" tool-company="Microsoft" /><xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7-write-data-with-output-bindings-portal-lab.074f210fb0c03829997b5b46521595b3a7dca5af.skl</xliffext:skl_file_name><xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version><xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5da55c936c62d6f75c95e923bebedbc6c9e42401</xliffext:ms.openlocfilehash><xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/24/2019</xliffext:ms.lasthandoff><xliffext:ms.openlocfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">learn-pr\azure\chain-azure-functions-data-using-bindings\includes\7-write-data-with-output-bindings-portal-lab.md</xliffext:ms.openlocfilepath></header><body><group id="content" extype="content"><trans-unit id="101" translate="yes" xml:space="preserve">
          <source>In our last exercise, we implemented a scenario to look up bookmarks in an Azure Cosmos DB database.</source>
        </trans-unit><trans-unit id="102" translate="yes" xml:space="preserve">
          <source>We configured an input binding to read data from our bookmarks collection.</source>
        </trans-unit><trans-unit id="103" translate="yes" xml:space="preserve">
          <source>But, we can do more.</source>
        </trans-unit><trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Let's expand the scenario to include writing.</source>
        </trans-unit><trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Consider the following flowchart:</source>
        </trans-unit><trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Flow diagram showing the process of finding a bookmark in our Cosmos DB back-end.</source>
        </trans-unit><trans-unit id="107" translate="yes" xml:space="preserve">
          <source>When the Azure function receives a request with the bookmark id, it first checks whether the request is valid, if not an error response is generated.</source>
        </trans-unit><trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For valid requests, the function checks if the bookmark id is present in the Cosmos DB, if not present an error response is generated.</source>
        </trans-unit><trans-unit id="109" translate="yes" xml:space="preserve">
          <source>If the bookmark id is found, a success response is generated.</source>
        </trans-unit><trans-unit id="110" translate="yes" xml:space="preserve">
          <source>In this scenario, we'll receive requests to add bookmarks to our collection.</source>
        </trans-unit><trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The requests pass in the desired key, or ID, along with the bookmark URL.</source>
        </trans-unit><trans-unit id="112" translate="yes" xml:space="preserve">
          <source>As you can see in the flowchart, we'll respond with an error if the key already exists in our back end.</source>
        </trans-unit><trans-unit id="113" translate="yes" xml:space="preserve">
          <source>If the key that was passed to us is <bpt id="p1">*</bpt>not<ept id="p1">*</ept> found, we'll add the new bookmark to our database.</source>
        </trans-unit><trans-unit id="114" translate="yes" xml:space="preserve">
          <source>We could stop there, but let's do a little more.</source>
        </trans-unit><trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Notice another step in the flowchart?</source>
        </trans-unit><trans-unit id="116" translate="yes" xml:space="preserve">
          <source>So far we haven't done much with the data that we receive in terms of processing.</source>
        </trans-unit><trans-unit id="117" translate="yes" xml:space="preserve">
          <source>We move what we receive into a database.</source>
        </trans-unit><trans-unit id="118" translate="yes" xml:space="preserve">
          <source>However, in a real solution, it is possible that we'd probably process the data in some fashion.</source>
        </trans-unit><trans-unit id="119" translate="yes" xml:space="preserve">
          <source>We can decide to do all processing in the same function, but in this lab we'll show a pattern that offloads further processing to another component or piece of business logic.</source>
        </trans-unit><trans-unit id="120" translate="yes" xml:space="preserve">
          <source>What might be a good example of this offloading of work in our bookmarks scenario?</source>
        </trans-unit><trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Well, what if we send the new bookmark to a QR code generation service?</source>
        </trans-unit><trans-unit id="122" translate="yes" xml:space="preserve">
          <source>That service would, in turn, generate a QR code for the URL, store the image in blob storage, and add the address of the QR image back into the entry in our bookmarks collection.</source>
        </trans-unit><trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Calling a service to generate a QR image is time consuming so, rather than wait for the result, we hand it off to a function and let it take care of this asynchronously.</source>
        </trans-unit><trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Just as Azure Functions supports input bindings for various integration sources, it also has a set of output bindings templates to make it easy for you to write data to data sources.</source>
        </trans-unit><trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Output bindings are also configured in the <bpt id="p1">*</bpt>function.json<ept id="p1">*</ept> file.</source>
        </trans-unit><trans-unit id="126" translate="yes" xml:space="preserve">
          <source>As you'll see in this exercise, we can configure our function to work with multiple data sources and services.</source>
        </trans-unit><trans-unit id="127" translate="yes" xml:space="preserve">
          <source>This exercise builds on the previous one.</source>
        </trans-unit><trans-unit id="128" translate="yes" xml:space="preserve">
          <source>It uses the same Azure Cosmos DB database and input binding.</source>
        </trans-unit><trans-unit id="129" translate="yes" xml:space="preserve">
          <source>If you haven't worked through that unit, we recommend doing so before you proceed with this one.</source>
        </trans-unit><trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Create an HTTP-triggered function</source>
        </trans-unit><trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Make sure you are signed into the <bpt id="p1">[</bpt>Azure portal<ept id="p1">](https://portal.azure.com/learn.docs.microsoft.com?azure-portal=true)</ept> using the same account you activated the sandbox with.</source>
        </trans-unit><trans-unit id="132" translate="yes" xml:space="preserve">
          <source>In the portal, navigate to the function app that you created in this module.</source>
        </trans-unit><trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Select the Add (<bpt id="p1">**</bpt><ph id="ph1">+</ph><ept id="p1">**</ept>) button next to <bpt id="p2">**</bpt>Functions<ept id="p2">**</ept>.</source>
        </trans-unit><trans-unit id="134" translate="yes" xml:space="preserve">
          <source>This action starts the function creation process.</source>
        </trans-unit><trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The page shows us the current set of supported triggers.</source>
        </trans-unit><trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Select <bpt id="p1">**</bpt>HTTP trigger<ept id="p1">**</ept>.</source>
        </trans-unit><trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Fill out the <bpt id="p1">**</bpt>New Function<ept id="p1">**</ept> pane that's displayed at the right by using the following values:</source>
        </trans-unit><trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Field</source>
        </trans-unit><trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Value</source>
        </trans-unit><trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit><trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Authorization level</source>
        </trans-unit><trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Function<ept id="p1">**</ept></source>
        </trans-unit><trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Select <bpt id="p1">**</bpt>Create<ept id="p1">**</ept> to create your function.</source>
        </trans-unit><trans-unit id="144" translate="yes" xml:space="preserve">
          <source>This action opens the <bpt id="p1">**</bpt>index.js<ept id="p1">**</ept> file in the code editor and displays a default implementation of the HTTP-triggered function.</source>
        </trans-unit><trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Add an Azure Cosmos DB input binding</source>
        </trans-unit><trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Let's repeat what we did in the preceding module to add an Azure Cosmos DB input binding.</source>
        </trans-unit><trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Make sure our new function, <ph id="ph1">[!INCLUDE [func-name-add](./func-name-add.md)]</ph>, is selected in the Functions list.</source>
        </trans-unit><trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Select <bpt id="p1">**</bpt>Integrate<ept id="p1">**</ept> in the left pane to open the integration tab.</source>
        </trans-unit><trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Select <bpt id="p1">**</bpt>New Input<ept id="p1">**</ept> in the <bpt id="p2">**</bpt>Inputs<ept id="p2">**</ept> column to display the list of all possible input binding types.</source>
        </trans-unit><trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Select <bpt id="p1">**</bpt>Azure Cosmos DB<ept id="p1">**</ept> in the list, followed by <bpt id="p2">**</bpt>Select<ept id="p2">**</ept>.</source>
        </trans-unit><trans-unit id="151" translate="yes" xml:space="preserve">
          <source>If a message appears asking  you to install the Microsoft.Azure.WebJobs.Extensions.CosmosDB extension, select <bpt id="p1">**</bpt>install<ept id="p1">**</ept> and wait for it to finish.</source>
        </trans-unit><trans-unit id="152" translate="yes" xml:space="preserve">
          <source>In the  <bpt id="p1">**</bpt>Azure Cosmos DB account connection<ept id="p1">**</ept> field, select <bpt id="p2">**</bpt>new<ept id="p2">**</ept>.</source>
        </trans-unit><trans-unit id="153" translate="yes" xml:space="preserve">
          <source>This action opens the <bpt id="p1">**</bpt>Connection<ept id="p1">**</ept> dialog.</source>
        </trans-unit><trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Select your subscription and database account and then choose <bpt id="p1">**</bpt>Select<ept id="p1">**</ept>.</source>
        </trans-unit><trans-unit id="155" translate="yes" xml:space="preserve">
          <source>A new connection to the database is configured and is shown in the <bpt id="p1">**</bpt>Azure Cosmos DB account connection<ept id="p1">**</ept> field.</source>
        </trans-unit><trans-unit id="156" translate="yes" xml:space="preserve">
          <source>If you're curious about what is actually behind this abstract name, click <bpt id="p1">*</bpt>show value<ept id="p1">*</ept> to reveal the connection string.</source>
        </trans-unit><trans-unit id="157" translate="yes" xml:space="preserve">
          <source>You want to look up a bookmark with a specific ID, so let's tie the ID we receive to the binding.</source>
        </trans-unit><trans-unit id="158" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Document ID (optional)<ept id="p1">**</ept> field, enter <ph id="ph1">`{id}`</ph>.</source>
        </trans-unit><trans-unit id="159" translate="yes" xml:space="preserve">
          <source>This syntax is known as a <bpt id="p1">*</bpt>binding expression<ept id="p1">*</ept>.</source>
        </trans-unit><trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The function is triggered by an HTTP request that uses a query string to specify the ID to look up.</source>
        </trans-unit><trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Since IDs are unique in our collection, the binding will return either 0 (not found) or 1 (found) documents.</source>
        </trans-unit><trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Carefully fill out the remaining fields on this page using the values in the following table.</source>
        </trans-unit><trans-unit id="163" translate="yes" xml:space="preserve">
          <source>At any time, you can click on the information icon to the right of each field name to learn more about the purpose of each field.</source>
        </trans-unit><trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Setting</source>
        </trans-unit><trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Value</source>
        </trans-unit><trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit><trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Document parameter name</source>
        </trans-unit><trans-unit id="168" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>bookmark<ept id="p1">**</ept></source>
        </trans-unit><trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The name used to identify this binding in your code.</source>
        </trans-unit><trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Database name</source>
        </trans-unit><trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The database to work with.</source>
        </trans-unit><trans-unit id="172" translate="yes" xml:space="preserve">
          <source>This value is the database name we set earlier in this lesson.</source>
        </trans-unit><trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Collection Name</source>
        </trans-unit><trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The collection from which we'll read data.</source>
        </trans-unit><trans-unit id="175" translate="yes" xml:space="preserve">
          <source>This setting was defined earlier in the lesson.</source>
        </trans-unit><trans-unit id="176" translate="yes" xml:space="preserve">
          <source>SQL Query (optional)</source>
        </trans-unit><trans-unit id="177" translate="yes" xml:space="preserve">
          <source>leave blank</source>
        </trans-unit><trans-unit id="178" translate="yes" xml:space="preserve">
          <source>We are only retrieving one document at a time based on the ID.</source>
        </trans-unit><trans-unit id="179" translate="yes" xml:space="preserve">
          <source>So, filtering with the Document ID field is a better than using a SQL Query in this instance.</source>
        </trans-unit><trans-unit id="180" translate="yes" xml:space="preserve">
          <source>We could craft a SQL Query to return one entry (<ph id="ph1">`SELECT * from b where b.ID = {id}`</ph>).</source>
        </trans-unit><trans-unit id="181" translate="yes" xml:space="preserve">
          <source>That query would indeed return a document, but it would return it in a document collection.</source>
        </trans-unit><trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Our code would have to manipulate a collection unnecessarily.</source>
        </trans-unit><trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Use the SQL Query approach when you want to get multiple documents.</source>
        </trans-unit><trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Partition key (optional)</source>
        </trans-unit><trans-unit id="185" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>{id}<ept id="p1">**</ept></source>
        </trans-unit><trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Add the partition key that we defined when we created the <ph id="ph1">[!INCLUDE [cosmos-coll-name](./cosmos-coll-name.md)]</ph> Cosmos DB collection earlier.</source>
        </trans-unit><trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The key entered here (specified in input binding format <ph id="ph1">`{&lt;key&gt;}`</ph>) must match the one in the collection.</source>
        </trans-unit><trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Select <bpt id="p1">**</bpt>Save<ept id="p1">**</ept> to save all changes to this binding configuration.</source>
        </trans-unit><trans-unit id="189" translate="yes" xml:space="preserve">
          <source>We now have an Azure Cosmos DB input binding.</source>
        </trans-unit><trans-unit id="190" translate="yes" xml:space="preserve">
          <source>It's time to add an output binding so we can write new entries to our collection.</source>
        </trans-unit><trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Add an Azure Cosmos DB output binding</source>
        </trans-unit><trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Make sure our function, <ph id="ph1">[!INCLUDE [func-name-add](./func-name-add.md)]</ph>, is still selected in the Functions list.</source>
        </trans-unit><trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Select <bpt id="p1">**</bpt>Integrate<ept id="p1">**</ept> in the left pane to open the integration tab.</source>
        </trans-unit><trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Select <bpt id="p1">**</bpt>New Output<ept id="p1">**</ept> in the <bpt id="p2">**</bpt>Outputs<ept id="p2">**</ept> column to display the list of all possible output binding types.</source>
        </trans-unit><trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Select <bpt id="p1">**</bpt>Azure Cosmos DB<ept id="p1">**</ept> in the list, and then choose <bpt id="p2">**</bpt>Select<ept id="p2">**</ept>.</source>
        </trans-unit><trans-unit id="196" translate="yes" xml:space="preserve">
          <source>The  <bpt id="p1">**</bpt>Azure Cosmos DB account connection<ept id="p1">**</ept> field should be pre-populated with the connection you created when you added the Cosmos DB input binding.</source>
        </trans-unit><trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Carefully fill out the remaining fields on this page using the values in the following table.</source>
        </trans-unit><trans-unit id="198" translate="yes" xml:space="preserve">
          <source>At any time, you can click on the information icon to the right of each field name to learn more about the purpose of each field.</source>
        </trans-unit><trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Setting</source>
        </trans-unit><trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Value</source>
        </trans-unit><trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit><trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Document parameter name</source>
        </trans-unit><trans-unit id="203" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>newbookmark<ept id="p1">**</ept></source>
        </trans-unit><trans-unit id="204" translate="yes" xml:space="preserve">
          <source>The name used to identify this binding in your code.</source>
        </trans-unit><trans-unit id="205" translate="yes" xml:space="preserve">
          <source>This parameter is used to write a new bookmark entry.</source>
        </trans-unit><trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Database name</source>
        </trans-unit><trans-unit id="207" translate="yes" xml:space="preserve">
          <source>The database to work with.</source>
        </trans-unit><trans-unit id="208" translate="yes" xml:space="preserve">
          <source>This value is the database name we set earlier in this lesson.</source>
        </trans-unit><trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Collection Name</source>
        </trans-unit><trans-unit id="210" translate="yes" xml:space="preserve">
          <source>The collection from which we'll read data.</source>
        </trans-unit><trans-unit id="211" translate="yes" xml:space="preserve">
          <source>This setting was defined earlier in the lesson.</source>
        </trans-unit><trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Partition key (optional)</source>
        </trans-unit><trans-unit id="213" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>{id}<ept id="p1">**</ept></source>
        </trans-unit><trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Add the partition key that we defined when we created the <ph id="ph1">[!INCLUDE [cosmos-coll-name](./cosmos-coll-name.md)]</ph> Cosmos DB collection earlier.</source>
        </trans-unit><trans-unit id="215" translate="yes" xml:space="preserve">
          <source>The key entered here (specified in input binding format <ph id="ph1">`{&lt;key&gt;}`</ph>) must match the one in the collection.</source>
        </trans-unit><trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Collection throughput (optional)</source>
        </trans-unit><trans-unit id="217" translate="yes" xml:space="preserve">
          <source>leave blank</source>
        </trans-unit><trans-unit id="218" translate="yes" xml:space="preserve">
          <source>We can accept the default here.</source>
        </trans-unit><trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Select <bpt id="p1">**</bpt>Save<ept id="p1">**</ept> to save all changes to this binding configuration.</source>
        </trans-unit><trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Now we have a binding to read from our collection, and one to write to it.</source>
        </trans-unit><trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Add an Azure Queue Storage output binding</source>
        </trans-unit><trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Azure Queue storage is a service for storing messages that can be accessed from anywhere in the world.</source>
        </trans-unit><trans-unit id="223" translate="yes" xml:space="preserve">
          <source>The size of a single message can be as much as 64 KB, and a queue can contain millions of messages<ph id="ph1">&amp;mdash;</ph>up to the total capacity of the storage account in which it is defined.</source>
        </trans-unit><trans-unit id="224" translate="yes" xml:space="preserve">
          <source>The following diagram shows at a high level how a queue is used in our scenario:</source>
        </trans-unit><trans-unit id="225" translate="yes" xml:space="preserve">
          <source>An illustration showing a storage queue and two functions one pushing and the other popping messages onto the queue</source>
        </trans-unit><trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Here you can see that the new function, <ph id="ph1">[!INCLUDE [func-name-add](./func-name-add.md)]</ph>, adds messages to a queue.</source>
        </trans-unit><trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Another function<ph id="ph1">&amp;mdash;</ph>for example, a fictitious function called <bpt id="p1">*</bpt>gen-qr-code<ept id="p1">*</ept><ph id="ph2">&amp;mdash;</ph>will pop messages from the same queue and process the request.</source>
        </trans-unit><trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Since we write, or <bpt id="p1">*</bpt>push<ept id="p1">*</ept>, messages to the queue from <ph id="ph1">[!INCLUDE [func-name-add](./func-name-add.md)]</ph>, we'll add a new output binding to your solution.</source>
        </trans-unit><trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Let's create the binding through the portal UI this time.</source>
        </trans-unit><trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Once again, select <bpt id="p1">**</bpt>Integrate<ept id="p1">**</ept> in the left function menu to open the integration tab.</source>
        </trans-unit><trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Select <bpt id="p1">**</bpt>New Output<ept id="p1">**</ept> in the <bpt id="p2">**</bpt>Outputs<ept id="p2">**</ept> column.</source>
        </trans-unit><trans-unit id="232" translate="yes" xml:space="preserve">
          <source>A list of all possible output binding types is displayed.</source>
        </trans-unit><trans-unit id="233" translate="yes" xml:space="preserve">
          <source>In the list, select <bpt id="p1">**</bpt>Azure Queue Storage<ept id="p1">**</ept>, then select <bpt id="p2">**</bpt>Select<ept id="p2">**</ept>.</source>
        </trans-unit><trans-unit id="234" translate="yes" xml:space="preserve">
          <source>This action opens the Azure Queue Storage output configuration page.</source>
        </trans-unit><trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Next, we'll set up a storage account connection.</source>
        </trans-unit><trans-unit id="236" translate="yes" xml:space="preserve">
          <source>This is where our queue will be hosted.</source>
        </trans-unit><trans-unit id="237" translate="yes" xml:space="preserve">
          <source>If a message appears asking  you to install the Microsoft.Azure.WebJobs.Extensions.Storage extension, select <bpt id="p1">**</bpt>install<ept id="p1">**</ept> and wait for it to finish.</source>
        </trans-unit><trans-unit id="238" translate="yes" xml:space="preserve">
          <source>To the right of the <bpt id="p1">**</bpt>Storage account connection<ept id="p1">**</ept> field, select <bpt id="p2">**</bpt>new<ept id="p2">**</ept>.</source>
        </trans-unit><trans-unit id="239" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Storage Account<ept id="p1">**</ept> selection pane opens.</source>
        </trans-unit><trans-unit id="240" translate="yes" xml:space="preserve">
          <source>When we started this module and you created your function app, a storage account was also created at that time.</source>
        </trans-unit><trans-unit id="241" translate="yes" xml:space="preserve">
          <source>It's listed in this pane, so select it.</source>
        </trans-unit><trans-unit id="242" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Storage account connection<ept id="p1">**</ept> field is populated with the name of a connection.</source>
        </trans-unit><trans-unit id="243" translate="yes" xml:space="preserve">
          <source>If you want to see the connection string value, select <bpt id="p1">**</bpt>show value<ept id="p1">**</ept>.</source>
        </trans-unit><trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Although we could keep the default values in all the other fields, let's change the following to lend more meaning to the properties:</source>
        </trans-unit><trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Property</source>
        </trans-unit><trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Old value</source>
        </trans-unit><trans-unit id="247" translate="yes" xml:space="preserve">
          <source>New value</source>
        </trans-unit><trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit><trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Queue name</source>
        </trans-unit><trans-unit id="250" translate="yes" xml:space="preserve">
          <source>outqueue</source>
        </trans-unit><trans-unit id="251" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>bookmarks-post-process<ept id="p1">**</ept></source>
        </trans-unit><trans-unit id="252" translate="yes" xml:space="preserve">
          <source>The name of the queue where we're placing bookmarks so that they can be processed further by another function.</source>
        </trans-unit><trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Message parameter name</source>
        </trans-unit><trans-unit id="254" translate="yes" xml:space="preserve">
          <source>outputQueueItem</source>
        </trans-unit><trans-unit id="255" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>newmessage<ept id="p1">**</ept></source>
        </trans-unit><trans-unit id="256" translate="yes" xml:space="preserve">
          <source>The binding property we'll use in code.</source>
        </trans-unit><trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Remember to select <bpt id="p1">**</bpt>Save<ept id="p1">**</ept> to save your changes.</source>
        </trans-unit><trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Update function implementation</source>
        </trans-unit><trans-unit id="259" translate="yes" xml:space="preserve">
          <source>We now have all our bindings set up for the <ph id="ph1">[!INCLUDE [func-name-add](./func-name-add.md)]</ph> function.</source>
        </trans-unit><trans-unit id="260" translate="yes" xml:space="preserve">
          <source>It's time to use them in our function.</source>
        </trans-unit><trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Select your function, <ph id="ph1">[!INCLUDE [func-name-add](./func-name-add.md)]</ph>, to open the <bpt id="p1">**</bpt>index.js<ept id="p1">**</ept> file in the code editor.</source>
        </trans-unit><trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Replace all the code in the <bpt id="p1">*</bpt>index.js<ept id="p1">*</ept> file with the code from the following snippet and then <bpt id="p2">**</bpt>Save<ept id="p2">**</ept>:</source>
        </trans-unit><trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Let's break down what this code does:</source>
        </trans-unit><trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Because this function changes our data, we expect the HTTP request to be a POST and the bookmark data to be part of the request body.</source>
        </trans-unit><trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Our Azure Cosmos DB input binding attempts to retrieve a document, or bookmark, by using the <ph id="ph1">`id`</ph> that we receive.</source>
        </trans-unit><trans-unit id="266" translate="yes" xml:space="preserve">
          <source>If it finds an entry, the <ph id="ph1">`bookmark`</ph> object will be set.</source>
        </trans-unit><trans-unit id="267" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`if(bookmark)`</ph> condition checks to see whether an entry was found.</source>
        </trans-unit><trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Adding to the database is as simple as setting the <ph id="ph1">`context.bindings.newbookmark`</ph> binding parameter to the new bookmark entry, which we have created as a JSON string.</source>
        </trans-unit><trans-unit id="269" translate="yes" xml:space="preserve">
          <source>Posting a message to our queue is as simple as setting the  <ph id="ph1">`context.bindings.newmessage`</ph> parameter.</source>
        </trans-unit><trans-unit id="270" translate="yes" xml:space="preserve">
          <source>The only task you performed was to create a queue binding.</source>
        </trans-unit><trans-unit id="271" translate="yes" xml:space="preserve">
          <source>You never created the queue explicitly.</source>
        </trans-unit><trans-unit id="272" translate="yes" xml:space="preserve">
          <source>You are witnessing the power of bindings!</source>
        </trans-unit><trans-unit id="273" translate="yes" xml:space="preserve">
          <source>As the following callout says, the queue is automatically created for you if it doesn't exist.</source>
        </trans-unit><trans-unit id="274" translate="yes" xml:space="preserve">
          <source>Screenshot calling out that the queue will be auto-created.</source>
        </trans-unit><trans-unit id="275" translate="yes" xml:space="preserve">
          <source>So, that's it.</source>
        </trans-unit><trans-unit id="276" translate="yes" xml:space="preserve">
          <source>Let's see our work in action in the next section.</source>
        </trans-unit><trans-unit id="277" translate="yes" xml:space="preserve">
          <source>Try it out</source>
        </trans-unit><trans-unit id="278" translate="yes" xml:space="preserve">
          <source>Now that we have multiple output bindings, testing becomes a little trickier.</source>
        </trans-unit><trans-unit id="279" translate="yes" xml:space="preserve">
          <source>In previous labs we were content to test by sending an HTTP request and a query string, but we'll want to perform an HTTP post this time.</source>
        </trans-unit><trans-unit id="280" translate="yes" xml:space="preserve">
          <source>We also need to check to see whether messages are making it into a queue.</source>
        </trans-unit><trans-unit id="281" translate="yes" xml:space="preserve">
          <source>With our function, <ph id="ph1">[!INCLUDE [func-name-add](./func-name-add.md)]</ph>, selected in the Function Apps portal, select the Test menu item at the far right to expand it.</source>
        </trans-unit><trans-unit id="282" translate="yes" xml:space="preserve">
          <source>Select the <bpt id="p1">**</bpt>Test<ept id="p1">**</ept> menu item, and verify that you have the test pane open.</source>
        </trans-unit><trans-unit id="283" translate="yes" xml:space="preserve">
          <source>The following screenshot shows what it should look like:</source>
        </trans-unit><trans-unit id="284" translate="yes" xml:space="preserve">
          <source>Screenshot showing the function Test Panel expanded.</source>
        </trans-unit><trans-unit id="285" translate="yes" xml:space="preserve">
          <source>Make sure that <bpt id="p1">**</bpt>POST<ept id="p1">**</ept> is selected in the HTTP method drop-down list.</source>
        </trans-unit><trans-unit id="286" translate="yes" xml:space="preserve">
          <source>Replace the content of the request body with the following JSON payload:</source>
        </trans-unit><trans-unit id="287" translate="yes" xml:space="preserve">
          <source>Select <bpt id="p1">**</bpt>Run<ept id="p1">**</ept> at the bottom of the test pane.</source>
        </trans-unit><trans-unit id="288" translate="yes" xml:space="preserve">
          <source>Verify that the <bpt id="p1">**</bpt>Output<ept id="p1">**</ept> window displays the "Bookmark already exists" message, as shown in the following diagram:</source>
        </trans-unit><trans-unit id="289" translate="yes" xml:space="preserve">
          <source>Screenshot showing Test Panel and result of a failed test.</source>
        </trans-unit><trans-unit id="290" translate="yes" xml:space="preserve">
          <source>Replace the request body with the following payload:</source>
        </trans-unit><trans-unit id="291" translate="yes" xml:space="preserve">
          <source>Select <bpt id="p1">**</bpt>Run<ept id="p1">**</ept> at the bottom of the test pane.</source>
        </trans-unit><trans-unit id="292" translate="yes" xml:space="preserve">
          <source>Verify the that <bpt id="p1">*</bpt>Output<ept id="p1">*</ept> box displays the "bookmark added" message as shown in the following diagram.</source>
        </trans-unit><trans-unit id="293" translate="yes" xml:space="preserve">
          <source>Screenshot showing Test Panel and result of a successful test.</source>
        </trans-unit><trans-unit id="294" translate="yes" xml:space="preserve">
          <source>Congratulations!</source>
        </trans-unit><trans-unit id="295" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">[!INCLUDE [func-name-add](./func-name-add.md)]</ph> works as designed, but what about that queue operation we had in the code?</source>
        </trans-unit><trans-unit id="296" translate="yes" xml:space="preserve">
          <source>Well, let's go see whether something was written to a queue.</source>
        </trans-unit><trans-unit id="297" translate="yes" xml:space="preserve">
          <source>Verify that a message is written to the queue</source>
        </trans-unit><trans-unit id="298" translate="yes" xml:space="preserve">
          <source>Azure Queue Storage queues are hosted in a storage account.</source>
        </trans-unit><trans-unit id="299" translate="yes" xml:space="preserve">
          <source>You already selected the storage account in this exercise when you created the output binding.</source>
        </trans-unit><trans-unit id="300" translate="yes" xml:space="preserve">
          <source>In the main search box in the Azure portal, type <bpt id="p1">**</bpt>storage accounts<ept id="p1">**</ept>, and in the results list, under <bpt id="p2">**</bpt>Services<ept id="p2">**</ept>, select <bpt id="p3">**</bpt>Storage accounts<ept id="p3">**</ept>.</source>
        </trans-unit><trans-unit id="301" translate="yes" xml:space="preserve">
          <source>Screenshot showing search results for Storage Account in the main search box.</source>
        </trans-unit><trans-unit id="302" translate="yes" xml:space="preserve">
          <source>In the list of storage accounts that are returned, select the storage account that you used to create the <bpt id="p1">**</bpt>newmessage<ept id="p1">**</ept> output binding.</source>
        </trans-unit><trans-unit id="303" translate="yes" xml:space="preserve">
          <source>The storage account settings are displayed in the main window of the portal.</source>
        </trans-unit><trans-unit id="304" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Services<ept id="p1">**</ept> list, select the <bpt id="p2">**</bpt>Queues<ept id="p2">**</ept> item.</source>
        </trans-unit><trans-unit id="305" translate="yes" xml:space="preserve">
          <source>A list of queues hosted by this storage account is displayed.</source>
        </trans-unit><trans-unit id="306" translate="yes" xml:space="preserve">
          <source>Verify that the <bpt id="p1">**</bpt>bookmarks-post-process<ept id="p1">**</ept> queue exists, as shown in the following screenshot:</source>
        </trans-unit><trans-unit id="307" translate="yes" xml:space="preserve">
          <source>Screenshot showing our queue in the list of queues hosted by this storage account</source>
        </trans-unit><trans-unit id="308" translate="yes" xml:space="preserve">
          <source>Select <bpt id="p1">**</bpt>bookmarks-post-process<ept id="p1">**</ept> to open the queue.</source>
        </trans-unit><trans-unit id="309" translate="yes" xml:space="preserve">
          <source>The messages that are in the queue are displayed in a list.</source>
        </trans-unit><trans-unit id="310" translate="yes" xml:space="preserve">
          <source>If all went according to plan, the queue includes the message that you posted when you added a bookmark to the database.</source>
        </trans-unit><trans-unit id="311" translate="yes" xml:space="preserve">
          <source>It should look like the following:</source>
        </trans-unit><trans-unit id="312" translate="yes" xml:space="preserve">
          <source>Screenshot showing our message in the queue</source>
        </trans-unit><trans-unit id="313" translate="yes" xml:space="preserve">
          <source>In this example, you can see that the message was given a unique ID, and the <bpt id="p1">**</bpt>MESSAGE TEXT<ept id="p1">**</ept> field displays your bookmark in JSON string format.</source>
        </trans-unit><trans-unit id="314" translate="yes" xml:space="preserve">
          <source>You can test the function further by changing the request body in the test pane with new id/url sets and running the function.</source>
        </trans-unit><trans-unit id="315" translate="yes" xml:space="preserve">
          <source>Watch this queue to see more messages arrive.</source>
        </trans-unit><trans-unit id="316" translate="yes" xml:space="preserve">
          <source>You can also look at the database to verify that new entries have been added.</source>
        </trans-unit><trans-unit id="317" translate="yes" xml:space="preserve">
          <source>In this lab, we expanded your knowledge of bindings to output bindings, writing data to your Azure Cosmos DB.</source>
        </trans-unit><trans-unit id="318" translate="yes" xml:space="preserve">
          <source>We went further and added another output binding to post messages to an Azure queue.</source>
        </trans-unit><trans-unit id="319" translate="yes" xml:space="preserve">
          <source>This demonstrates the true power of bindings to help you shape and move data from incoming sources to a variety of destinations.</source>
        </trans-unit><trans-unit id="320" translate="yes" xml:space="preserve">
          <source>We haven't written any database code or had to manage connection strings ourselves.</source>
        </trans-unit><trans-unit id="321" translate="yes" xml:space="preserve">
          <source>Instead, we configured bindings declaratively and let the platform take care of securing connections, scaling our function, and scaling our connections.</source>
        </trans-unit></group></body></file></xliff>