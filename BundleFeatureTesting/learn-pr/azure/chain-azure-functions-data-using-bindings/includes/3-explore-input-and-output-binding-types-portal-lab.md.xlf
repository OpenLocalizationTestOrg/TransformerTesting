<?xml version="1.0"?><xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd"><file datatype="xml" original="3-explore-input-and-output-binding-types-portal-lab.md" source-language="en-US" target-language="en-US"><header><tool tool-id="mdxliff" tool-name="mdxliff"  tool-company="Microsoft" /><xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3-explore-input-and-output-binding-types-portal-lab.afb9bc.8bf24076038c10bb03eadf2db98fa871a2cdb352.skl</xliffext:skl_file_name><xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version><xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8bf24076038c10bb03eadf2db98fa871a2cdb352</xliffext:ms.openlocfilehash><xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ba7e452ac39d7f09a5646044b44de0e1cdc54982</xliffext:ms.sourcegitcommit><xliffext:ms.openlocfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">learn-pr\azure\chain-azure-functions-data-using-bindings\includes\3-explore-input-and-output-binding-types-portal-lab.md</xliffext:ms.openlocfilepath></header><body><group id="content" extype="content"><trans-unit id="101" translate="yes" xml:space="preserve">
          <source>The following is a high-level illustration of what we're going to build in this exercise.</source>
        </trans-unit><trans-unit id="102" translate="yes" xml:space="preserve">
          <source>An illustration of default HTTP trigger, showing HTTP request and response as well as respective req and res binding parameters</source>
        </trans-unit><trans-unit id="103" translate="yes" xml:space="preserve">
          <source>We'll create a function that will start when it receives an HTTP request and will respond to each request by sending back a message.</source>
        </trans-unit><trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The parameters <ph id="ph1">`req`</ph> and <ph id="ph2">`res`</ph> are the trigger binding and output binding, respectively.</source>
        </trans-unit><trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Create a function app</source>
        </trans-unit><trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Let's create a function app that we'll use throughout this entire module.</source>
        </trans-unit><trans-unit id="107" translate="yes" xml:space="preserve">
          <source>A function app lets you group functions as a logical unit for easier management, deployment, and sharing of resources.</source>
        </trans-unit><trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Sign into the <bpt id="p1">[</bpt>Azure portal<ept id="p1">](https://portal.azure.com/learn.docs.microsoft.com?azure-portal=true)</ept> using the same account you activated the sandbox with.</source>
        </trans-unit><trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Select the <bpt id="p1">**</bpt>Create a resource<ept id="p1">**</ept> button found on the upper left-hand corner of the Azure portal, then select <bpt id="p2">**</bpt>Compute<ept id="p2">**</ept><ph id="ph1"> &gt; </ph><bpt id="p3">**</bpt>Function App<ept id="p3">**</ept>.</source>
        </trans-unit><trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Set the function app properties as follows:</source>
        </trans-unit><trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Property</source>
        </trans-unit><trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Suggested value</source>
        </trans-unit><trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit><trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>App name<ept id="p1">**</ept></source>
        </trans-unit><trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Globally unique name</source>
        </trans-unit><trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Name that identifies your new function app.</source>
        </trans-unit><trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Valid characters are <ph id="ph1">`a-z`</ph>, <ph id="ph2">`0-9`</ph>, and <ph id="ph3">`-`</ph>.</source>
        </trans-unit><trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Subscription<ept id="p1">**</ept></source>
        </trans-unit><trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Your subscription</source>
        </trans-unit><trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The subscription under which this new function app is created.</source>
        </trans-unit><trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Resource Group<ept id="p1">**</ept></source>
        </trans-unit><trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Select <bpt id="p1">**</bpt>Use existing<ept id="p1">**</ept> and choose <bpt id="p2">_</bpt><bpt id="p3">&lt;rgn&gt;</bpt>[sandbox resource group name]<ept id="p3">&lt;/rgn&gt;</ept><ept id="p2">_</ept></source>
        </trans-unit><trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Name of the resource group in which to create your function app.</source>
        </trans-unit><trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>OS<ept id="p1">**</ept></source>
        </trans-unit><trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Windows</source>
        </trans-unit><trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The operating system that hosts the function app.</source>
        </trans-unit><trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Hosting Plan<ept id="p1">**</ept></source>
        </trans-unit><trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Consumption plan</source>
        </trans-unit><trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Hosting plan that defines how resources are allocated to your function app.</source>
        </trans-unit><trans-unit id="130" translate="yes" xml:space="preserve">
          <source>In the default <bpt id="p1">**</bpt>Consumption Plan<ept id="p1">**</ept>, resources are added dynamically as required by your functions.</source>
        </trans-unit><trans-unit id="131" translate="yes" xml:space="preserve">
          <source>In this serverless hosting model, you only pay for the time your functions run.</source>
        </trans-unit><trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Location<ept id="p1">**</ept></source>
        </trans-unit><trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Select from the list</source>
        </trans-unit><trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Choose the nearest one to you that is also one of the allowed <bpt id="p1">*</bpt>Sandbox regions<ept id="p1">*</ept> listed below.</source>
        </trans-unit><trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Runtime Stack<ept id="p1">**</ept></source>
        </trans-unit><trans-unit id="136" translate="yes" xml:space="preserve">
          <source>JavaScript</source>
        </trans-unit><trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The sample code in this module is written in JavaScript.</source>
        </trans-unit><trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Storage<ept id="p1">**</ept></source>
        </trans-unit><trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Globally unique name</source>
        </trans-unit><trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Name of the new storage account used by your function app.</source>
        </trans-unit><trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Storage account names must be between 3 and 24 characters in length and may contain numbers and lowercase letters only.</source>
        </trans-unit><trans-unit id="142" translate="yes" xml:space="preserve">
          <source>This dialog populates the field with a unique name that is derived from the name you gave the app.</source>
        </trans-unit><trans-unit id="143" translate="yes" xml:space="preserve">
          <source>However, feel free to use a different name or even an existing account.</source>
        </trans-unit><trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Sandbox regions</source>
        </trans-unit><trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Select <bpt id="p1">**</bpt>Create<ept id="p1">**</ept> to provision and deploy the function app.</source>
        </trans-unit><trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Select the Notification icon in the upper-right corner of the portal and watch for a <bpt id="p1">**</bpt>Deployment in progress<ept id="p1">**</ept> message similar to the following message.</source>
        </trans-unit><trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Notification that function app deployment is in progress</source>
        </trans-unit><trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Deployment can take some time.</source>
        </trans-unit><trans-unit id="149" translate="yes" xml:space="preserve">
          <source>So, stay in the notification hub and  watch for a <bpt id="p1">**</bpt>Deployment succeeded<ept id="p1">**</ept> message similar to the following message.</source>
        </trans-unit><trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Notification that function app deployment has completed</source>
        </trans-unit><trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Once the function app is deployed, go to <bpt id="p1">**</bpt>All resources<ept id="p1">**</ept> in the portal.</source>
        </trans-unit><trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The function app will be listed with type <bpt id="p1">**</bpt>App Service<ept id="p1">**</ept> and has the name you gave it.</source>
        </trans-unit><trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Select the function app from the list to open it.</source>
        </trans-unit><trans-unit id="154" translate="yes" xml:space="preserve">
          <source>If you are having trouble finding your function apps in the portal, find out how to <bpt id="p1">[</bpt>add function apps to your favorites in the portal<ept id="p1">](https://docs.microsoft.com/azure/azure-functions/functions-how-to-use-azure-function-app-settings#favorite)</ept>.</source>
        </trans-unit><trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Create a function</source>
        </trans-unit><trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Now that we have a function app, it's time to create a function.</source>
        </trans-unit><trans-unit id="157" translate="yes" xml:space="preserve">
          <source>A function is activated through a trigger.</source>
        </trans-unit><trans-unit id="158" translate="yes" xml:space="preserve">
          <source>In this module, we'll use an HTTP trigger.</source>
        </trans-unit><trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Select the Add (<bpt id="p1">**</bpt><ph id="ph1">+</ph><ept id="p1">**</ept>) button next to <bpt id="p2">**</bpt>Functions<ept id="p2">**</ept>.</source>
        </trans-unit><trans-unit id="160" translate="yes" xml:space="preserve">
          <source>This action starts the function creation process.</source>
        </trans-unit><trans-unit id="161" translate="yes" xml:space="preserve">
          <source>On the <bpt id="p1">**</bpt>Azure Functions for JavaScript - getting started<ept id="p1">**</ept> page, select <bpt id="p2">**</bpt>In-portal<ept id="p2">**</ept> and then select <bpt id="p3">**</bpt>continue<ept id="p3">**</ept>.</source>
        </trans-unit><trans-unit id="162" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Create a function<ept id="p1">**</ept> step, select <bpt id="p2">**</bpt>More templates...<ept id="p2">**</ept> and then select <bpt id="p3">**</bpt>Finish and view templates<ept id="p3">**</ept>.</source>
        </trans-unit><trans-unit id="163" translate="yes" xml:space="preserve">
          <source>In the list of all templates available to this function app, select <bpt id="p1">**</bpt>HTTP Trigger<ept id="p1">**</ept> .</source>
        </trans-unit><trans-unit id="164" translate="yes" xml:space="preserve">
          <source>On the <bpt id="p1">**</bpt>New Function<ept id="p1">**</ept> screen, change the name if you want, leave the <bpt id="p2">**</bpt>Authorization level<ept id="p2">**</ept> as <bpt id="p3">_</bpt>Function<ept id="p3">_</ept>, and click <bpt id="p4">**</bpt>Create<ept id="p4">**</ept>.</source>
        </trans-unit><trans-unit id="165" translate="yes" xml:space="preserve">
          <source>In your new function, click the <bpt id="p1">**</bpt>&lt;/&gt; Get function URL<ept id="p1">**</ept> link at the top right, select <bpt id="p2">**</bpt>default (Function key)<ept id="p2">**</ept>, and then select <bpt id="p3">**</bpt>Copy<ept id="p3">**</ept>.</source>
        </trans-unit><trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Paste the function URL you copied into the address bar of a new tab in your browser.</source>
        </trans-unit><trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Add the query string value <ph id="ph1">`&amp;name=Azure`</ph> to the end of this URL, and then press Enter on your keyboard to execute the request.</source>
        </trans-unit><trans-unit id="168" translate="yes" xml:space="preserve">
          <source>You should see a response similar to the following response returned by the function displayed in your browser.</source>
        </trans-unit><trans-unit id="169" translate="yes" xml:space="preserve">
          <source>As you can see from this exercise so far, you have to select a trigger type when you create a function.</source>
        </trans-unit><trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Every function has one and only one trigger.</source>
        </trans-unit><trans-unit id="171" translate="yes" xml:space="preserve">
          <source>In this example, we're using an HTTP trigger, which means that our function starts when it receives an HTTP request.</source>
        </trans-unit><trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The default implementation, shown in the following screenshot in JavaScript, responds with the value of the parameter <bpt id="p1">*</bpt>name<ept id="p1">*</ept> it received in the query string or body of the request.</source>
        </trans-unit><trans-unit id="173" translate="yes" xml:space="preserve">
          <source>If no string was provided, the function responds with a message that asks whomever is calling to supply a name value.</source>
        </trans-unit><trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The default JavaScript implementation of an HTTP-triggered Azure function</source>
        </trans-unit><trans-unit id="175" translate="yes" xml:space="preserve">
          <source>All of this code is in the <bpt id="p1">**</bpt>index.js<ept id="p1">**</ept> file in this function's folder.</source>
        </trans-unit><trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Let's look briefly at the function's other file, the <bpt id="p1">**</bpt>function.json<ept id="p1">**</ept> config file.</source>
        </trans-unit><trans-unit id="177" translate="yes" xml:space="preserve">
          <source>This configuration data is shown in the following JSON listing.</source>
        </trans-unit><trans-unit id="178" translate="yes" xml:space="preserve">
          <source>As you can see, this function has a trigger binding named <bpt id="p1">**</bpt>req<ept id="p1">**</ept> of type <ph id="ph1">`httpTrigger`</ph> and an output binding named <bpt id="p2">**</bpt>res<ept id="p2">**</ept>  of type <ph id="ph2">`HTTP`</ph>.</source>
        </trans-unit><trans-unit id="179" translate="yes" xml:space="preserve">
          <source>In the preceding code for our function, we saw how we accessed the payload of the incoming HTTP request through our <bpt id="p1">**</bpt>req<ept id="p1">**</ept> parameter.</source>
        </trans-unit><trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Similarly, we sent an HTTP response simply by setting our <bpt id="p1">**</bpt>res<ept id="p1">**</ept> parameter.</source>
        </trans-unit><trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Bindings really do take care of some of the heavy lifting for us.</source>
        </trans-unit><trans-unit id="182" translate="yes" xml:space="preserve">
          <source>You can see the <bpt id="p1">**</bpt>index.js<ept id="p1">**</ept> and <bpt id="p2">**</bpt>function.json<ept id="p2">**</ept> files by expanding the <bpt id="p3">**</bpt>View Files<ept id="p3">**</ept> menu that you'll see on the right hand side of the screen when you have your function selected.</source>
        </trans-unit><trans-unit id="183" translate="yes" xml:space="preserve">
          <source>You might have to scroll to the right to see this menu.</source>
        </trans-unit><trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Explore binding types</source>
        </trans-unit><trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Notice under the function entry there is a set of menu items as shown in the following screenshot.</source>
        </trans-unit><trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Screenshot showing menu items under a function in the Function Apps blade.</source>
        </trans-unit><trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Select the <bpt id="p1">**</bpt>Integrate<ept id="p1">**</ept> menu item to open the integration tab for our function.</source>
        </trans-unit><trans-unit id="188" translate="yes" xml:space="preserve">
          <source>If you've been following along with this unit, the integrate tab should look very similar to the following screenshot.</source>
        </trans-unit><trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Screenshot showing integrate UI or tab.</source>
        </trans-unit><trans-unit id="190" translate="yes" xml:space="preserve">
          <source>We have already defined a trigger and an output binding, as shown in the screenshot.</source>
        </trans-unit><trans-unit id="191" translate="yes" xml:space="preserve">
          <source>You can see that we can't add more than <bpt id="p1">_</bpt>one<ept id="p1">_</ept> trigger.</source>
        </trans-unit><trans-unit id="192" translate="yes" xml:space="preserve">
          <source>In fact, to change the trigger for our function we would have to first delete the trigger and create a new one.</source>
        </trans-unit><trans-unit id="193" translate="yes" xml:space="preserve">
          <source>However, the <bpt id="p1">**</bpt>Inputs<ept id="p1">**</ept> and <bpt id="p2">**</bpt>Outputs<ept id="p2">**</ept> sections of this UI display a plus sign (+) to add more bindings so we can accept more than one input value and emit more than one output value.</source>
        </trans-unit><trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Select <bpt id="p1">**</bpt>+ New Input<ept id="p1">**</ept> under the <bpt id="p2">**</bpt>Inputs<ept id="p2">**</ept> column.</source>
        </trans-unit><trans-unit id="195" translate="yes" xml:space="preserve">
          <source>A list of all possible input binding types is displayed as shown in the following screenshot.</source>
        </trans-unit><trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Screenshot showing the list of possible input bindings.</source>
        </trans-unit><trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Take a moment to consider each of these input bindings and how you might use them in a solution.</source>
        </trans-unit><trans-unit id="198" translate="yes" xml:space="preserve">
          <source>There are a lot to choose from.</source>
        </trans-unit><trans-unit id="199" translate="yes" xml:space="preserve">
          <source>This list might even have changed by the time you read this module, as we continue to support more data sources.</source>
        </trans-unit><trans-unit id="200" translate="yes" xml:space="preserve">
          <source>We'll get back to adding input bindings later in the module but, for now, select <bpt id="p1">**</bpt>Cancel<ept id="p1">**</ept> to dismiss this list.</source>
        </trans-unit><trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Select <bpt id="p1">**</bpt>+ New Output<ept id="p1">**</ept> under the <bpt id="p2">**</bpt>Outputs<ept id="p2">**</ept> column.</source>
        </trans-unit><trans-unit id="202" translate="yes" xml:space="preserve">
          <source>A list of all possible output binding types is displayed as shown in the following screenshot.\</source>
        </trans-unit><trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Screenshot showing the list of possible output bindings.</source>
        </trans-unit><trans-unit id="204" translate="yes" xml:space="preserve">
          <source>As you can see, there are several output binding types at your disposal.</source>
        </trans-unit><trans-unit id="205" translate="yes" xml:space="preserve">
          <source>We'll get back to adding output bindings later in the module but, for now, select <bpt id="p1">**</bpt>Cancel<ept id="p1">**</ept> to dismiss this list.</source>
        </trans-unit><trans-unit id="206" translate="yes" xml:space="preserve">
          <source>So far, we've learned how to create a function app and add a function to it.</source>
        </trans-unit><trans-unit id="207" translate="yes" xml:space="preserve">
          <source>We've seen a simple function in action, one that runs when an HTTP request is made to it.</source>
        </trans-unit><trans-unit id="208" translate="yes" xml:space="preserve">
          <source>We've also explored the Azure portal UI and types of input and output binding that are available to our functions.</source>
        </trans-unit><trans-unit id="209" translate="yes" xml:space="preserve">
          <source>In the next unit, we'll use an input binding to read text from a database.</source>
        </trans-unit></group></body></file></xliff>