<?xml version="1.0"?><xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd"><file datatype="xml" original="6-getting-blob-references.md" source-language="en-US" target-language="en-US"><header><tool tool-id="mdxliff" tool-name="mdxliff"  tool-company="Microsoft" /><xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6-getting-blob-references.111fa0.c030cec26af85b7f7b46d8501a61d82ee1817447.skl</xliffext:skl_file_name><xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version><xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c030cec26af85b7f7b46d8501a61d82ee1817447</xliffext:ms.openlocfilehash><xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ba7e452ac39d7f09a5646044b44de0e1cdc54982</xliffext:ms.sourcegitcommit><xliffext:ms.openlocfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">learn-pr\azure\store-app-data-with-azure-blob-storage\includes\6-getting-blob-references.md</xliffext:ms.openlocfilepath></header><body><group id="content" extype="content"><trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Working with an individual blob in the Azure Storage SDK for .NET Core requires a <bpt id="p1">*</bpt>blob reference<ept id="p1">*</ept> <ph id="ph1">&amp;mdash;</ph> an instance of an <ph id="ph2">`ICloudBlob`</ph> object.</source>
        </trans-unit><trans-unit id="102" translate="yes" xml:space="preserve">
          <source>You can get an <ph id="ph1">`ICloudBlob`</ph> by requesting it with the blob's name or selecting it from a list of blobs in the container.</source>
        </trans-unit><trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Both require a <ph id="ph1">`CloudBlobContainer`</ph>, which we saw how to get in the last unit.</source>
        </trans-unit><trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Getting blobs by name</source>
        </trans-unit><trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Call one of the <ph id="ph1">`GetXXXReference`</ph> methods on a <ph id="ph2">`CloudBlobContainer`</ph> to get an <ph id="ph3">`ICloudBlob`</ph> by name.</source>
        </trans-unit><trans-unit id="106" translate="yes" xml:space="preserve">
          <source>If you know the type of the blob you are retrieving, use one of the specific methods (<ph id="ph1">`GetBlockBlobReference`</ph>, <ph id="ph2">`GetAppendBlobReference`</ph>, or <ph id="ph3">`GetPageBlobReference`</ph>) to get an object that includes methods and properties tailored for that blob type.</source>
        </trans-unit><trans-unit id="107" translate="yes" xml:space="preserve">
          <source>None of these methods make network calls, nor do they confirm whether or not the targeted blob actually exists.</source>
        </trans-unit><trans-unit id="108" translate="yes" xml:space="preserve">
          <source>They only create a blob reference object locally, which can then be used to call methods that <bpt id="p1">*</bpt>do<ept id="p1">*</ept> operate over the network and interact with blobs in storage.</source>
        </trans-unit><trans-unit id="109" translate="yes" xml:space="preserve">
          <source>A separate method, <ph id="ph1">`GetBlobReferenceFromServerAsync`</ph>, does call the Blob storage API and will throw an exception if the blob doesn't already exist.</source>
        </trans-unit><trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Listing blobs in a container</source>
        </trans-unit><trans-unit id="111" translate="yes" xml:space="preserve">
          <source>You can get a list of the blobs in a container using <ph id="ph1">`CloudBlobContainer`</ph>'s <ph id="ph2">`ListBlobsSegmentedAsync`</ph> method.</source>
        </trans-unit><trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Segmented<ept id="p1">*</ept> refers to the separate pages of results returned <ph id="ph1">&amp;mdash;</ph> a single call to <ph id="ph2">`ListBlobsSegmentedAsync`</ph> is never guaranteed to return all the results in a single page.</source>
        </trans-unit><trans-unit id="113" translate="yes" xml:space="preserve">
          <source>We may need to call it repeatedly using the <ph id="ph1">`ContinuationToken`</ph> it returns to work our way through the pages.</source>
        </trans-unit><trans-unit id="114" translate="yes" xml:space="preserve">
          <source>This makes the code for listing blobs a little more complex than the code for uploading or downloading, but there's a standard pattern you can use to get every blob in a container:</source>
        </trans-unit><trans-unit id="115" translate="yes" xml:space="preserve">
          <source>This will call <ph id="ph1">`ListBlobsSegmentedAsync`</ph> repeatedly until <ph id="ph2">`continuationToken`</ph> is <ph id="ph3">`null`</ph>, which signals the end of the results.</source>
        </trans-unit><trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Never assume that <ph id="ph1">`ListBlobsSegmentedAsync`</ph> results will arrive in a single page.</source>
        </trans-unit><trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Always check for a continuation token and use it if it's present.</source>
        </trans-unit><trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Processing list results</source>
        </trans-unit><trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The object you'll get back from <ph id="ph1">`ListBlobsSegmentedAsync`</ph> contains a <ph id="ph2">`Results`</ph> property of type <ph id="ph3">`IEnumerable&lt;IListBlobItem&gt;`</ph>.</source>
        </trans-unit><trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`IListBlobItem`</ph> interface includes only a handful of properties about the blob's container and URL, and isn't very useful by itself.</source>
        </trans-unit><trans-unit id="121" translate="yes" xml:space="preserve">
          <source>To get useful blob objects out of <ph id="ph1">`Results`</ph>, you can use the <ph id="ph2">`OfType&lt;&gt;`</ph> method to filter and cast the results to more specific blob object types.</source>
        </trans-unit><trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Here are a few examples:</source>
        </trans-unit><trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Using <ph id="ph1">`OfType&lt;&gt;`</ph> requires a reference to the <ph id="ph2">`System.Linq`</ph> namespace (<ph id="ph3">`using System.Linq;`</ph>).</source>
        </trans-unit><trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Exercise</source>
        </trans-unit><trans-unit id="125" translate="yes" xml:space="preserve">
          <source>One of the features in our app requires getting a list of blobs from the API.</source>
        </trans-unit><trans-unit id="126" translate="yes" xml:space="preserve">
          <source>We'll use the pattern shown above to list all the blobs in our container.</source>
        </trans-unit><trans-unit id="127" translate="yes" xml:space="preserve">
          <source>As we process the list, we get the name of each blob.</source>
        </trans-unit><trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Using the editor, replace <ph id="ph1">`GetNames`</ph> in <ph id="ph2">`BlobStorage.cs`</ph> with the following code and save your changes.</source>
        </trans-unit><trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Note that the method signature now needs to specify <ph id="ph1">`async`</ph>.</source>
        </trans-unit><trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The names returned by this method are processed by <ph id="ph1">`FilesController`</ph> to turn them into URLs.</source>
        </trans-unit><trans-unit id="131" translate="yes" xml:space="preserve">
          <source>When they are returned to the client, they are rendered as hyperlinks on the page.</source>
        </trans-unit></group></body></file></xliff>