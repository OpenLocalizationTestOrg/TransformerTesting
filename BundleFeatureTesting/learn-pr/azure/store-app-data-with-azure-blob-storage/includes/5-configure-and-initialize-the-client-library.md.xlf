<?xml version="1.0"?><xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd"><file datatype="xml" original="5-configure-and-initialize-the-client-library.md" source-language="en-US" target-language="en-US"><header><tool tool-id="mdxliff" tool-name="mdxliff"  tool-company="Microsoft" /><xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5-configure-and-initialize-the-client-library.283781.b60f4b1fb3a10fb23dfc3c5ba88b4b86072da6b5.skl</xliffext:skl_file_name><xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version><xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b60f4b1fb3a10fb23dfc3c5ba88b4b86072da6b5</xliffext:ms.openlocfilehash><xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ba7e452ac39d7f09a5646044b44de0e1cdc54982</xliffext:ms.sourcegitcommit><xliffext:ms.openlocfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">learn-pr\azure\store-app-data-with-azure-blob-storage\includes\5-configure-and-initialize-the-client-library.md</xliffext:ms.openlocfilepath></header><body><group id="content" extype="content"><trans-unit id="101" translate="yes" xml:space="preserve">
          <source>The following is the typical workflow for apps that use Azure Blob storage:</source>
        </trans-unit><trans-unit id="102" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Retrieve configuration<ept id="p1">**</ept>: At startup, load the storage account configuration.</source>
        </trans-unit><trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This is typically a storage account connection string.</source>
        </trans-unit><trans-unit id="104" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Initialize client<ept id="p1">**</ept>: Use the connection string to initialize the Azure Storage client library.</source>
        </trans-unit><trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This creates the objects the app will use to work with the Blob storage API.</source>
        </trans-unit><trans-unit id="106" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Use<ept id="p1">**</ept>: Make API calls with the client library to operate on containers and blobs.</source>
        </trans-unit><trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Configure your connection string</source>
        </trans-unit><trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Before running your app, you'll need the connection string for the storage account you will use.</source>
        </trans-unit><trans-unit id="109" translate="yes" xml:space="preserve">
          <source>You can use any Azure management interface to get it, including the Azure portal, the Azure CLI or Azure PowerShell.</source>
        </trans-unit><trans-unit id="110" translate="yes" xml:space="preserve">
          <source>When we set up the web app to run our code near the end of this module, we'll use the Azure CLI to get the connection string for the storage account you created earlier.</source>
        </trans-unit><trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Storage account connection strings include the account key.</source>
        </trans-unit><trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The account key is considered a secret and should be stored securely.</source>
        </trans-unit><trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Here, we will store the connection string in an App Service application setting.</source>
        </trans-unit><trans-unit id="114" translate="yes" xml:space="preserve">
          <source>App Service application settings are a secure place for application secrets, but this design does not support local development and is not a robust, end-to-end solution on its own.</source>
        </trans-unit><trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Do not place storage account keys in code or in unprotected configuration files.<ept id="p1">**</ept></source>
        </trans-unit><trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Storage account keys enable full access to your storage account.</source>
        </trans-unit><trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Leaking a key can result in unrecoverable damage and large bills.</source>
        </trans-unit><trans-unit id="118" translate="yes" xml:space="preserve">
          <source>See the Further Reading section at the end of this module for storage guidance and advice about how to recover from a leaked key.</source>
        </trans-unit><trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Initialize the Blob storage object model</source>
        </trans-unit><trans-unit id="120" translate="yes" xml:space="preserve">
          <source>In the Azure Storage SDK for .NET Core, the standard pattern for using Blob storage consists of the following steps:</source>
        </trans-unit><trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Call <ph id="ph1">`CloudStorageAccount.Parse`</ph> (or <ph id="ph2">`TryParse`</ph>) with your connection string to get a <ph id="ph3">`CloudStorageAccount`</ph>.</source>
        </trans-unit><trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Call <ph id="ph1">`CreateCloudBlobClient`</ph> on the <ph id="ph2">`CloudStorageAccount`</ph> to get a <ph id="ph3">`CloudBlobClient`</ph>.</source>
        </trans-unit><trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Call <ph id="ph1">`GetContainerReference`</ph> on the <ph id="ph2">`CloudBlobClient`</ph> to get a <ph id="ph3">`CloudBlobContainer`</ph>.</source>
        </trans-unit><trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Use methods on the container to get a list of blobs and/or get references to individual blobs to upload and download data.</source>
        </trans-unit><trans-unit id="125" translate="yes" xml:space="preserve">
          <source>In code, steps 1<ph id="ph1">&amp;ndash;</ph>3 look like this:</source>
        </trans-unit><trans-unit id="126" translate="yes" xml:space="preserve">
          <source>None of this initialization code makes calls over the network.</source>
        </trans-unit><trans-unit id="127" translate="yes" xml:space="preserve">
          <source>This means that some exceptions that occur because of incorrect information won't be thrown until later.</source>
        </trans-unit><trans-unit id="128" translate="yes" xml:space="preserve">
          <source>For example, the call to <ph id="ph1">`CloudStorageAccount.Parse`</ph> will throw an exception immediately if the connection string is formatted incorrectly, but no exception will be thrown if the storage account that a connection string points to doesn't exist.</source>
        </trans-unit><trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Create containers at startup</source>
        </trans-unit><trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Calling <ph id="ph1">`CreateIfNotExistsAsync`</ph> on a <ph id="ph2">`CloudBlobContainer`</ph> is the best way to create a container when your application starts or when it first tries to use it.</source>
        </trans-unit><trans-unit id="131" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`CreateIfNotExistsAsync`</ph> won't throw an exception if the container already exists, but it does make a network call to Azure Storage.</source>
        </trans-unit><trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Call it once during initialization, not every time you try to use a container.</source>
        </trans-unit><trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Exercise</source>
        </trans-unit><trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Clone and explore the unfinished app</source>
        </trans-unit><trans-unit id="135" translate="yes" xml:space="preserve">
          <source>First, let's clone the starter app from GitHub.</source>
        </trans-unit><trans-unit id="136" translate="yes" xml:space="preserve">
          <source>In the Cloud Shell terminal, run the following command to get a copy of the source code and open it in the editor:</source>
        </trans-unit><trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Open the file <ph id="ph1">`Controllers/FilesController.cs`</ph> in the editor.</source>
        </trans-unit><trans-unit id="138" translate="yes" xml:space="preserve">
          <source>There's no work to do here, but we're going to have a quick look at what the app does.</source>
        </trans-unit><trans-unit id="139" translate="yes" xml:space="preserve">
          <source>This controller implements an API with three actions:</source>
        </trans-unit><trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Index<ept id="p1">**</ept> (GET /api/Files) returns a list of URLs, one for each file that's been uploaded.</source>
        </trans-unit><trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The app front end calls this method to build a list of hyperlinks to the uploaded files.</source>
        </trans-unit><trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Upload<ept id="p1">**</ept> (POST /api/Files) receives an uploaded file and saves it.</source>
        </trans-unit><trans-unit id="143" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Download<ept id="p1">**</ept> (GET /api/Files/{filename}) downloads an individual file by its name.</source>
        </trans-unit><trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Each method uses an <ph id="ph1">`IStorage`</ph> instance called <ph id="ph2">`storage`</ph> to do its work.</source>
        </trans-unit><trans-unit id="145" translate="yes" xml:space="preserve">
          <source>There is an incomplete implementation of <ph id="ph1">`IStorage`</ph> in <ph id="ph2">`Models/BlobStorage.cs`</ph> that we're going to fill in.</source>
        </trans-unit><trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Add the NuGet package</source>
        </trans-unit><trans-unit id="147" translate="yes" xml:space="preserve">
          <source>First, add a reference to the Azure Storage SDK.</source>
        </trans-unit><trans-unit id="148" translate="yes" xml:space="preserve">
          <source>In the terminal, run the following:</source>
        </trans-unit><trans-unit id="149" translate="yes" xml:space="preserve">
          <source>This will make sure we're using the newest version of the Blob storage client library.</source>
        </trans-unit><trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Configure</source>
        </trans-unit><trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The configuration values we need are the storage account connection string and the name of the container the app will use to store files.</source>
        </trans-unit><trans-unit id="152" translate="yes" xml:space="preserve">
          <source>In this module, we're only going to run the app in Azure App Service, so we'll follow App Service best practice and store the values in App Service application settings.</source>
        </trans-unit><trans-unit id="153" translate="yes" xml:space="preserve">
          <source>We'll do that when we create the App Service instance, so there's nothing we need to do at the moment.</source>
        </trans-unit><trans-unit id="154" translate="yes" xml:space="preserve">
          <source>When it comes to <bpt id="p1">*</bpt>using<ept id="p1">*</ept> the configuration, our starter app already includes the plumbing we need.</source>
        </trans-unit><trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`IOptions&lt;AzureStorageConfig&gt;`</ph> constructor parameter in <ph id="ph2">`BlobStorage`</ph> has two properties: the storage account connection string and the name of the container our app will store blobs in.</source>
        </trans-unit><trans-unit id="156" translate="yes" xml:space="preserve">
          <source>There is code in the <ph id="ph1">`ConfigureServices`</ph> method of <ph id="ph2">`Startup.cs`</ph> that loads the values from configuration when the app starts.</source>
        </trans-unit><trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Initialize</source>
        </trans-unit><trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Open <ph id="ph1">`Models/BlobStorage.cs`</ph> in the editor.</source>
        </trans-unit><trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Add the following <ph id="ph1">`using`</ph> statements to the top of the file to prepare it for the code you're going to add during the exercise.</source>
        </trans-unit><trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Locate the <ph id="ph1">`Initialize`</ph> method.</source>
        </trans-unit><trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Our app will call this method when <ph id="ph1">`BlobStorage`</ph> is used for the first time.</source>
        </trans-unit><trans-unit id="162" translate="yes" xml:space="preserve">
          <source>If you're curious, you can look at <ph id="ph1">`ConfigureServices`</ph> in <ph id="ph2">`Startup.cs`</ph> to see how this is done.</source>
        </trans-unit><trans-unit id="163" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Initialize`</ph> is where we want to create our container if it doesn't already exist.</source>
        </trans-unit><trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Replace the current implementation of <ph id="ph1">`Initialize`</ph> with the following code and save your work:</source>
        </trans-unit></group></body></file></xliff>