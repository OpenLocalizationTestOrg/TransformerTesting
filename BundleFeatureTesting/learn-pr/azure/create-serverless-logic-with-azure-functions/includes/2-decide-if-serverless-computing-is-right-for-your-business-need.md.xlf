<?xml version="1.0"?><xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd"><file datatype="xml" original="2-decide-if-serverless-computing-is-right-for-your-business-need.md" source-language="en-US" target-language="en-US"><header><tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1931010" tool-company="Microsoft" /><xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2-decide-if-serverless-computing-is-right-for-your-business-need.e50efc3c3cd8e31807d873c44bae4e2972912e18.skl</xliffext:skl_file_name><xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version><xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">195a50daa722c5267461d6eb24738d540cec736f</xliffext:ms.openlocfilehash><xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">05/13/2019</xliffext:ms.lasthandoff><xliffext:ms.openlocfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">learn-pr\azure\create-serverless-logic-with-azure-functions\includes\2-decide-if-serverless-computing-is-right-for-your-business-need.md</xliffext:ms.openlocfilepath></header><body><group id="content" extype="content"><trans-unit id="101" translate="yes" xml:space="preserve">
          <source>To help decide whether serverless computing is right for you, let's first learn what serverless is all about.</source>
        </trans-unit><trans-unit id="102" translate="yes" xml:space="preserve">
          <source>What is serverless compute?</source>
        </trans-unit><trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Serverless compute can be thought of as a function as a service (FaaS), or a microservice that is hosted on a cloud platform.</source>
        </trans-unit><trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Your business logic runs as functions and you don't have to manually provision or scale infrastructure.</source>
        </trans-unit><trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The cloud provider manages infrastructure.</source>
        </trans-unit><trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Your app is automatically scaled out or down depending on load.</source>
        </trans-unit><trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Azure has several ways to build this sort of architecture.</source>
        </trans-unit><trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The two most common approaches are Azure Logic Apps and Azure Functions, which we focus on in this module.</source>
        </trans-unit><trans-unit id="109" translate="yes" xml:space="preserve">
          <source>What is Azure Functions?</source>
        </trans-unit><trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Azure Functions is a serverless application platform.</source>
        </trans-unit><trans-unit id="111" translate="yes" xml:space="preserve">
          <source>It allows developers to host business logic that can be executed without provisioning infrastructure.</source>
        </trans-unit><trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Functions provides intrinsic scalability and you are charged only for the resources used.</source>
        </trans-unit><trans-unit id="113" translate="yes" xml:space="preserve">
          <source>You can write your function code in the language of your choice, including C#, F#, and JavaScript.</source>
        </trans-unit><trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Support for NuGet and NPM is also included, so you can use popular libraries in your business logic.</source>
        </trans-unit><trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Benefits of a serverless compute solution</source>
        </trans-unit><trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Serverless compute is a great option for hosting business logic code in the cloud.</source>
        </trans-unit><trans-unit id="117" translate="yes" xml:space="preserve">
          <source>With serverless offerings such as Azure Functions, you can write your business logic in the language of your choice.</source>
        </trans-unit><trans-unit id="118" translate="yes" xml:space="preserve">
          <source>You get automatic scaling, you have no servers to manage, and you are charged based on what is used â€” not on reserved time.</source>
        </trans-unit><trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Here are some additional characteristics of a serverless solution for you to consider.</source>
        </trans-unit><trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Avoids over-allocation of infrastructure</source>
        </trans-unit><trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Suppose you've provisioned VM servers and configured them with enough resources to handle your peak load times.</source>
        </trans-unit><trans-unit id="122" translate="yes" xml:space="preserve">
          <source>When the load is light, you are potentially paying for infrastructure you're not using.</source>
        </trans-unit><trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Serverless computing helps solve the allocation problem by scaling up or down automatically, and you're only billed when your function is processing work.</source>
        </trans-unit><trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Stateless logic</source>
        </trans-unit><trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Stateless functions are great candidates for serverless compute; function instances are created and destroyed on demand.</source>
        </trans-unit><trans-unit id="126" translate="yes" xml:space="preserve">
          <source>If state is required, it can be stored in an associated storage service.</source>
        </trans-unit><trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Event driven</source>
        </trans-unit><trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Functions are <bpt id="p1">_</bpt>event driven<ept id="p1">_</ept>.</source>
        </trans-unit><trans-unit id="129" translate="yes" xml:space="preserve">
          <source>This means they run only in response to an event (called a "trigger"), such as receiving an HTTP request, or a message being added to a queue.</source>
        </trans-unit><trans-unit id="130" translate="yes" xml:space="preserve">
          <source>You configure a trigger as part of the function definition.</source>
        </trans-unit><trans-unit id="131" translate="yes" xml:space="preserve">
          <source>This approach simplifies your code by allowing you to declare where the data comes from (trigger/input binding) and where it goes (output binding).</source>
        </trans-unit><trans-unit id="132" translate="yes" xml:space="preserve">
          <source>You don't need to write code to watch queues, blobs, hubs, etc. You can focus purely on the business logic.</source>
        </trans-unit><trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Functions can be used in traditional compute environments</source>
        </trans-unit><trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Functions are a key component of serverless computing, but they are also a general compute platform for executing any type of code.</source>
        </trans-unit><trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Should the needs of your app change, you can take your project and deploy it in a non-serverless environment, which gives you the flexibility to manage scaling, run on virtual networks, and even completely isolate your functions.</source>
        </trans-unit><trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Drawbacks of a serverless compute solution</source>
        </trans-unit><trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Serverless compute will not always be the appropriate solution to hosting your business logic.</source>
        </trans-unit><trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Here are a few characteristics of functions that may affect your decision to host your services in serverless compute.</source>
        </trans-unit><trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Execution time</source>
        </trans-unit><trans-unit id="140" translate="yes" xml:space="preserve">
          <source>By default, functions have a timeout of 5 minutes.</source>
        </trans-unit><trans-unit id="141" translate="yes" xml:space="preserve">
          <source>This timeout is configurable to a maximum of 10 minutes.</source>
        </trans-unit><trans-unit id="142" translate="yes" xml:space="preserve">
          <source>If your function requires more than 10 minutes to execute, you can host it on a VM.</source>
        </trans-unit><trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Additionally, if your service is initiated through an HTTP request and you expect that value as an HTTP response, the timeout is further restricted to 2.5 minutes.</source>
        </trans-unit><trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Finally, there's also an option called <bpt id="p1">**</bpt>Durable Functions<ept id="p1">**</ept> that allows you to orchestrate the executions of multiple functions without any timeout.</source>
        </trans-unit><trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Execution frequency</source>
        </trans-unit><trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The second characteristic is execution frequency.</source>
        </trans-unit><trans-unit id="147" translate="yes" xml:space="preserve">
          <source>If you expect your function to be executed continuously by multiple clients, it would be prudent to estimate the usage and calculate the cost of using functions accordingly.</source>
        </trans-unit><trans-unit id="148" translate="yes" xml:space="preserve">
          <source>It might be cheaper to host your service on a VM.</source>
        </trans-unit><trans-unit id="149" translate="yes" xml:space="preserve">
          <source>While scaling, only one function app instance can be created every 10 seconds, for up to 200 total instances.</source>
        </trans-unit><trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Keep in mind, each instance can service multiple concurrent executions, so there is no set limit on how much traffic a single instance can handle.</source>
        </trans-unit><trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Different types of triggers have different scaling requirements, so research your choice of trigger and investigate its limits.</source>
        </trans-unit></group></body></file></xliff>