<?xml version="1.0"?><xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd"><file datatype="xml" original="5-add-logic-to-the-function-app.md" source-language="en-US" target-language="en-US"><header><tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1931010" tool-company="Microsoft" /><xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5-add-logic-to-the-function-app.f4ac4d08345a4a51e95a8ae5661df369166604e8.skl</xliffext:skl_file_name><xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version><xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5df15af4b522704ea6c3be6534d84c8941bc3c20</xliffext:ms.openlocfilehash><xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">05/13/2019</xliffext:ms.lasthandoff><xliffext:ms.openlocfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">learn-pr\azure\create-serverless-logic-with-azure-functions\includes\5-add-logic-to-the-function-app.md</xliffext:ms.openlocfilepath></header><body><group id="content" extype="content"><trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Let's continue with our gear drive example and add the logic for the temperature service.</source>
        </trans-unit><trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Specifically, we're going to receive data from an HTTP request.</source>
        </trans-unit><trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Function requirements</source>
        </trans-unit><trans-unit id="104" translate="yes" xml:space="preserve">
          <source>First, we need to define some requirements for our logic:</source>
        </trans-unit><trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Temperatures between 0-25 should be flagged as <bpt id="p1">**</bpt>OK<ept id="p1">**</ept>.</source>
        </trans-unit><trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Temperatures between 26-50 should be flagged as <bpt id="p1">**</bpt>CAUTION<ept id="p1">**</ept>.</source>
        </trans-unit><trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Temperatures above 50 should be flagged as <bpt id="p1">**</bpt>DANGER<ept id="p1">**</ept>.</source>
        </trans-unit><trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Add a function to our function app</source>
        </trans-unit><trans-unit id="109" translate="yes" xml:space="preserve">
          <source>As we discussed in the preceding unit, Azure provides templates that help you get started building functions.</source>
        </trans-unit><trans-unit id="110" translate="yes" xml:space="preserve">
          <source>In this unit, we'll use the <ph id="ph1">`HttpTrigger`</ph> template to implement the temperature service.</source>
        </trans-unit><trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Sign in to the <bpt id="p1">[</bpt>Azure portal<ept id="p1">](https://portal.azure.com/learn.docs.microsoft.com?azure-portal=true)</ept>.</source>
        </trans-unit><trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Select the resource group from the first exercise by choosing <bpt id="p1">**</bpt>All resources<ept id="p1">**</ept> in the left-hand menu, and then selecting "<bpt id="p2">**</bpt><bpt id="p3">&lt;rgn&gt;</bpt>[sandbox resource group name]<ept id="p3">&lt;/rgn&gt;</ept><ept id="p2">**</ept>".</source>
        </trans-unit><trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The resources for the group will then be displayed.</source>
        </trans-unit><trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Click the name of the function app that you created in the previous exercise by selecting the <bpt id="p1">**</bpt>escalator-functions-xxxxxxx<ept id="p1">**</ept> item (also indicated by the lightning bolt Function icon).</source>
        </trans-unit><trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Screenshot of the Azure portal showing the All resources blade highlighted as well as the escalator function app we created.</source>
        </trans-unit><trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Select the Add (<bpt id="p1">**</bpt><ph id="ph1">+</ph><ept id="p1">**</ept>) button next to <bpt id="p2">**</bpt>Functions<ept id="p2">**</ept>.</source>
        </trans-unit><trans-unit id="117" translate="yes" xml:space="preserve">
          <source>This action starts the function creation process.</source>
        </trans-unit><trans-unit id="118" translate="yes" xml:space="preserve">
          <source>On the <bpt id="p1">**</bpt>Azure Functions for JavaScript - getting started<ept id="p1">**</ept> page, select <bpt id="p2">**</bpt>In-portal<ept id="p2">**</ept> and then select <bpt id="p3">**</bpt>continue<ept id="p3">**</ept>.</source>
        </trans-unit><trans-unit id="119" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Create a function<ept id="p1">**</ept> step, select <bpt id="p2">**</bpt>More templates...<ept id="p2">**</ept> and then select <bpt id="p3">**</bpt>Finish and view templates<ept id="p3">**</ept>.</source>
        </trans-unit><trans-unit id="120" translate="yes" xml:space="preserve">
          <source>In the list of all templates available to this function app, select <bpt id="p1">**</bpt>Http trigger<ept id="p1">**</ept> .</source>
        </trans-unit><trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Enter <bpt id="p1">**</bpt>DriveGearTemperatureService<ept id="p1">**</ept> in the name field of the <bpt id="p2">**</bpt>New Function<ept id="p2">**</ept> dialog that appears.</source>
        </trans-unit><trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Leave the Authorization level as "Function" and press the <bpt id="p1">**</bpt>Create<ept id="p1">**</ept> button to create the function.</source>
        </trans-unit><trans-unit id="123" translate="yes" xml:space="preserve">
          <source>When your function creation completes, the code editor opens with the contents of the <bpt id="p1">*</bpt>index.js<ept id="p1">*</ept> code file.</source>
        </trans-unit><trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The default code that the template generated for us is listed in the following snippet.</source>
        </trans-unit><trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Our function expects a name to be passed in either through the HTTP request query string or as part of the request body.</source>
        </trans-unit><trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The function responds by returning the message  <bpt id="p1">**</bpt>Hello, {name}<ept id="p1">**</ept>, echoing back the name that was sent in the request.</source>
        </trans-unit><trans-unit id="127" translate="yes" xml:space="preserve">
          <source>On the right-hand side of the source view, you'll find two tabs.</source>
        </trans-unit><trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>View files<ept id="p1">**</ept> tab lists the code and config file for your function.</source>
        </trans-unit><trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Select <bpt id="p1">**</bpt>function.json<ept id="p1">**</ept> to view the configuration of the function, which should look like the following:</source>
        </trans-unit><trans-unit id="130" translate="yes" xml:space="preserve">
          <source>This configuration declares that the function runs when it receives an HTTP request.</source>
        </trans-unit><trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The output binding declares that the response will be sent as an HTTP response.</source>
        </trans-unit><trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Test the function</source>
        </trans-unit><trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>cURL<ept id="p1">**</ept> is a command line tool that can be used to send or receive files.</source>
        </trans-unit><trans-unit id="134" translate="yes" xml:space="preserve">
          <source>It's included with Linux, macOS, and Windows 10, and can be downloaded for most other operating systems.</source>
        </trans-unit><trans-unit id="135" translate="yes" xml:space="preserve">
          <source>cURL supports numerous protocols like HTTP, HTTPS, FTP, FTPS, SFTP, LDAP, TELNET, SMTP, POP3, etc. For more information, refer to the links below:</source>
        </trans-unit><trans-unit id="136" translate="yes" xml:space="preserve">
          <source>To test the function, you can send an HTTP request to the function URL using cURL on the command line.</source>
        </trans-unit><trans-unit id="137" translate="yes" xml:space="preserve">
          <source>To find the endpoint URL of the function, return to your function code and select the <bpt id="p1">**</bpt>Get function URL<ept id="p1">**</ept> link, as shown in the following screenshot.</source>
        </trans-unit><trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Save this link temporarily.</source>
        </trans-unit><trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Screenshot of the Azure portal showing the function editor, with the Get function URL button highlighted.</source>
        </trans-unit><trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Securing HTTP triggers</source>
        </trans-unit><trans-unit id="141" translate="yes" xml:space="preserve">
          <source>HTTP triggers let you use API keys to block unknown callers by requiring the key to be present on each request.</source>
        </trans-unit><trans-unit id="142" translate="yes" xml:space="preserve">
          <source>When you create a function, you select the <bpt id="p1">_</bpt>authorization level<ept id="p1">_</ept>.</source>
        </trans-unit><trans-unit id="143" translate="yes" xml:space="preserve">
          <source>By default, it's set to "Function", which requires a function-specific API key, but it can also be set to "Admin" to use a global "master" key, or "Anonymous" to indicate that no key is required.</source>
        </trans-unit><trans-unit id="144" translate="yes" xml:space="preserve">
          <source>You can also change the authorization level through the function properties after creation.</source>
        </trans-unit><trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Since we specified "Function" when we created this function, we will need to supply the key when we send the HTTP request.</source>
        </trans-unit><trans-unit id="146" translate="yes" xml:space="preserve">
          <source>You can send it as a query string parameter named <ph id="ph1">`code`</ph>, or as an HTTP header (preferred) named <ph id="ph2">`x-functions-key`</ph>.</source>
        </trans-unit><trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The function and master keys are found in the <bpt id="p1">**</bpt>Manage<ept id="p1">**</ept> section when the function is expanded.</source>
        </trans-unit><trans-unit id="148" translate="yes" xml:space="preserve">
          <source>By default, they are hidden, and you need to display them.</source>
        </trans-unit><trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Expand your function and select the <bpt id="p1">**</bpt>Manage<ept id="p1">**</ept> section, show the default Function Key, and copy it to the clipboard.</source>
        </trans-unit><trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Screenshot of the Azure portal showing the function Manage blade with the revealed function key highlighted.</source>
        </trans-unit><trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Next, from the command line where you installed the <bpt id="p1">**</bpt>cURL<ept id="p1">**</ept> tool, format a cURL command with the URL for your function, and the Function key.</source>
        </trans-unit><trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Use a <ph id="ph1">`POST`</ph> request.</source>
        </trans-unit><trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Add a <ph id="ph1">`Content-Type`</ph> header value of type <ph id="ph2">`application/json`</ph>.</source>
        </trans-unit><trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Make sure to replace the URL below with your own.</source>
        </trans-unit><trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Pass the Function Key as the header value <ph id="ph1">`x-functions-key`</ph>.</source>
        </trans-unit><trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The function will respond back with the text <ph id="ph1">`"Hello Azure Function"`</ph>.</source>
        </trans-unit><trans-unit id="157" translate="yes" xml:space="preserve">
          <source>If you are on Windows, please run  <ph id="ph1">`cURL`</ph> from the command prompt.</source>
        </trans-unit><trans-unit id="158" translate="yes" xml:space="preserve">
          <source>PowerShell has a <bpt id="p1">*</bpt>curl<ept id="p1">*</ept> command, but it's an alias for Invoke-WebRequest and is not the same as <ph id="ph1">`cURL`</ph>.</source>
        </trans-unit><trans-unit id="159" translate="yes" xml:space="preserve">
          <source>You can also test from an individual function's section with the <bpt id="p1">**</bpt>Test<ept id="p1">**</ept> tab on the side of a selected function, though you won't be able to verify the function key system is working, as it is not required here.</source>
        </trans-unit><trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Add the appropriate header and parameter values in the Test interface and click the <bpt id="p1">**</bpt>Run<ept id="p1">**</ept> button to see the test output.</source>
        </trans-unit><trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Add business logic to the function</source>
        </trans-unit><trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Next, let's add the logic to the function that checks temperature readings that it receives and sets a status for each.</source>
        </trans-unit><trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Our function is expecting an array of temperature readings.</source>
        </trans-unit><trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The following JSON snippet is an example of the request body that we'll send to our function.</source>
        </trans-unit><trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Each <ph id="ph1">`reading`</ph> entry has an ID, timestamp, and temperature.</source>
        </trans-unit><trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Next, we'll replace the default code in our function with the following code that implements our business logic.</source>
        </trans-unit><trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Open the <bpt id="p1">**</bpt>index.js<ept id="p1">**</ept> file and replace it with the following code.</source>
        </trans-unit><trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The logic we added is straightforward.</source>
        </trans-unit><trans-unit id="169" translate="yes" xml:space="preserve">
          <source>We iterate over the array of readings and check the temperature field.</source>
        </trans-unit><trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Depending on the value of that field, we set a status of <bpt id="p1">**</bpt>OK<ept id="p1">**</ept>, <bpt id="p2">**</bpt>CAUTION<ept id="p2">**</ept>, or <bpt id="p3">**</bpt>DANGER<ept id="p3">**</ept>.</source>
        </trans-unit><trans-unit id="171" translate="yes" xml:space="preserve">
          <source>We then send back the array of readings with a status field added to each entry.</source>
        </trans-unit><trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Notice the <ph id="ph1">`log`</ph> statements.</source>
        </trans-unit><trans-unit id="173" translate="yes" xml:space="preserve">
          <source>When the function runs, these statements will add messages in the log window.</source>
        </trans-unit><trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Test our business logic</source>
        </trans-unit><trans-unit id="175" translate="yes" xml:space="preserve">
          <source>In this case, we're going to use the <bpt id="p1">**</bpt>Test<ept id="p1">**</ept> pane in the portal to test our function.</source>
        </trans-unit><trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Open the <bpt id="p1">**</bpt>Test<ept id="p1">**</ept> window from the right-hand side flyout menu.</source>
        </trans-unit><trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Paste the sample request into the request body text box.</source>
        </trans-unit><trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Select <bpt id="p1">**</bpt>Run<ept id="p1">**</ept> and view the response in the output pane.</source>
        </trans-unit><trans-unit id="179" translate="yes" xml:space="preserve">
          <source>To see log messages, open the <bpt id="p1">**</bpt>Logs<ept id="p1">**</ept> tab in the bottom flyout of the page.</source>
        </trans-unit><trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The following screenshot shows an example response in the output pane and messages in the  <bpt id="p1">**</bpt>Logs<ept id="p1">**</ept> pane.</source>
        </trans-unit><trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Screenshot of the Azure portal showing the function editor blade with the Test and Logs tabs visible.</source>
        </trans-unit><trans-unit id="182" translate="yes" xml:space="preserve">
          <source>A sample response from the function is shown in the output pane.</source>
        </trans-unit><trans-unit id="183" translate="yes" xml:space="preserve">
          <source>You can see in the output pane that our status field has been correctly added to each of the readings.</source>
        </trans-unit><trans-unit id="184" translate="yes" xml:space="preserve">
          <source>If you navigate to the <bpt id="p1">**</bpt>Monitor<ept id="p1">**</ept> dashboard, you'll see that the request has been logged to Application Insights.</source>
        </trans-unit><trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Screenshot of the Azure portal showing the prior test success result in the function Monitor dashboard.</source>
        </trans-unit></group></body></file></xliff>