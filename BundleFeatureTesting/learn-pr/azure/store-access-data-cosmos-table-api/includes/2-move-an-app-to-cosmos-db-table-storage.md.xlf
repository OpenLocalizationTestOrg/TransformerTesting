<?xml version="1.0"?><xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd"><file datatype="xml" original="2-move-an-app-to-cosmos-db-table-storage.md" source-language="en-US" target-language="en-US"><header><tool tool-id="mdxliff" tool-name="mdxliff"  tool-company="Microsoft" /><xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2-move-an-app-to-cosmos-db-table-storage.25f27b.db27e8921a72c12f95a10f010430714c0f0d4516.skl</xliffext:skl_file_name><xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version><xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">db27e8921a72c12f95a10f010430714c0f0d4516</xliffext:ms.openlocfilehash><xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ba7e452ac39d7f09a5646044b44de0e1cdc54982</xliffext:ms.sourcegitcommit><xliffext:ms.openlocfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">learn-pr\azure\store-access-data-cosmos-table-api\includes\2-move-an-app-to-cosmos-db-table-storage.md</xliffext:ms.openlocfilepath></header><body><group id="content" extype="content"><trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Companies that use Azure Storage tables for business-critical applications may find that Cosmos DB provides a better service for their needs.</source>
        </trans-unit><trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Suppose that your lenses database, which is implemented in Azure Storage tables, has been working well.</source>
        </trans-unit><trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The company has recently expanded into several new countries, and you have found that the performance of the database is not always as good in those countries as it is in your .</source>
        </trans-unit><trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Your technical director has asked you to determine if there is a way to eliminate these problems without rewriting the app that uses the database.</source>
        </trans-unit><trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Here, you will learn how Cosmos DB provides a more scalable alternative to Azure Storage tables and does not require developers to rewrite code.</source>
        </trans-unit><trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Features of Azure Storage tables</source>
        </trans-unit><trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Azure Storage is a service that provides the following data services:</source>
        </trans-unit><trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Data Service</source>
        </trans-unit><trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit><trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Blob storage<ept id="p1">**</ept></source>
        </trans-unit><trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Store, secure, and access Binary Large Objects (Blobs).</source>
        </trans-unit><trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Blobs can be any file and this service is often used with image, videos, and other media.</source>
        </trans-unit><trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Queue storage<ept id="p1">**</ept></source>
        </trans-unit><trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Store messages in a queue to organize communications between systems.</source>
        </trans-unit><trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Queues help to improve communications, because messages won't be lost at times of high demand.</source>
        </trans-unit><trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Instead, the queue may lengthen, but the receiving component keeps picking up and processing the messages until it catches up.</source>
        </trans-unit><trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>File storage<ept id="p1">**</ept></source>
        </trans-unit><trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Store files in file shares in the cloud for access with the Server Message Block (SMB) protocol.</source>
        </trans-unit><trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Table storage<ept id="p1">**</ept></source>
        </trans-unit><trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Store data in a NoSQL database to underpin applications.</source>
        </trans-unit><trans-unit id="121" translate="yes" xml:space="preserve">
          <source>In this module, we'll concentrate on Azure Storage tables.</source>
        </trans-unit><trans-unit id="122" translate="yes" xml:space="preserve">
          <source>This service provides a way to store semi-structured data in the cloud.</source>
        </trans-unit><trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The data is highly available to clients because it is replicated to multiple nodes or locations.</source>
        </trans-unit><trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Storage tables are an example of a NoSQL database.</source>
        </trans-unit><trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Such databases don't impose a strict schema on each table like a SQL database does.</source>
        </trans-unit><trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Instead, each entity in the table can have a different set of properties.</source>
        </trans-unit><trans-unit id="127" translate="yes" xml:space="preserve">
          <source>It's up to you to ensure that these properties are organized, and to ensure that apps that query the data can work with results that may have different values.</source>
        </trans-unit><trans-unit id="128" translate="yes" xml:space="preserve">
          <source>A primary advantage of this semi-structured approach to data is that the database can evolve more quickly to meet changing business requirements.</source>
        </trans-unit><trans-unit id="129" translate="yes" xml:space="preserve">
          <source>An entity, in a NoSQL table, is the equivalent of a row in a relational database table.</source>
        </trans-unit><trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Tables in Azure Storage can scale to large quantities of data; you can store any number of tables and any number of entities in a table.</source>
        </trans-unit><trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The only limits are the capacity of the storage account, which depends on the type of storage account you created.</source>
        </trans-unit><trans-unit id="132" translate="yes" xml:space="preserve">
          <source>For example, a standard storage account can store 2 PB of data in US and European data centers, or 500 TB in other locations.</source>
        </trans-unit><trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Azure storage accounts replicate data to multiple locations to ensure high-availability.</source>
        </trans-unit><trans-unit id="134" translate="yes" xml:space="preserve">
          <source>You can choose from the following types of replication in a storage account:</source>
        </trans-unit><trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Replication Type</source>
        </trans-unit><trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit><trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Locally redundant storage<ept id="p1">**</ept></source>
        </trans-unit><trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Data is replicated to a different storage scale unit with the same data center.</source>
        </trans-unit><trans-unit id="139" translate="yes" xml:space="preserve">
          <source>This data remains available if a single node fails in the data center.</source>
        </trans-unit><trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Your data may be unavailable if an entire data center fails.</source>
        </trans-unit><trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Zone-redundant storage<ept id="p1">**</ept></source>
        </trans-unit><trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Data is replicated to three storage clusters in a single region.</source>
        </trans-unit><trans-unit id="143" translate="yes" xml:space="preserve">
          <source>This data remains available if a single data center fails.</source>
        </trans-unit><trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Your data may be unavailable if there is a region-wide outage.</source>
        </trans-unit><trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Geo-redundant storage<ept id="p1">**</ept></source>
        </trans-unit><trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Data is replicated to a secondary region, hundreds or thousands of miles from the primary region.</source>
        </trans-unit><trans-unit id="147" translate="yes" xml:space="preserve">
          <source>This data remains available even if there is a region-wide outage.</source>
        </trans-unit><trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Read-access geo-redundant storage<ept id="p1">**</ept></source>
        </trans-unit><trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Data replicated to a secondary region, where it is available for clients to read.</source>
        </trans-unit><trans-unit id="150" translate="yes" xml:space="preserve">
          <source>You can use this replication to provide a source of data that is closer to users than the primary.</source>
        </trans-unit><trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Closer data can improve performance by avoiding the need to read data from hundreds or thousands of miles away.</source>
        </trans-unit><trans-unit id="152" translate="yes" xml:space="preserve">
          <source>With geo-redundant storage, data in the secondary region is not readable unless an outage causes Azure to fail-over to that region.</source>
        </trans-unit><trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Under normal circumstances, all clients must connect to the primary region to access data.</source>
        </trans-unit><trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Features of Azure Cosmos DB</source>
        </trans-unit><trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Cosmos DB is Microsoft's globally distributed, multi-model database service with Azure.</source>
        </trans-unit><trans-unit id="156" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Multi-model<ept id="p1">**</ept> means that you can use one of many data access methods and APIs to read and write data.</source>
        </trans-unit><trans-unit id="157" translate="yes" xml:space="preserve">
          <source>For example, you can use SQL, but if you prefer a NoSQL approach, you can use MongoDB, Cassandra, or Gremlin.</source>
        </trans-unit><trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Cosmos DB includes the Tables API, which means that if you move your data from Azure Storage tables into Cosmos DB, you don't have to rewrite your apps.</source>
        </trans-unit><trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Instead, you just change their connection strings.</source>
        </trans-unit><trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Cosmos DB can replicate data for read and write access to multiple regions.</source>
        </trans-unit><trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Clients can connect to a local replica both to query but also to modify data, which is not possible in Azure Storage tables.</source>
        </trans-unit><trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Differences between Azure Storage tables and Cosmos DB tables</source>
        </trans-unit><trans-unit id="163" translate="yes" xml:space="preserve">
          <source>There are some differences in behavior between Azure Storage tables and Cosmos DB tables to remember if you are considering a migration.</source>
        </trans-unit><trans-unit id="164" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit><trans-unit id="165" translate="yes" xml:space="preserve">
          <source>You are charged for the capacity of a Cosmos DB table as soon as it is created, even if that capacity isn't used.</source>
        </trans-unit><trans-unit id="166" translate="yes" xml:space="preserve">
          <source>This charging structure is because Cosmos DB uses a reserved-capacity model to ensure that clients can read data within 10 ms.</source>
        </trans-unit><trans-unit id="167" translate="yes" xml:space="preserve">
          <source>In Azure Storage tables, you are only charged for used capacity, but read access is only guaranteed within 10 seconds.</source>
        </trans-unit><trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Query results from Cosmos DB are not sorted in order of partition key and row key as they are from Storage tables.</source>
        </trans-unit><trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Row keys in Cosmos DB are limited to 255 bytes.</source>
        </trans-unit><trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Batch operations are limited to 2 MBs.</source>
        </trans-unit><trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Cross-Origin Resource Sharing (CORS) is not currently supported by Cosmos DB.</source>
        </trans-unit><trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Table names are case-sensitive in Cosmos DB.</source>
        </trans-unit><trans-unit id="173" translate="yes" xml:space="preserve">
          <source>They are not case-sensitive in Storage tables.</source>
        </trans-unit><trans-unit id="174" translate="yes" xml:space="preserve">
          <source>While these differences are small, you should take care to review your apps to ensure that a migration does not cause unexpected problems.</source>
        </trans-unit><trans-unit id="175" translate="yes" xml:space="preserve">
          <source>How to choose a storage location</source>
        </trans-unit><trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Each organization has different priorities for their NoSQL database system.</source>
        </trans-unit><trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Once you have identified those priorities, use this table to help you choose whether to use Azure Storage tables or Cosmos DB tables to persist data for your applications:</source>
        </trans-unit><trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Priority</source>
        </trans-unit><trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Azure Storage Tables</source>
        </trans-unit><trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Azure Cosmos DB Tables</source>
        </trans-unit><trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Latency</source>
        </trans-unit><trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Responses are fast, but there is no guaranteed response time.</source>
        </trans-unit><trans-unit id="183" translate="yes" xml:space="preserve">
          <source>&lt; 10 ms for reads, &lt; 15 ms for writes</source>
        </trans-unit><trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Throughput</source>
        </trans-unit><trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Maximum 20,000 operations/sec</source>
        </trans-unit><trans-unit id="186" translate="yes" xml:space="preserve">
          <source>No upper limit on throughput.</source>
        </trans-unit><trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Over 10 million operations/sec/table.</source>
        </trans-unit><trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Global distribution</source>
        </trans-unit><trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Single region for writes.</source>
        </trans-unit><trans-unit id="190" translate="yes" xml:space="preserve">
          <source>A secondary read-only region is possible with read-access geo-redundant replication.</source>
        </trans-unit><trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Replication of data for read and write to more than 30 regions.</source>
        </trans-unit><trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Indexes</source>
        </trans-unit><trans-unit id="193" translate="yes" xml:space="preserve">
          <source>A single primary key on the partition key and the row key.</source>
        </trans-unit><trans-unit id="194" translate="yes" xml:space="preserve">
          <source>No other indexes.</source>
        </trans-unit><trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Indexes are created automatically on all properties.</source>
        </trans-unit><trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Data consistency</source>
        </trans-unit><trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Strong in the primary region.</source>
        </trans-unit><trans-unit id="198" translate="yes" xml:space="preserve">
          <source>If you are using read-access geo-redundant replication, it may take time for changes to reach the secondary region.</source>
        </trans-unit><trans-unit id="199" translate="yes" xml:space="preserve">
          <source>You can choose from five different consistency levels depending on your needs for availability, latency, throughput, and consistency.</source>
        </trans-unit><trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Pricing</source>
        </trans-unit><trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Optimized for storage.</source>
        </trans-unit><trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Optimized for throughput.</source>
        </trans-unit><trans-unit id="203" translate="yes" xml:space="preserve">
          <source>SLAs</source>
        </trans-unit><trans-unit id="204" translate="yes" xml:space="preserve">
          <source>99.99% availability.</source>
        </trans-unit><trans-unit id="205" translate="yes" xml:space="preserve">
          <source>99.99% availability for single region and relaxed consistency databases.</source>
        </trans-unit><trans-unit id="206" translate="yes" xml:space="preserve">
          <source>99.999% availability for multi-region databases.</source>
        </trans-unit><trans-unit id="207" translate="yes" xml:space="preserve">
          <source>How to migrate an app to Azure Cosmos DB</source>
        </trans-unit><trans-unit id="208" translate="yes" xml:space="preserve">
          <source>If you have decided to move to Cosmos DB, and you currently have data in one or more Azure Storage tables, you must consider how to move that data into Cosmos DB.</source>
        </trans-unit><trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Microsoft provides two tools to complete this task:</source>
        </trans-unit><trans-unit id="210" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>The Azure Cosmos DB Data Migration Tool.<ept id="p1">**</ept></source>
        </trans-unit><trans-unit id="211" translate="yes" xml:space="preserve">
          <source>This open-source tool is built specifically to import data into Cosmos DB from many different sources, including tables in Azure Storage, SQL databases, MongoDB, text files in JSON and CSV formats, HBase, and other databases.</source>
        </trans-unit><trans-unit id="212" translate="yes" xml:space="preserve">
          <source>The tool has both a command-line version and a GUI version.</source>
        </trans-unit><trans-unit id="213" translate="yes" xml:space="preserve">
          <source>You supply the connection strings for the data source and the Cosmos DB target, and you can filter the data before migration.</source>
        </trans-unit><trans-unit id="214" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>AzCopy.<ept id="p1">**</ept></source>
        </trans-unit><trans-unit id="215" translate="yes" xml:space="preserve">
          <source>This command-line only tool is designed to enable developers to copy data to and from Azure Storage accounts.</source>
        </trans-unit><trans-unit id="216" translate="yes" xml:space="preserve">
          <source>The process has two stages:</source>
        </trans-unit><trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Export the data from the source to a local file.</source>
        </trans-unit><trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Import from that local file to a database in Cosmos, specifying the destination database by using its URL and access key.</source>
        </trans-unit><trans-unit id="219" translate="yes" xml:space="preserve">
          <source>The Data Migration Tool</source>
        </trans-unit></group></body></file></xliff>