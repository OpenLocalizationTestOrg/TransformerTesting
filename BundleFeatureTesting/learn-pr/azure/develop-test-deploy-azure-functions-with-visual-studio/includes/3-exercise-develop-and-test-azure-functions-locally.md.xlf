<?xml version="1.0"?><xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd"><file datatype="xml" original="3-exercise-develop-and-test-azure-functions-locally.md" source-language="en-US" target-language="en-US"><header><tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1931010" tool-company="Microsoft" /><xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3-exercise-develop-and-test-azure-functions-locally.025f0b65d6bf2c6dc73606c3edb9a643f1cd92fe.skl</xliffext:skl_file_name><xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version><xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">25f0a88838f5ae777e7b38c703592fa51e9c4ac6</xliffext:ms.openlocfilehash><xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/24/2019</xliffext:ms.lasthandoff><xliffext:ms.openlocfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">learn-pr\azure\develop-test-deploy-azure-functions-with-visual-studio\includes\3-exercise-develop-and-test-azure-functions-locally.md</xliffext:ms.openlocfilepath></header><body><group id="content" extype="content"><trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Visual Studio provides an excellent environment for creating and testing an Azure Functions app.</source>
        </trans-unit><trans-unit id="102" translate="yes" xml:space="preserve">
          <source>You can develop an Azure Function locally, and verify that it operates correctly, before deploying it to the cloud.</source>
        </trans-unit><trans-unit id="103" translate="yes" xml:space="preserve">
          <source>In the luxury watch online website scenario, there's a requirement for a function that returns information about a type of watch when given the model number of the watch.</source>
        </trans-unit><trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The information includes data such as the manufacturer, the type of case back (solid, transparent, engraved), the bezel, the style of the dial, the finishing of the case, the number of jewels, and so on.</source>
        </trans-unit><trans-unit id="105" translate="yes" xml:space="preserve">
          <source>In this exercise, you'll implement a version of this function locally, and test it using Visual Studio.</source>
        </trans-unit><trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Setup</source>
        </trans-unit><trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Before starting this exercise, you must install the Azure Functions tools extension for Visual Studio if you haven't done so previously.</source>
        </trans-unit><trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Use the following steps.</source>
        </trans-unit><trans-unit id="109" translate="yes" xml:space="preserve">
          <source>On your desktop computer, start <bpt id="p1">**</bpt>Visual Studio<ept id="p1">**</ept>.</source>
        </trans-unit><trans-unit id="110" translate="yes" xml:space="preserve">
          <source>On the <bpt id="p1">**</bpt>Tools<ept id="p1">**</ept> menu, click <bpt id="p2">**</bpt>Extensions and Updates<ept id="p2">**</ept>.</source>
        </trans-unit><trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Screenshot of Visual Studio with Extensions and Updates on the Tools menu highlighted</source>
        </trans-unit><trans-unit id="112" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Extensions and Updates<ept id="p1">**</ept> dialog box, in the <bpt id="p2">**</bpt>Search<ept id="p2">**</ept> box type <bpt id="p3">**</bpt>Azure Functions<ept id="p3">**</ept>.</source>
        </trans-unit><trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Select <bpt id="p1">**</bpt>Azure Functions and Web Jobs Tools<ept id="p1">**</ept>, and then click <bpt id="p2">**</bpt>Enable<ept id="p2">**</ept>.</source>
        </trans-unit><trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Screenshot of the Extensions and Updates dialog box with Azure Functions and Web Jobs Tools highlighted</source>
        </trans-unit><trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>Close<ept id="p1">**</ept>.</source>
        </trans-unit><trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Stop and restart Visual Studio.</source>
        </trans-unit><trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Create an Azure Functions app</source>
        </trans-unit><trans-unit id="118" translate="yes" xml:space="preserve">
          <source>In Visual Studio, on the <bpt id="p1">**</bpt>File<ept id="p1">**</ept> menu, click <bpt id="p2">**</bpt>New<ept id="p2">**</ept>, and then click <bpt id="p3">**</bpt>Project<ept id="p3">**</ept>.</source>
        </trans-unit><trans-unit id="119" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>New Project<ept id="p1">**</ept> dialog box, expand <bpt id="p2">**</bpt>Visual C#<ept id="p2">**</ept>, click <bpt id="p3">**</bpt>Cloud<ept id="p3">**</ept>, and then click <bpt id="p4">**</bpt>Azure Functions<ept id="p4">**</ept>.</source>
        </trans-unit><trans-unit id="120" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Name<ept id="p1">**</ept> box type <bpt id="p2">**</bpt>WatchPortalFunction<ept id="p2">**</ept>, select a convenient location on your computer to store the project, and then click <bpt id="p3">**</bpt>OK<ept id="p3">**</ept>.</source>
        </trans-unit><trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Screenshot of the New Project dialog box.</source>
        </trans-unit><trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The user has selected the Azure Functions project type and named the project WatchPortalFunction</source>
        </trans-unit><trans-unit id="123" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>New Project - WatchPortalFunction<ept id="p1">**</ept> dialog box, select <bpt id="p2">**</bpt>Azure Functions v2 (.NET Core)<ept id="p2">**</ept>, and then click <bpt id="p3">**</bpt>Http Trigger<ept id="p3">**</ept>.</source>
        </trans-unit><trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Leave the <bpt id="p1">**</bpt>Storage Account<ept id="p1">**</ept> set to <bpt id="p2">**</bpt>Storage Emulator<ept id="p2">**</ept> because you'll be running the function app locally to start with.</source>
        </trans-unit><trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Under <bpt id="p1">**</bpt>Access rights<ept id="p1">**</ept>, select <bpt id="p2">**</bpt>Anonymous<ept id="p2">**</ept>, and then click <bpt id="p3">**</bpt>OK<ept id="p3">**</ept>.</source>
        </trans-unit><trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Screenshot of the New Project - WatchPortalFunction dialog box.</source>
        </trans-unit><trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The user has selected the Http Trigger type, running using the Azure Functions v2 runtime</source>
        </trans-unit><trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Wait while Visual Studio creates and configures the Azure Functions app.</source>
        </trans-unit><trans-unit id="129" translate="yes" xml:space="preserve">
          <source>When it's complete, you'll see the code for a class named <ph id="ph1">`Function1`</ph> in the code window.</source>
        </trans-unit><trans-unit id="130" translate="yes" xml:space="preserve">
          <source>This code contains the boilerplate code for an HTTP trigger.</source>
        </trans-unit><trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Run`</ph> method is annotated with the <ph id="ph2">`[FunctionName ("Function1")]`</ph> attribute.</source>
        </trans-unit><trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Recall from the previous unit that the parameters to the <ph id="ph1">`Run`</ph> method are an <ph id="ph2">`HttpRequest`</ph> object containing the details of the request that triggered the function, and a reference to a trace log that you can use for recording trace information:</source>
        </trans-unit><trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Create the WatchInfo Azure Function</source>
        </trans-unit><trans-unit id="134" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept> window, right-click the <bpt id="p2">**</bpt>WatchPortalFunction<ept id="p2">**</ept> project, click <bpt id="p3">**</bpt>Add<ept id="p3">**</ept>, and then click <bpt id="p4">**</bpt>New Azure Function<ept id="p4">**</ept>.</source>
        </trans-unit><trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Screenshot of the Solution Explorer window.</source>
        </trans-unit><trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The user has selected Add -&gt; New Azure FUnction</source>
        </trans-unit><trans-unit id="137" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Add New Item - WatchPortalFunction<ept id="p1">**</ept> window, click <bpt id="p2">**</bpt>Azure Function<ept id="p2">**</ept>.</source>
        </trans-unit><trans-unit id="138" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Name<ept id="p1">**</ept> box, type <bpt id="p2">**</bpt>WatchInfo.cs<ept id="p2">**</ept>, and then click <bpt id="p3">**</bpt>Add<ept id="p3">**</ept>.</source>
        </trans-unit><trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Screenshot of the Add New Item window.</source>
        </trans-unit><trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The user has selected the Azure Function template, and named the new function WatchInfo.cs</source>
        </trans-unit><trans-unit id="141" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>New Azure Function - WatchInfo<ept id="p1">**</ept> window, click <bpt id="p2">**</bpt>Http trigger<ept id="p2">**</ept>.</source>
        </trans-unit><trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Under <bpt id="p1">**</bpt>Access rights<ept id="p1">**</ept>, click <bpt id="p2">**</bpt>Anonymous<ept id="p2">**</ept>, and then click <bpt id="p3">**</bpt>OK<ept id="p3">**</ept>.</source>
        </trans-unit><trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Screenshot of the New Azure Function window.</source>
        </trans-unit><trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The user has selected the Http Trigger with Anonymous access rights</source>
        </trans-unit><trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Visual Studio creates a new Azure Function and adds it to the Azure Function app.</source>
        </trans-unit><trans-unit id="146" translate="yes" xml:space="preserve">
          <source>This function has the same boilerplate code as <bpt id="p1">**</bpt>Function1<ept id="p1">**</ept>, except that the class is named <ph id="ph1">`WatchInfo`</ph>, and the <ph id="ph2">`Run`</ph> method is annotated with the <ph id="ph3">`[FunctionName("WatchInfo")]`</ph> attribute.</source>
        </trans-unit><trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Delete the code from the body of the <ph id="ph1">`Run`</ph> function apart from the first statement that writes to the trace log.</source>
        </trans-unit><trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The method should look like this:</source>
        </trans-unit><trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Add the following code to the body of the method, after the statement that writes to the trace log.</source>
        </trans-unit><trans-unit id="150" translate="yes" xml:space="preserve">
          <source>This code reads the <ph id="ph1">`model`</ph> parameter from the query string from the URL of the HTTP request.</source>
        </trans-unit><trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The code then retrieves the details for this model of watch; in this example, the function simply returns some dummy data.</source>
        </trans-unit><trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Finally, the function returns a response that contains these details.</source>
        </trans-unit><trans-unit id="153" translate="yes" xml:space="preserve">
          <source>If the initial request doesn't include a query string with the <ph id="ph1">`model`</ph> parameter, the function returns an error message.</source>
        </trans-unit><trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Test the Azure Function locally</source>
        </trans-unit><trans-unit id="155" translate="yes" xml:space="preserve">
          <source>On the <bpt id="p1">**</bpt>Debug<ept id="p1">**</ept> menu, click <bpt id="p2">**</bpt>Start Debugging<ept id="p2">**</ept>.</source>
        </trans-unit><trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Visual Studio builds the Azure Function app and starts the Azure Functions runtime.</source>
        </trans-unit><trans-unit id="157" translate="yes" xml:space="preserve">
          <source>You'll see a window appear displaying messages as the runtime starts up.</source>
        </trans-unit><trans-unit id="158" translate="yes" xml:space="preserve">
          <source>When the runtime is ready, you'll see a list of the HTTP functions available, and the URL that you can use to trigger each function.</source>
        </trans-unit><trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Screenshot of the Azure Functions runtime window.</source>
        </trans-unit><trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The runtime has started the Azure Functions app, and is displaying the URLs for the Function1 and WatchInfo Azure Functions</source>
        </trans-unit><trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Open a web browser, and enter the URL <ph id="ph1">`http://localhost:7071/api/WatchInfo?model=abc`</ph>.</source>
        </trans-unit><trans-unit id="162" translate="yes" xml:space="preserve">
          <source>This request triggers the <ph id="ph1">`WatchInfo`</ph> function and passes the model <ph id="ph2">`abc`</ph> as the query string parameter.</source>
        </trans-unit><trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The web browser should display the dummy details generated by the Azure Function.</source>
        </trans-unit><trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Screenshot of a web browser triggering the WatchInfo Azure Function.</source>
        </trans-unit><trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The function has returned the dummy details for the model specified in the query string of the URL provided</source>
        </trans-unit><trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Enter the URL <ph id="ph1">`http://localhost:7071/api/WatchInfo`</ph>.</source>
        </trans-unit><trans-unit id="167" translate="yes" xml:space="preserve">
          <source>This request doesn't include a query string.</source>
        </trans-unit><trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The trigger returns the error response and the web browser displays the message <bpt id="p1">*</bpt>Please provide a watch model in the query string<ept id="p1">*</ept>.</source>
        </trans-unit><trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Screenshot of a web browser triggering the WatchInfo Azure Function.</source>
        </trans-unit><trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The function has returned the error response</source>
        </trans-unit><trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Close the web browser, but leave the Azure Functions app running.</source>
        </trans-unit><trans-unit id="172" translate="yes" xml:space="preserve">
          <source>In Visual Studio, set a breakpoint on the line of code that retrieves the model from the query string.</source>
        </trans-unit><trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Screenshot of Visual Studio.</source>
        </trans-unit><trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The user has set a breakpoint on the statement that reads the model from the query string</source>
        </trans-unit><trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Restart the web browser, and enter the URL without the query string again, <ph id="ph1">`http://localhost:7071/api/WatchInfo`</ph>.</source>
        </trans-unit><trans-unit id="176" translate="yes" xml:space="preserve">
          <source>You'll drop into Visual Studio at the breakpoint.</source>
        </trans-unit><trans-unit id="177" translate="yes" xml:space="preserve">
          <source>In Visual Studio, press F10 to step over the statement at the breakpoint.</source>
        </trans-unit><trans-unit id="178" translate="yes" xml:space="preserve">
          <source>In the <ph id="ph1">`Autos`</ph> window, verify that the <ph id="ph2">`model`</ph> variable is <ph id="ph3">`null`</ph>.</source>
        </trans-unit><trans-unit id="179" translate="yes" xml:space="preserve">
          <source>This is because the query string doesn't contain a model parameter.</source>
        </trans-unit><trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Screenshot of Visual Studio.</source>
        </trans-unit><trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The user has dropped into the debugger and is examining the value of the model variable</source>
        </trans-unit><trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Press F10 again, and verify that control jumps to the statement that returns a <ph id="ph1">`BadRequestObjectResult`</ph> object.</source>
        </trans-unit><trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Press F5 to continue running the method and return to the web browser.</source>
        </trans-unit><trans-unit id="184" translate="yes" xml:space="preserve">
          <source>It should display the same error message as before.</source>
        </trans-unit><trans-unit id="185" translate="yes" xml:space="preserve">
          <source>In the web browser, enter the URL with a query string and a model parameter.</source>
        </trans-unit><trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Step through the Azure Function in the debugger, and verify that the model is retrieved correctly.</source>
        </trans-unit><trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`model`</ph> variable should be populated with the value of the parameter, and the details of the model returned as an <ph id="ph2">`OkObjectResult`</ph> object.</source>
        </trans-unit><trans-unit id="188" translate="yes" xml:space="preserve">
          <source>On the <bpt id="p1">*</bpt>Debug<ept id="p1">*</ept> menu, click <bpt id="p2">*</bpt>Stop Debugging<ept id="p2">*</ept>.</source>
        </trans-unit><trans-unit id="189" translate="yes" xml:space="preserve">
          <source>You've now seen how the Azure Functions Tools extension simplifies the experience of creating an Azure Functions app, and enables you to use familiar tools to build and debug your code.</source>
        </trans-unit></group></body></file></xliff>