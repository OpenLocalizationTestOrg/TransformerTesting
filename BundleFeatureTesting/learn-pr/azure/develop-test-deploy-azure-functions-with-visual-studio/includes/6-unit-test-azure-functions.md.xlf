<?xml version="1.0"?><xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd"><file datatype="xml" original="6-unit-test-azure-functions.md" source-language="en-US" target-language="en-US"><header><tool tool-id="mdxliff" tool-name="mdxliff"  tool-company="Microsoft" /><xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6-unit-test-azure-functions.e7d115.d165ed8e365c238a2dc2603da5d792cdc456871c.skl</xliffext:skl_file_name><xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version><xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d165ed8e365c238a2dc2603da5d792cdc456871c</xliffext:ms.openlocfilehash><xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ba7e452ac39d7f09a5646044b44de0e1cdc54982</xliffext:ms.sourcegitcommit><xliffext:ms.openlocfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">learn-pr\azure\develop-test-deploy-azure-functions-with-visual-studio\includes\6-unit-test-azure-functions.md</xliffext:ms.openlocfilepath></header><body><group id="content" extype="content"><trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Unit testing is a fundamental part of an Agile methodology.</source>
        </trans-unit><trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Visual Studio provides the Test project template.</source>
        </trans-unit><trans-unit id="103" translate="yes" xml:space="preserve">
          <source>You use this template to create the unit tests for your applications, and you can apply the same technique to testing for Azure Functions.</source>
        </trans-unit><trans-unit id="104" translate="yes" xml:space="preserve">
          <source>In the luxury watch online website scenario, your development team has a policy to achieve at least 80% coverage of code in unit testing.</source>
        </trans-unit><trans-unit id="105" translate="yes" xml:space="preserve">
          <source>You would like to implement the same policy for Azure Functions.</source>
        </trans-unit><trans-unit id="106" translate="yes" xml:space="preserve">
          <source>In this unit, you'll see how to use te <ph id="ph1">`xUnit`</ph> test framework with Visual Studio to test Azure Functions.</source>
        </trans-unit><trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Create a unit test project</source>
        </trans-unit><trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The first step is to create a project that contains your unit tests, and add it to the solution holding your Azure functions app.</source>
        </trans-unit><trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Use the following steps to create a unit test project for testing the <bpt id="p1">*</bpt>WatchInfo<ept id="p1">*</ept> function.</source>
        </trans-unit><trans-unit id="110" translate="yes" xml:space="preserve">
          <source>In Visual Studio, in the <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept> window, right-click the <bpt id="p2">**</bpt>WatchPortalFunction<ept id="p2">**</ept> solution, click <bpt id="p3">**</bpt>Add<ept id="p3">**</ept>, and then click <bpt id="p4">**</bpt>New Project<ept id="p4">**</ept>.</source>
        </trans-unit><trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Screenshot of Solution Explorer, showing the Add new project to solution command</source>
        </trans-unit><trans-unit id="112" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Add New Project<ept id="p1">**</ept> dialog box, under <bpt id="p2">**</bpt>Visual C#<ept id="p2">**</ept>, click <bpt id="p3">**</bpt>Test<ept id="p3">**</ept>.</source>
        </trans-unit><trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Select the <bpt id="p1">**</bpt>xUnit Test Project (.NET Core)<ept id="p1">**</ept> template.</source>
        </trans-unit><trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Specify the name <bpt id="p1">**</bpt>WatchFunctionsTests<ept id="p1">**</ept>, and then click <bpt id="p2">**</bpt>OK<ept id="p2">**</ept>.</source>
        </trans-unit><trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Screenshot of Add New Project dialog box.</source>
        </trans-unit><trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The user has selected the xUnit Test Project template</source>
        </trans-unit><trans-unit id="117" translate="yes" xml:space="preserve">
          <source>When the project has been added, right-click the <bpt id="p1">**</bpt>WatchFunctionTests<ept id="p1">**</ept> project in the <bpt id="p2">**</bpt>Solution Explorer<ept id="p2">**</ept> window, and then click <bpt id="p3">**</bpt>Manage NuGet Packages<ept id="p3">**</ept>.</source>
        </trans-unit><trans-unit id="118" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>NuGet: WatchFunctionTests<ept id="p1">**</ept> window, click the <bpt id="p2">**</bpt>Browse<ept id="p2">**</ept> tab. In the <bpt id="p3">**</bpt>Search<ept id="p3">**</ept> box, type <bpt id="p4">**</bpt>Microsoft.AspNetCore.Mvc<ept id="p4">**</ept>.</source>
        </trans-unit><trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Click the <bpt id="p1">**</bpt>Microsoft.AspNetCore.Mvs<ept id="p1">**</ept> package, and then click <bpt id="p2">**</bpt>Install<ept id="p2">**</ept>.</source>
        </trans-unit><trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Screenshot of the NuGet Package Manager window.</source>
        </trans-unit><trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The user is installing the Microsoft.AspNetCore.Mvc package</source>
        </trans-unit><trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The test project will create a mock HTTP environment.</source>
        </trans-unit><trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The classes required for doing this are in the <bpt id="p1">**</bpt>Microsoft.AspNetCore.Mvc<ept id="p1">**</ept> package.</source>
        </trans-unit><trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Wait while the package in installed.</source>
        </trans-unit><trans-unit id="125" translate="yes" xml:space="preserve">
          <source>If the <bpt id="p1">**</bpt>Preview Changes<ept id="p1">**</ept> message box appears, click <bpt id="p2">**</bpt>OK<ept id="p2">**</ept>.</source>
        </trans-unit><trans-unit id="126" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>License Acceptance<ept id="p1">**</ept> message box, click <bpt id="p2">**</bpt>I Accept<ept id="p2">**</ept>.</source>
        </trans-unit><trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Once the package has been added, in the <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept> window, under the <bpt id="p2">**</bpt>WatchFunctionsTest<ept id="p2">**</ept> project, right-click the <bpt id="p3">**</bpt>UnitTest1.cs<ept id="p3">**</ept> file and then click <bpt id="p4">**</bpt>Rename<ept id="p4">**</ept>.</source>
        </trans-unit><trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Change the name of the file to <bpt id="p1">**</bpt>WatchFunctionUnitTests.cs<ept id="p1">**</ept>.</source>
        </trans-unit><trans-unit id="129" translate="yes" xml:space="preserve">
          <source>In the message box that appears, click <bpt id="p1">**</bpt>Yes<ept id="p1">**</ept> to rename all references of <bpt id="p2">**</bpt>UnitTest1<ept id="p2">**</ept> to <bpt id="p3">**</bpt>WatchFunctionUnitTests<ept id="p3">**</ept>.</source>
        </trans-unit><trans-unit id="130" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept> window, under the <bpt id="p2">**</bpt>WatchFunctionsTest<ept id="p2">**</ept> project, right-click <bpt id="p3">**</bpt>Dependencies<ept id="p3">**</ept>, and then click <bpt id="p4">**</bpt>Add Reference<ept id="p4">**</ept>.</source>
        </trans-unit><trans-unit id="131" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Reference Manager<ept id="p1">**</ept> window, select the <bpt id="p2">**</bpt>WatchPortalFunction<ept id="p2">**</ept> project, and then click <bpt id="p3">**</bpt>OK<ept id="p3">**</ept>.</source>
        </trans-unit><trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Add unit tests for the WatchInfo function</source>
        </trans-unit><trans-unit id="133" translate="yes" xml:space="preserve">
          <source>You can now add unit tests to the test project.</source>
        </trans-unit><trans-unit id="134" translate="yes" xml:space="preserve">
          <source>In the luxury watch scenario, you want to ensure the <bpt id="p1">**</bpt>WatchInfo<ept id="p1">**</ept> function always returns an <bpt id="p2">*</bpt>OK<ept id="p2">*</ept> response when a model is provided in the query string of a request, and a <bpt id="p3">*</bpt>Bad<ept id="p3">*</ept> response if the query string is empty or doesn't contain the <ph id="ph1">`model`</ph> parameter.</source>
        </trans-unit><trans-unit id="135" translate="yes" xml:space="preserve">
          <source>You'll add a pair of <bpt id="p1">*</bpt>Fact<ept id="p1">*</ept> tests to the <bpt id="p2">**</bpt>WatchFunctionsTests<ept id="p2">**</ept> to verify this behavior.</source>
        </trans-unit><trans-unit id="136" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept> window, double-click the <bpt id="p2">**</bpt>WatchFunctionUnitTests.cs<ept id="p2">**</ept> file to display it in the code window.</source>
        </trans-unit><trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Add the following <ph id="ph1">`using`</ph> directives to the list at the top of the file.</source>
        </trans-unit><trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Change the name of the <bpt id="p1">**</bpt>Test1<ept id="p1">**</ept> method to <bpt id="p2">**</bpt>TestWatchFunctionSuccess<ept id="p2">**</ept>.</source>
        </trans-unit><trans-unit id="139" translate="yes" xml:space="preserve">
          <source>In the body of the <bpt id="p1">**</bpt>TestWatchFunctionSuccess<ept id="p1">**</ept> method, add the following code.</source>
        </trans-unit><trans-unit id="140" translate="yes" xml:space="preserve">
          <source>This statement creates a mock HTTP context and an HTTP request.</source>
        </trans-unit><trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The request includes a query string that includes the <ph id="ph1">`model`</ph> parameter, which is set to <ph id="ph2">`abc`</ph>.</source>
        </trans-unit><trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Add the statement shown below to the method.</source>
        </trans-unit><trans-unit id="143" translate="yes" xml:space="preserve">
          <source>This statement creates a dummy logger.</source>
        </trans-unit><trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Add the following code to the method.</source>
        </trans-unit><trans-unit id="145" translate="yes" xml:space="preserve">
          <source>These statements invoke the <bpt id="p1">**</bpt>WatchInfo<ept id="p1">**</ept> function, passing in the dummy request and logger as parameters.</source>
        </trans-unit><trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Add the code shown below to the method.</source>
        </trans-unit><trans-unit id="147" translate="yes" xml:space="preserve">
          <source>This code checks that the response from the Azure function is correct.</source>
        </trans-unit><trans-unit id="148" translate="yes" xml:space="preserve">
          <source>In this case, the function should return an <bpt id="p1">*</bpt>OK<ept id="p1">*</ept> response, containing the expected body data.</source>
        </trans-unit><trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The complete method should look like this:</source>
        </trans-unit><trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Add two more methods named <bpt id="p1">**</bpt>TestWatchFunctionFailureNoQueryString<ept id="p1">**</ept> and <bpt id="p2">**</bpt>TestWatchFunctionFailureNoModel<ept id="p2">**</ept>.</source>
        </trans-unit><trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The  <bpt id="p1">**</bpt>TestWatchFunctionFailureNoQueryString<ept id="p1">**</ept> verifies that the <bpt id="p2">**</bpt>WatchInfo<ept id="p2">**</ept> function fails gracefully if it isn't given a query string.</source>
        </trans-unit><trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>TestWatchFunctionFailureNoModel<ept id="p1">**</ept> checks for the same failure if the function is passed a query string that doesn't contain a model parameter.</source>
        </trans-unit><trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Run the tests</source>
        </trans-unit><trans-unit id="154" translate="yes" xml:space="preserve">
          <source>On the <bpt id="p1">**</bpt>Test<ept id="p1">**</ept> menu, click <bpt id="p2">**</bpt>Run<ept id="p2">**</ept>, and then click <bpt id="p3">**</bpt>All Tests<ept id="p3">**</ept>.</source>
        </trans-unit><trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Screenshot of the Test menu in Visual Studio.</source>
        </trans-unit><trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The user has selected Run -&gt; All Tests</source>
        </trans-unit><trans-unit id="157" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Test Explorer<ept id="p1">**</ept> window, all three tests should complete successfully.</source>
        </trans-unit><trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Screenshot of the Team Explorer window.</source>
        </trans-unit><trans-unit id="159" translate="yes" xml:space="preserve">
          <source>All three tests ran successfully</source>
        </trans-unit><trans-unit id="160" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept> window, under the <bpt id="p2">**</bpt>WatchPortalFunction<ept id="p2">**</ept> project, double-click <bpt id="p3">**</bpt>WatchInfo.cs<ept id="p3">**</ept> to display the file in the code editor.</source>
        </trans-unit><trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Find the following code:</source>
        </trans-unit><trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Change the statement that sets the <ph id="ph1">`model`</ph> variable as follows.</source>
        </trans-unit><trans-unit id="163" translate="yes" xml:space="preserve">
          <source>This change simulates the developer making a mistake in the code:</source>
        </trans-unit><trans-unit id="164" translate="yes" xml:space="preserve">
          <source>On the <bpt id="p1">**</bpt>Test<ept id="p1">**</ept> menu, click <bpt id="p2">**</bpt>Run<ept id="p2">**</ept>, and then click <bpt id="p3">**</bpt>All Tests<ept id="p3">**</ept> to repeat the tests.</source>
        </trans-unit><trans-unit id="165" translate="yes" xml:space="preserve">
          <source>This time, the <bpt id="p1">**</bpt>TestWatchFunctionSuccess<ept id="p1">**</ept> test should fail.</source>
        </trans-unit><trans-unit id="166" translate="yes" xml:space="preserve">
          <source>This failure occurs because the <bpt id="p1">**</bpt>WatchInfo<ept id="p1">**</ept> function hasn't found the parameter named <ph id="ph1">`modelll`</ph> in the query string, and so the function has returned a <bpt id="p2">*</bpt>Bad<ept id="p2">*</ept> response.</source>
        </trans-unit><trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Screenshot of the Team Explorer window.</source>
        </trans-unit><trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The TestWatchFunctionSuccess test failed</source>
        </trans-unit><trans-unit id="169" translate="yes" xml:space="preserve">
          <source>You've now seen how to create a unit test project, and implement unit tests for an Azure Function.</source>
        </trans-unit></group></body></file></xliff>