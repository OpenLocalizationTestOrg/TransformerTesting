<?xml version="1.0"?><xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd"><file datatype="xml" original="4-use-environment-variables.md" source-language="en-US" target-language="en-US"><header><tool tool-id="mdxliff" tool-name="mdxliff"  tool-company="Microsoft" /><xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4-use-environment-variables.2bd058.67f368b4bba9939c204bdbb6fb033449fd465754.skl</xliffext:skl_file_name><xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version><xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">67f368b4bba9939c204bdbb6fb033449fd465754</xliffext:ms.openlocfilehash><xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ba7e452ac39d7f09a5646044b44de0e1cdc54982</xliffext:ms.sourcegitcommit><xliffext:ms.openlocfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">learn-pr\azure\run-docker-with-azure-container-instances\includes\4-use-environment-variables.md</xliffext:ms.openlocfilepath></header><body><group id="content" extype="content"><trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Environment variables enable you to dynamically configure the application or script the container runs.</source>
        </trans-unit><trans-unit id="102" translate="yes" xml:space="preserve">
          <source>You can use the Azure CLI, PowerShell, or the Azure portal to set variables when you create the container.</source>
        </trans-unit><trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Secured environment variables enable you to prevent sensitive information from displaying in the container's output.</source>
        </trans-unit><trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Here, you'll create an Azure Cosmos DB instance and use environment variables to pass the connection information to an Azure container instance.</source>
        </trans-unit><trans-unit id="105" translate="yes" xml:space="preserve">
          <source>An application in the container uses the variables to write and read data from Cosmos DB.</source>
        </trans-unit><trans-unit id="106" translate="yes" xml:space="preserve">
          <source>You will create both an environment variable and a secured environment variable so you can see the difference between them.</source>
        </trans-unit><trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Deploy Azure Cosmos DB</source>
        </trans-unit><trans-unit id="108" translate="yes" xml:space="preserve">
          <source>When you deploy Azure Cosmos DB, you provide a unique database name.</source>
        </trans-unit><trans-unit id="109" translate="yes" xml:space="preserve">
          <source>For learning purposes, run this command from Cloud Shell to create a Bash variable that holds a unique name.</source>
        </trans-unit><trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Run this <ph id="ph1">`az cosmosdb create`</ph> command to create your Azure Cosmos DB instance.</source>
        </trans-unit><trans-unit id="111" translate="yes" xml:space="preserve">
          <source>This command can take a few minutes to complete.</source>
        </trans-unit><trans-unit id="112" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`$COSMOS_DB_NAME`</ph> specifies your unique database name.</source>
        </trans-unit><trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The command prints the endpoint address for your database.</source>
        </trans-unit><trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Here, the command saves this address to the Bash variable <ph id="ph1">`COSMOS_DB_ENDPOINT`</ph>.</source>
        </trans-unit><trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Run <ph id="ph1">`az cosmosdb list-keys`</ph> to get the Azure Cosmos DB connection key and store it in a Bash variable named <ph id="ph2">`COSMOS_DB_MASTERKEY`</ph>.</source>
        </trans-unit><trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Deploy a container that works with your database</source>
        </trans-unit><trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Here you'll create an Azure container instance that can read from and write records to your Azure Cosmos DB instance.</source>
        </trans-unit><trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The two environment variables you created in the last part, <ph id="ph1">`COSMOS_DB_ENDPOINT`</ph> and <ph id="ph2">`COSMOS_DB_MASTERKEY`</ph>, hold the values you need to connect to the Azure Cosmos DB instance.</source>
        </trans-unit><trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Run the following <ph id="ph1">`az container create`</ph> command to create the container.</source>
        </trans-unit><trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>microsoft/azure-vote-front:cosmosdb<ept id="p1">**</ept> refers to a Docker image that runs a fictitious voting app.</source>
        </trans-unit><trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Note the <ph id="ph1">`--environment-variables`</ph> argument.</source>
        </trans-unit><trans-unit id="122" translate="yes" xml:space="preserve">
          <source>This argument specifies environment variables that are passed to the container when the container starts.</source>
        </trans-unit><trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The container image is configured to look for these environment variables.</source>
        </trans-unit><trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Here, you pass the name of the Azure Cosmos DB endpoint and its connection key.</source>
        </trans-unit><trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Run <ph id="ph1">`az container show`</ph> to get your container's public IP address.</source>
        </trans-unit><trans-unit id="126" translate="yes" xml:space="preserve">
          <source>From a browser, navigate to your container's IP address.</source>
        </trans-unit><trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Sometimes containers take a minute or two to fully start up and be able to receive connections.</source>
        </trans-unit><trans-unit id="128" translate="yes" xml:space="preserve">
          <source>If there's no response when you navigate to the IP address in your browser, wait a few moments and refresh the page.</source>
        </trans-unit><trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Once the app is available, you see this.</source>
        </trans-unit><trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Azure voting application with two choices, cats or dogs.</source>
        </trans-unit><trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Try casting a vote for cats or dogs.</source>
        </trans-unit><trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Each vote is stored in your Azure Cosmos DB instance.</source>
        </trans-unit><trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Use secured environment variables to hide connection information</source>
        </trans-unit><trans-unit id="134" translate="yes" xml:space="preserve">
          <source>In the previous part, you used two environment variables to create your container.</source>
        </trans-unit><trans-unit id="135" translate="yes" xml:space="preserve">
          <source>By default, these environment variables are accessible through the Azure portal and command-line tools in plain text.</source>
        </trans-unit><trans-unit id="136" translate="yes" xml:space="preserve">
          <source>In this part, you'll learn how to prevent sensitive information, such as connection keys, from being displayed in plain text.</source>
        </trans-unit><trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Let's start by seeing the current behavior in action.</source>
        </trans-unit><trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Run the following <ph id="ph1">`az container show`</ph> command to display your container's environment variables.</source>
        </trans-unit><trans-unit id="139" translate="yes" xml:space="preserve">
          <source>You see that both values appear in plain text.</source>
        </trans-unit><trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Here's an example.</source>
        </trans-unit><trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Although these values don't appear to your users through the voting application, it's a good security practice to ensure that sensitive information, such as connection keys, are not stored in plain text.</source>
        </trans-unit><trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Secure environment variables prevent clear text output.</source>
        </trans-unit><trans-unit id="143" translate="yes" xml:space="preserve">
          <source>To use secure environment variables, you use the <ph id="ph1">`--secure-environment-variables`</ph> argument instead of the <ph id="ph2">`--environment-variables`</ph> argument.</source>
        </trans-unit><trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Run the following command to create a second container, named <bpt id="p1">**</bpt>aci-demo-secure<ept id="p1">**</ept>, that makes use of secured environment variables.</source>
        </trans-unit><trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Note the use of the <ph id="ph1">`--secure-environment-variables`</ph> argument.</source>
        </trans-unit><trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Run the following <ph id="ph1">`az container show`</ph> command to display your container's environment variables.</source>
        </trans-unit><trans-unit id="147" translate="yes" xml:space="preserve">
          <source>This time, you see that your environment variables do not appear in plain text.</source>
        </trans-unit><trans-unit id="148" translate="yes" xml:space="preserve">
          <source>In fact, the values of your environment variables do not appear at all.</source>
        </trans-unit><trans-unit id="149" translate="yes" xml:space="preserve">
          <source>That's OK because these values refer to sensitive information.</source>
        </trans-unit><trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Here, all you need to know is that the environment variables exist.</source>
        </trans-unit></group></body></file></xliff>