<?xml version="1.0"?><xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd"><file datatype="xml" original="7-create-resource-using-script.md" source-language="en-US" target-language="en-US"><header><tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1931010" tool-company="Microsoft" /><xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7-create-resource-using-script.f2299270b129813133cd2d9b94335e6a719f06d2.skl</xliffext:skl_file_name><xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version><xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a2f8856f993bae9cbdf6989c24ef3ecc078ec563</xliffext:ms.openlocfilehash><xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/24/2019</xliffext:ms.lasthandoff><xliffext:ms.openlocfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">learn-pr\azure\automate-azure-tasks-with-powershell\includes\7-create-resource-using-script.md</xliffext:ms.openlocfilepath></header><body><group id="content" extype="content"><trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Complex or repetitive tasks often take a great deal of administrative time.</source>
        </trans-unit><trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Organizations prefer to automate these tasks to reduce costs and avoid errors.</source>
        </trans-unit><trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This is important in the Customer Relationship Management (CRM) company example.</source>
        </trans-unit><trans-unit id="104" translate="yes" xml:space="preserve">
          <source>There, you test your software on multiple Linux Virtual Machines (VMs) that you need to continuously delete and recreate.</source>
        </trans-unit><trans-unit id="105" translate="yes" xml:space="preserve">
          <source>You want to use a PowerShell script to automate the creation of the VMs vs. creating them manually each time like we just did.</source>
        </trans-unit><trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Beyond the core operation of creating a VM you have a few additional requirements for your script.</source>
        </trans-unit><trans-unit id="107" translate="yes" xml:space="preserve">
          <source>You will create multiple VMs, so you want to put the creation inside a loop</source>
        </trans-unit><trans-unit id="108" translate="yes" xml:space="preserve">
          <source>You need to create VMs in three different resource groups, so the name of the resource group should be passed to the script as a parameter</source>
        </trans-unit><trans-unit id="109" translate="yes" xml:space="preserve">
          <source>In this section, you will see how to write and execute an Azure PowerShell script that meets these requirements.</source>
        </trans-unit><trans-unit id="110" translate="yes" xml:space="preserve">
          <source>What is a PowerShell script?</source>
        </trans-unit><trans-unit id="111" translate="yes" xml:space="preserve">
          <source>A PowerShell script is a text file containing commands and control constructs.</source>
        </trans-unit><trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The commands are invocations of cmdlets.</source>
        </trans-unit><trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The control constructs are programming features like loops, variables, parameters, comments, etc. supplied by PowerShell.</source>
        </trans-unit><trans-unit id="114" translate="yes" xml:space="preserve">
          <source>PowerShell script files have a <bpt id="p1">**</bpt>.ps1<ept id="p1">**</ept> file extension.</source>
        </trans-unit><trans-unit id="115" translate="yes" xml:space="preserve">
          <source>You can create and save these files with any text editor.</source>
        </trans-unit><trans-unit id="116" translate="yes" xml:space="preserve">
          <source>If youâ€™re writing PowerShell scripts under Windows, you can use the Windows PowerShell Integrated Scripting Environment (ISE).</source>
        </trans-unit><trans-unit id="117" translate="yes" xml:space="preserve">
          <source>This editor provides features such as syntax coloring and a list of available cmdlets.</source>
        </trans-unit><trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The following screenshot shows the Windows PowerShell Integrated Scripting Environment (ISE) with a sample script to connect to Azure and create a virtual machine in Azure.</source>
        </trans-unit><trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Screenshot of the Windows PowerShell Integrated Scripting Environment with a script to create a virtual machine open in the editing window.</source>
        </trans-unit><trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Once you have written the script, execute it from the PowerShell command line by passing the name of the file preceded by a dot and a backslash:</source>
        </trans-unit><trans-unit id="121" translate="yes" xml:space="preserve">
          <source>PowerShell techniques</source>
        </trans-unit><trans-unit id="122" translate="yes" xml:space="preserve">
          <source>PowerShell has many features found in typical programming languages.</source>
        </trans-unit><trans-unit id="123" translate="yes" xml:space="preserve">
          <source>You can define variables, use branches and loops, capture command-line parameters, write functions, add comments, and so on.</source>
        </trans-unit><trans-unit id="124" translate="yes" xml:space="preserve">
          <source>We will need three features for our script: variables, loops, and parameters.</source>
        </trans-unit><trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Variables</source>
        </trans-unit><trans-unit id="126" translate="yes" xml:space="preserve">
          <source>As you saw in the last unit, PowerShell supports variables.</source>
        </trans-unit><trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Use <bpt id="p1">**</bpt><ph id="ph1">$</ph><ept id="p1">**</ept> to declare a variable and <bpt id="p2">**</bpt><ph id="ph2">=</ph><ept id="p2">**</ept> to assign a value.</source>
        </trans-unit><trans-unit id="128" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit><trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Variables can hold objects.</source>
        </trans-unit><trans-unit id="130" translate="yes" xml:space="preserve">
          <source>For example, the following definition sets the <bpt id="p1">**</bpt>adminCredential<ept id="p1">**</ept> variable to the object returned by the <bpt id="p2">**</bpt>Get-Credential<ept id="p2">**</ept> cmdlet.</source>
        </trans-unit><trans-unit id="131" translate="yes" xml:space="preserve">
          <source>To obtain the value stored in a variable, use the <bpt id="p1">**</bpt><ph id="ph1">$</ph><ept id="p1">**</ept> prefix and its name as shown below:</source>
        </trans-unit><trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Loops</source>
        </trans-unit><trans-unit id="133" translate="yes" xml:space="preserve">
          <source>PowerShell has several loops: <bpt id="p1">**</bpt>For<ept id="p1">**</ept>, <bpt id="p2">**</bpt>Do...While<ept id="p2">**</ept>, <bpt id="p3">**</bpt>For...Each<ept id="p3">**</ept>, and so on.</source>
        </trans-unit><trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>For<ept id="p1">**</ept> loop is the best match for our needs because we will execute a cmdlet a fixed number of times.</source>
        </trans-unit><trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The core syntax is shown below; the example runs for two iterations and prints the value of <bpt id="p1">**</bpt>i<ept id="p1">**</ept> each time.</source>
        </trans-unit><trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The comparison operators are written <bpt id="p1">**</bpt>-lt<ept id="p1">**</ept> for "less than", <bpt id="p2">**</bpt>-le<ept id="p2">**</ept> for "less than or equal", <bpt id="p3">**</bpt>eq<ept id="p3">**</ept> for "equal", <bpt id="p4">**</bpt>ne<ept id="p4">**</ept> for "not equal", etc.</source>
        </trans-unit><trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit><trans-unit id="138" translate="yes" xml:space="preserve">
          <source>When you execute a script, you can pass arguments on the command line.</source>
        </trans-unit><trans-unit id="139" translate="yes" xml:space="preserve">
          <source>You can provide names for each parameter to help the script extract the values.</source>
        </trans-unit><trans-unit id="140" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit><trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Inside the script, you capture the values into variables.</source>
        </trans-unit><trans-unit id="142" translate="yes" xml:space="preserve">
          <source>In this example, the parameters are matched by name:</source>
        </trans-unit><trans-unit id="143" translate="yes" xml:space="preserve">
          <source>You can omit the names from the command line.</source>
        </trans-unit><trans-unit id="144" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit><trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Inside the script, you rely on position for matching when the parameters are unnamed:</source>
        </trans-unit><trans-unit id="146" translate="yes" xml:space="preserve">
          <source>We could take these parameters as input, and use a loop to create a set of VMs from the given parameters.</source>
        </trans-unit><trans-unit id="147" translate="yes" xml:space="preserve">
          <source>We'll try that next.</source>
        </trans-unit><trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The combination of PowerShell and Azure PowerShell gives you all the tools you need to automate Azure.</source>
        </trans-unit><trans-unit id="149" translate="yes" xml:space="preserve">
          <source>In our CRM example, we will be able to create multiple Linux VMs using a parameter to keep the script generic and a loop to avoid repeated code.</source>
        </trans-unit><trans-unit id="150" translate="yes" xml:space="preserve">
          <source>This means that a formerly complex operation can now be executed in a single step.</source>
        </trans-unit></group></body></file></xliff>