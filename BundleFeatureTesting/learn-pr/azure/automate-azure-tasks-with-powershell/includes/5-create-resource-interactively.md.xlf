<?xml version="1.0"?><xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd"><file datatype="xml" original="5-create-resource-interactively.md" source-language="en-US" target-language="en-US"><header><tool tool-id="mdxliff" tool-name="mdxliff"  tool-company="Microsoft" /><xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5-create-resource-interactively.7216a8.5619f6cde3fab4754b05ac7064b216a12e02d9d7.skl</xliffext:skl_file_name><xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version><xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5619f6cde3fab4754b05ac7064b216a12e02d9d7</xliffext:ms.openlocfilehash><xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ba7e452ac39d7f09a5646044b44de0e1cdc54982</xliffext:ms.sourcegitcommit><xliffext:ms.openlocfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">learn-pr\azure\automate-azure-tasks-with-powershell\includes\5-create-resource-interactively.md</xliffext:ms.openlocfilepath></header><body><group id="content" extype="content"><trans-unit id="101" translate="yes" xml:space="preserve">
          <source>PowerShell lets you write commands and execute them immediately.</source>
        </trans-unit><trans-unit id="102" translate="yes" xml:space="preserve">
          <source>This is known as <bpt id="p1">**</bpt>interactive mode<ept id="p1">**</ept>.</source>
        </trans-unit><trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Recall that the overall goal in the Customer Relationship Management (CRM) example is to create three test environments containing VMs.</source>
        </trans-unit><trans-unit id="104" translate="yes" xml:space="preserve">
          <source>You will use resource groups to ensure the VMs are organized into separate environments: one for unit testing, one for integration testing, and one for acceptance testing.</source>
        </trans-unit><trans-unit id="105" translate="yes" xml:space="preserve">
          <source>You only need to create the resource groups once, which means using the interactive mode of PowerShell is a good choice.</source>
        </trans-unit><trans-unit id="106" translate="yes" xml:space="preserve">
          <source>When you type a command into PowerShell, it matches it to a <bpt id="p1">_</bpt>cmdlet<ept id="p1">_</ept> which then performs the requested action.</source>
        </trans-unit><trans-unit id="107" translate="yes" xml:space="preserve">
          <source>We're going to look at some of the common commands you can use, and then look at installing the Azure support for PowerShell.</source>
        </trans-unit><trans-unit id="108" translate="yes" xml:space="preserve">
          <source>What are PowerShell cmdlets?</source>
        </trans-unit><trans-unit id="109" translate="yes" xml:space="preserve">
          <source>A PowerShell command is called a <bpt id="p1">**</bpt>cmdlet<ept id="p1">**</ept> (pronounced "command-let").</source>
        </trans-unit><trans-unit id="110" translate="yes" xml:space="preserve">
          <source>A cmdlet is a command that manipulates a single feature.</source>
        </trans-unit><trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The term <bpt id="p1">**</bpt>cmdlet<ept id="p1">**</ept> is intended to imply "small command".</source>
        </trans-unit><trans-unit id="112" translate="yes" xml:space="preserve">
          <source>By convention, cmdlet authors are encouraged to keep cmdlets simple and single-purpose.</source>
        </trans-unit><trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The base PowerShell product ships with cmdlets that work with features such as sessions and background jobs.</source>
        </trans-unit><trans-unit id="114" translate="yes" xml:space="preserve">
          <source>You add modules to your PowerShell installation to get cmdlets that manipulate other features.</source>
        </trans-unit><trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For example, there are third-party modules to work with ftp, administer your operating system, access the file system, and so on.</source>
        </trans-unit><trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Cmdlets follow a verb-noun naming convention; for example, <bpt id="p1">**</bpt>Get-Process<ept id="p1">**</ept>, <bpt id="p2">**</bpt>Format-Table<ept id="p2">**</ept>, and <bpt id="p3">**</bpt>Start-Service<ept id="p3">**</ept>.</source>
        </trans-unit><trans-unit id="117" translate="yes" xml:space="preserve">
          <source>There is also a convention for verb choice: "get" to retrieve data, "set" to insert or update data, "format" to format data, "out" to direct output to a destination, and so on.</source>
        </trans-unit><trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Cmdlet authors are encouraged to include a help file for each cmdlet.</source>
        </trans-unit><trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Get-Help<ept id="p1">**</ept> cmdlet displays the help file for any cmdlet.</source>
        </trans-unit><trans-unit id="120" translate="yes" xml:space="preserve">
          <source>For example, we could get help on the <ph id="ph1">`Get-ChildItem`</ph> cmdlet with the following statement:</source>
        </trans-unit><trans-unit id="121" translate="yes" xml:space="preserve">
          <source>What is a PowerShell module?</source>
        </trans-unit><trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Cmdlets are shipped in <bpt id="p1">_</bpt>modules<ept id="p1">_</ept>.</source>
        </trans-unit><trans-unit id="123" translate="yes" xml:space="preserve">
          <source>A PowerShell Module is a DLL that includes the code to proces each available cmdlet.</source>
        </trans-unit><trans-unit id="124" translate="yes" xml:space="preserve">
          <source>You load cmdlets into PowerShell by loading the module they are contained in.</source>
        </trans-unit><trans-unit id="125" translate="yes" xml:space="preserve">
          <source>You can get a list of loaded modules using the <ph id="ph1">`Get-Module`</ph> command:</source>
        </trans-unit><trans-unit id="126" translate="yes" xml:space="preserve">
          <source>This will output something like:</source>
        </trans-unit><trans-unit id="127" translate="yes" xml:space="preserve">
          <source>What is the Az module?</source>
        </trans-unit><trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Az<ept id="p1">**</ept> is the formal name for the Azure PowerShell module containing cmdlets to work with Azure features.</source>
        </trans-unit><trans-unit id="129" translate="yes" xml:space="preserve">
          <source>It contains hundreds of cmdlets that let you control nearly every aspect of every Azure resource.</source>
        </trans-unit><trans-unit id="130" translate="yes" xml:space="preserve">
          <source>You can work with resource groups, storage, virtual machines, Azure Active Directory, containers, machine learning, and so on.</source>
        </trans-unit><trans-unit id="131" translate="yes" xml:space="preserve">
          <source>This module is an open source component <bpt id="p1">[</bpt>available on GitHub<ept id="p1">](https://github.com/Azure/azure-powershell)</ept>.</source>
        </trans-unit><trans-unit id="132" translate="yes" xml:space="preserve">
          <source>You may have seen or used Azure PowerShell commands that used a <ph id="ph1">`-AzureRM`</ph> format.</source>
        </trans-unit><trans-unit id="133" translate="yes" xml:space="preserve">
          <source>In October 2018 we announced the replacement of the <bpt id="p1">**</bpt>AzureRM<ept id="p1">**</ept> module with the <bpt id="p2">**</bpt>Az<ept id="p2">**</ept> module.</source>
        </trans-unit><trans-unit id="134" translate="yes" xml:space="preserve">
          <source>This new module has several features, notably a shortened cmdlet noun prefix of <ph id="ph1">`-Az`</ph> instead of <ph id="ph2">`-AzureRM`</ph>.</source>
        </trans-unit><trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Az<ept id="p1">**</ept> module ships with backwards compatibility with the <bpt id="p2">**</bpt>AzureRM<ept id="p2">**</ept> module so the <ph id="ph1">`-AzureRM`</ph> cmdlet format will work, but you should transition to the <bpt id="p3">**</bpt>Az<ept id="p3">**</ept> module and use the <ph id="ph2">`-Az`</ph> commands going forward.</source>
        </trans-unit><trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Install the Az module</source>
        </trans-unit><trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The Az module is available from a global repository called the PowerShell Gallery.</source>
        </trans-unit><trans-unit id="138" translate="yes" xml:space="preserve">
          <source>You can install the module onto your local machine through the <ph id="ph1">`Install-Module`</ph> command.</source>
        </trans-unit><trans-unit id="139" translate="yes" xml:space="preserve">
          <source>You need an elevated PowerShell shell to install modules from the PowerShell Gallery.</source>
        </trans-unit><trans-unit id="140" translate="yes" xml:space="preserve">
          <source>To install the latest Azure PowerShell module, run the following commands:</source>
        </trans-unit><trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Open the <bpt id="p1">**</bpt>Start<ept id="p1">**</ept> menu and type <bpt id="p2">**</bpt>Windows PowerShell<ept id="p2">**</ept>.</source>
        </trans-unit><trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Right-click the <bpt id="p1">**</bpt>Windows PowerShell<ept id="p1">**</ept> icon and select <bpt id="p2">**</bpt>Run as administrator<ept id="p2">**</ept>.</source>
        </trans-unit><trans-unit id="143" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>User Account Control<ept id="p1">**</ept> dialog, select <bpt id="p2">**</bpt>Yes<ept id="p2">**</ept>.</source>
        </trans-unit><trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Type the following command, and then press Enter:</source>
        </trans-unit><trans-unit id="145" translate="yes" xml:space="preserve">
          <source>This installs the module for all users by default (controlled by the scope parameter).</source>
        </trans-unit><trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The command relies on NuGet to retrieve components, depending on the version of NuGet you have installed you might get a prompt to download and install the latest version of NuGet.</source>
        </trans-unit><trans-unit id="147" translate="yes" xml:space="preserve">
          <source>By default, the PowerShell gallery isn't configured as a trusted repository for PowerShellGet.</source>
        </trans-unit><trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The first time you use the PSGallery you see the following prompt:</source>
        </trans-unit><trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Script execution failed</source>
        </trans-unit><trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Depending on your security configuration, <ph id="ph1">`Import-Module`</ph> might fail with something like the following.</source>
        </trans-unit><trans-unit id="151" translate="yes" xml:space="preserve">
          <source>This normally indicates that the execution policy is "restricted", meaning you can't execute modules you download from an external source - including the PowerShell gallery.</source>
        </trans-unit><trans-unit id="152" translate="yes" xml:space="preserve">
          <source>You can check whether this is the case by executing the command <ph id="ph1">`Get-ExecutionPolicy`</ph>.</source>
        </trans-unit><trans-unit id="153" translate="yes" xml:space="preserve">
          <source>If it returns "Restricted", then do the following:</source>
        </trans-unit><trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Open an elevated PowerShell command prompt.</source>
        </trans-unit><trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">`SetExecutionPolicy`</ph> cmdlet to change the policy to "RemoteSigned":</source>
        </trans-unit><trans-unit id="156" translate="yes" xml:space="preserve">
          <source>This will prompt you for permission:</source>
        </trans-unit><trans-unit id="157" translate="yes" xml:space="preserve">
          <source>You should then be able to use <ph id="ph1">`Import-Module`</ph> to load the cmdlets.</source>
        </trans-unit><trans-unit id="158" translate="yes" xml:space="preserve">
          <source>We use the same commands to install the Azure PowerShell on either Linux or macOS.</source>
        </trans-unit><trans-unit id="159" translate="yes" xml:space="preserve">
          <source>In a terminal, type the following command to launch PowerShell Core with elevated privileges.</source>
        </trans-unit><trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Run the following command at the PowerShell Core prompt to install Azure PowerShell.</source>
        </trans-unit><trans-unit id="161" translate="yes" xml:space="preserve">
          <source>If you are asked whether you trust modules from <bpt id="p1">**</bpt>PSGallery<ept id="p1">**</ept>, answer <bpt id="p2">**</bpt>Yes<ept id="p2">**</ept> or <bpt id="p3">**</bpt>Yes to All<ept id="p3">**</ept>.</source>
        </trans-unit><trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Update a module</source>
        </trans-unit><trans-unit id="163" translate="yes" xml:space="preserve">
          <source>If you get a warning or error message indicating that a version of the Azure PowerShell module is already installed, you can update to the <bpt id="p1">_</bpt>latest<ept id="p1">_</ept> version by issuing the command:</source>
        </trans-unit><trans-unit id="164" translate="yes" xml:space="preserve">
          <source>As with the <ph id="ph1">`Install-Module`</ph> command, answer <bpt id="p1">**</bpt>Yes<ept id="p1">**</ept> or <bpt id="p2">**</bpt>Yes to All<ept id="p2">**</ept> when prompted to trust the module.</source>
        </trans-unit><trans-unit id="165" translate="yes" xml:space="preserve">
          <source>You can also use the <ph id="ph1">`Update-Module`</ph> command to re-install a module if you are having trouble with it.</source>
        </trans-unit><trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Example: How to create a resource group with Azure PowerShell</source>
        </trans-unit><trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Once you have the Azure module loaded, you can begin working with Azure.</source>
        </trans-unit><trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Let's do a common task - create a Resource Group.</source>
        </trans-unit><trans-unit id="169" translate="yes" xml:space="preserve">
          <source>As you know, we use resource groups to administer related resources together.</source>
        </trans-unit><trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Creating a new resource group is one of the first tasks you'll do when starting a new Azure solution.</source>
        </trans-unit><trans-unit id="171" translate="yes" xml:space="preserve">
          <source>There are four steps we need to perform:</source>
        </trans-unit><trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Import the Azure cmdlets.</source>
        </trans-unit><trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Connect to your Azure subscription.</source>
        </trans-unit><trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Create the resource group.</source>
        </trans-unit><trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Verify that creation was successful (see below).</source>
        </trans-unit><trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The following illustration shows an overview of these steps.</source>
        </trans-unit><trans-unit id="177" translate="yes" xml:space="preserve">
          <source>An illustration showing the steps to create a resource group.</source>
        </trans-unit><trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Each step corresponds to a different cmdlet.</source>
        </trans-unit><trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Import the Azure cmdlets</source>
        </trans-unit><trans-unit id="180" translate="yes" xml:space="preserve">
          <source>At startup, PowerShell loads only the core cmdlets by default.</source>
        </trans-unit><trans-unit id="181" translate="yes" xml:space="preserve">
          <source>This means the cmdlets you need to work with Azure won't be loaded.</source>
        </trans-unit><trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The most reliable way to load the cmdlets you need is to import them manually at the start of your PowerShell session.</source>
        </trans-unit><trans-unit id="183" translate="yes" xml:space="preserve">
          <source>You use the <bpt id="p1">**</bpt>Import-Module<ept id="p1">**</ept> cmdlet to load modules.</source>
        </trans-unit><trans-unit id="184" translate="yes" xml:space="preserve">
          <source>This cmdlet has many parameters to handle a variety of situations.</source>
        </trans-unit><trans-unit id="185" translate="yes" xml:space="preserve">
          <source>For example, it can load multiple modules, a specific module version, part of a module, and so on.</source>
        </trans-unit><trans-unit id="186" translate="yes" xml:space="preserve">
          <source>For example, we can load all the cmdlets for Az with the following command <bpt id="p1">**</bpt>in an elevated PowerShell session<ept id="p1">**</ept>:</source>
        </trans-unit><trans-unit id="187" translate="yes" xml:space="preserve">
          <source>If you find that you work with Azure PowerShell frequently, there are two ways you can automate the module-loading process.</source>
        </trans-unit><trans-unit id="188" translate="yes" xml:space="preserve">
          <source>You can add an entry to your PowerShell profile to import the Azure module at startup or use the latest versions of PowerShell, which loads the containing module automatically when you use a cmdlet.</source>
        </trans-unit><trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Connect</source>
        </trans-unit><trans-unit id="190" translate="yes" xml:space="preserve">
          <source>When you are working with a local install of Azure PowerShell, you will need to authenticate before you can execute Azure commands.</source>
        </trans-unit><trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Connect-AzAccount<ept id="p1">**</ept> cmdlet prompts for your Azure credentials and then connects to your Azure subscription.</source>
        </trans-unit><trans-unit id="192" translate="yes" xml:space="preserve">
          <source>It has many optional parameters, but if all you need is an interactive prompt, no parameters are needed:</source>
        </trans-unit><trans-unit id="193" translate="yes" xml:space="preserve">
          <source>You'll need to repeat these steps for every new PowerShell session you start since this module is not part of the core set.</source>
        </trans-unit><trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Working with subscriptions</source>
        </trans-unit><trans-unit id="195" translate="yes" xml:space="preserve">
          <source>If you are new to Azure, you probably only have a single subscription.</source>
        </trans-unit><trans-unit id="196" translate="yes" xml:space="preserve">
          <source>But if you have been using Azure for a while, you may have created multiple Azure subscriptions.</source>
        </trans-unit><trans-unit id="197" translate="yes" xml:space="preserve">
          <source>You can configure Azure PowerShell to execute commands against a particular subscription.</source>
        </trans-unit><trans-unit id="198" translate="yes" xml:space="preserve">
          <source>You can only be in one subscription at a time.</source>
        </trans-unit><trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">`Get-AzContext`</ph> cmdlet to determine which subscription is active.</source>
        </trans-unit><trans-unit id="200" translate="yes" xml:space="preserve">
          <source>If it's not the correct one, you can change it.</source>
        </trans-unit><trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Get a list of all subscription names in your account with the <ph id="ph1">`Get-AzSubscription`</ph> command.</source>
        </trans-unit><trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Change the subscription by passing the name of the one to select.</source>
        </trans-unit><trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Get a list of all Resource Groups</source>
        </trans-unit><trans-unit id="204" translate="yes" xml:space="preserve">
          <source>You can retrieve a list of all Resource Groups in the active subscription:</source>
        </trans-unit><trans-unit id="205" translate="yes" xml:space="preserve">
          <source>To get a more concise view, you can send the output from the <ph id="ph1">`Get-AzResourceGroup`</ph> to the <ph id="ph2">`Format-Table`</ph> cmdlet using a pipe '|'.</source>
        </trans-unit><trans-unit id="206" translate="yes" xml:space="preserve">
          <source>This will output something like:</source>
        </trans-unit><trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Create a Resource Group</source>
        </trans-unit><trans-unit id="208" translate="yes" xml:space="preserve">
          <source>As you know, when you are creating resources in Azure, you will always place them into a resource group for management purposes.</source>
        </trans-unit><trans-unit id="209" translate="yes" xml:space="preserve">
          <source>A resource group is often one of the first things you will create when starting a new application.</source>
        </trans-unit><trans-unit id="210" translate="yes" xml:space="preserve">
          <source>You can create resource groups with the <ph id="ph1">`New-AzResourceGroup`</ph> cmdlet.</source>
        </trans-unit><trans-unit id="211" translate="yes" xml:space="preserve">
          <source>You must specify a name and location.</source>
        </trans-unit><trans-unit id="212" translate="yes" xml:space="preserve">
          <source>The name must be unique within your subscription.</source>
        </trans-unit><trans-unit id="213" translate="yes" xml:space="preserve">
          <source>The location determines where the metadata for your resource group will be stored (which may be important to you for compliance reasons).</source>
        </trans-unit><trans-unit id="214" translate="yes" xml:space="preserve">
          <source>You use strings like "West US", "North Europe", or "West India" to specify the location.</source>
        </trans-unit><trans-unit id="215" translate="yes" xml:space="preserve">
          <source>As with most of the Azure cmdlets, <ph id="ph1">`New-AzResourceGroup`</ph> has many optional parameters; however, the core syntax is:</source>
        </trans-unit><trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Remember, we will be working in the Azure sandbox which creates the Resource Group for you.</source>
        </trans-unit><trans-unit id="217" translate="yes" xml:space="preserve">
          <source>The above command would be used if you work in your own subscription.</source>
        </trans-unit><trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Verify the resources</source>
        </trans-unit><trans-unit id="219" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Get-AzResource`</ph> lists your Azure resources.</source>
        </trans-unit><trans-unit id="220" translate="yes" xml:space="preserve">
          <source>This is useful here to verify whether creation of the resource group was successful.</source>
        </trans-unit><trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Like the <ph id="ph1">`Get-AzResourceGroup`</ph> command, you can get a more concise view through the <ph id="ph2">`Format-Table`</ph> cmdlet.</source>
        </trans-unit><trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Here we will use a shorthand version <ph id="ph1">`ft`</ph>:</source>
        </trans-unit><trans-unit id="223" translate="yes" xml:space="preserve">
          <source>You can also filter it to specific resource groups to only list resources associated with that group:</source>
        </trans-unit><trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Creating an Azure Virtual Machine</source>
        </trans-unit><trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Another common task that could be done with PowerShell is to create VMs.</source>
        </trans-unit><trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Azure PowerShell provides the <ph id="ph1">`New-AzVm`</ph> cmdlet to create a virtual machine.</source>
        </trans-unit><trans-unit id="227" translate="yes" xml:space="preserve">
          <source>The cmdlet has many parameters to let it handle the large number of VM configuration settings.</source>
        </trans-unit><trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Most of the parameters have reasonable default values so we only need to specify five things:</source>
        </trans-unit><trans-unit id="229" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ResourceGroupName<ept id="p1">**</ept>: The resource group into which the new VM will be placed.</source>
        </trans-unit><trans-unit id="230" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Name<ept id="p1">**</ept>: The name of the VM in Azure.</source>
        </trans-unit><trans-unit id="231" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Location<ept id="p1">**</ept>: Geographic location where the VM will be provisioned.</source>
        </trans-unit><trans-unit id="232" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Credential<ept id="p1">**</ept>: An object containing the username and password for the VM admin account.</source>
        </trans-unit><trans-unit id="233" translate="yes" xml:space="preserve">
          <source>We will use the <ph id="ph1">`Get-Credential`</ph> cmdlet.</source>
        </trans-unit><trans-unit id="234" translate="yes" xml:space="preserve">
          <source>This cmdlet will prompt for a username and password and package it into a credential object.</source>
        </trans-unit><trans-unit id="235" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Image<ept id="p1">**</ept>: The operating system image to use for the VM.</source>
        </trans-unit><trans-unit id="236" translate="yes" xml:space="preserve">
          <source>This is often a Linux distribution, or Windows Server.</source>
        </trans-unit><trans-unit id="237" translate="yes" xml:space="preserve">
          <source>You can supply these parameters directly to the cmdlet as shown above.</source>
        </trans-unit><trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Alternatively, other cmdlets can be used to configure the virtual machine, such as <ph id="ph1">`Set-AzVMOperatingSystem`</ph>, <ph id="ph2">`Set-AzVMSourceImage`</ph>, <ph id="ph3">`Add-AzVMNetworkInterface`</ph>, and <ph id="ph4">`Set-AzVMOSDisk`</ph>.</source>
        </trans-unit><trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Here's an example that strings the <ph id="ph1">`Get-Credential`</ph> cmdlet together with the <ph id="ph2">`-Credential`</ph> parameter:</source>
        </trans-unit><trans-unit id="240" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`AzVM`</ph> suffix is specific to VM-based commands in PowerShell.</source>
        </trans-unit><trans-unit id="241" translate="yes" xml:space="preserve">
          <source>There are several others you can use:</source>
        </trans-unit><trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Command</source>
        </trans-unit><trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit><trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Deletes an Azure VM.</source>
        </trans-unit><trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Start a stopped VM.</source>
        </trans-unit><trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Stop a running VM.</source>
        </trans-unit><trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Restart a VM.</source>
        </trans-unit><trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Updates the configuration for a VM.</source>
        </trans-unit><trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Example: getting the information for a VM</source>
        </trans-unit><trans-unit id="250" translate="yes" xml:space="preserve">
          <source>You can list the VMs in your subscription with the <ph id="ph1">`Get-AzVM -Status`</ph> command.</source>
        </trans-unit><trans-unit id="251" translate="yes" xml:space="preserve">
          <source>This can also specify a VM with the <ph id="ph1">`-Name`</ph> property.</source>
        </trans-unit><trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Here we assign it to a PowerShell variable:</source>
        </trans-unit><trans-unit id="253" translate="yes" xml:space="preserve">
          <source>The interesting thing is this is an <bpt id="p1">_</bpt>object<ept id="p1">_</ept> you can interact with.</source>
        </trans-unit><trans-unit id="254" translate="yes" xml:space="preserve">
          <source>For example, you can take that object, make changes and then push changes back to Azure with the <ph id="ph1">`Update-AzVM`</ph> command:</source>
        </trans-unit><trans-unit id="255" translate="yes" xml:space="preserve">
          <source>PowerShell's interactive mode is appropriate for one-off tasks.</source>
        </trans-unit><trans-unit id="256" translate="yes" xml:space="preserve">
          <source>In our example, we'll likely use the same resource group for the lifetime of the project, which means creating it interactively is reasonable.</source>
        </trans-unit><trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Interactive mode is often quicker and easier for this task than writing a script and executing that script exactly once.</source>
        </trans-unit></group></body></file></xliff>