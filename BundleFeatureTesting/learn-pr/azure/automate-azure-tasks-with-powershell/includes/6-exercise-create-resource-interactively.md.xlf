<?xml version="1.0"?><xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd"><file datatype="xml" original="6-exercise-create-resource-interactively.md" source-language="en-US" target-language="en-US"><header><tool tool-id="mdxliff" tool-name="mdxliff"  tool-company="Microsoft" /><xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6-exercise-create-resource-interactively.35d1b3.090ce72a9618fdf820487410978f275c4db83f44.skl</xliffext:skl_file_name><xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version><xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">090ce72a9618fdf820487410978f275c4db83f44</xliffext:ms.openlocfilehash><xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ba7e452ac39d7f09a5646044b44de0e1cdc54982</xliffext:ms.sourcegitcommit><xliffext:ms.openlocfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">learn-pr\azure\automate-azure-tasks-with-powershell\includes\6-exercise-create-resource-interactively.md</xliffext:ms.openlocfilepath></header><body><group id="content" extype="content"><trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Recall our original scenario - creating VMs to test our CRM software.</source>
        </trans-unit><trans-unit id="102" translate="yes" xml:space="preserve">
          <source>When a new build is available, we want to spin up a new VM so we can test the full install experience from a clean image.</source>
        </trans-unit><trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Then when we are finished, we want to delete the VM.</source>
        </trans-unit><trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Let's try the commands you would use to create a VM.</source>
        </trans-unit><trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Create a Linux VM with Azure PowerShell</source>
        </trans-unit><trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Since we are using the Azure sandbox, you won't have to create a Resource Group.</source>
        </trans-unit><trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Instead, use the Resource Group <bpt id="p1">**</bpt><bpt id="p2">&lt;rgn&gt;</bpt>[sandbox resource group name]<ept id="p2">&lt;/rgn&gt;</ept><ept id="p1">**</ept>.</source>
        </trans-unit><trans-unit id="108" translate="yes" xml:space="preserve">
          <source>In addition, be aware of the location restrictions.</source>
        </trans-unit><trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Let's create a new Azure VM with PowerShell.</source>
        </trans-unit><trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">`New-AzVm`</ph> cmdlet to create a VM.</source>
        </trans-unit><trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Use the Resource Group <bpt id="p1">**</bpt><bpt id="p2">&lt;rgn&gt;</bpt>[sandbox resource group name]<ept id="p2">&lt;/rgn&gt;</ept><ept id="p1">**</ept>.</source>
        </trans-unit><trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Give the VM a name - typically you want to use something meaningful that identifies the purposes of the VM, location, and (if there is more than one) instance number.</source>
        </trans-unit><trans-unit id="113" translate="yes" xml:space="preserve">
          <source>We'll use "testvm-eus-01" for "Test VM in East US, instance 1".</source>
        </trans-unit><trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Come up with your own name based on where you place the VM.</source>
        </trans-unit><trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Select a location close to you from the following list available in the Azure sandbox.</source>
        </trans-unit><trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Make sure to change the value in the below example command if you are using copy and paste.</source>
        </trans-unit><trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Use "UbuntuLTS" for the image - this is Ubuntu Linux.</source>
        </trans-unit><trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">`Get-Credential`</ph> cmdlet and feed the results into the <ph id="ph2">`Credential`</ph> parameter.</source>
        </trans-unit><trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Please see the <bpt id="p1">[</bpt>Linux VM FAQ<ept id="p1">](https://docs.microsoft.com/azure/virtual-machines/linux/faq#what-are-the-username-requirements-when-creating-a-vm?azure-portal=true)</ept> for username and password limitations.</source>
        </trans-unit><trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Passwords must be 12 - 123 characters in length and meet 3 out of the following 4 complexity requirements:</source>
        </trans-unit><trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Have lower characters</source>
        </trans-unit><trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Have upper characters</source>
        </trans-unit><trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Have a digit</source>
        </trans-unit><trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Have a special character (Regex match [\W_])</source>
        </trans-unit><trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Add the <ph id="ph1">`-OpenPorts`</ph> parameter and pass "22" as the port - this will let us SSH into the machine.</source>
        </trans-unit><trans-unit id="126" translate="yes" xml:space="preserve">
          <source>This will take a few minutes to complete.</source>
        </trans-unit><trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Once it does, you can query it and assign the VM object to a variable (<ph id="ph1">`$vm`</ph>).</source>
        </trans-unit><trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Then query the value to dump out the information about the VM:</source>
        </trans-unit><trans-unit id="129" translate="yes" xml:space="preserve">
          <source>You should see something like:</source>
        </trans-unit><trans-unit id="130" translate="yes" xml:space="preserve">
          <source>You can reach into complex objects through a dot (".") syntax.</source>
        </trans-unit><trans-unit id="131" translate="yes" xml:space="preserve">
          <source>For example, to see the properties in the <ph id="ph1">`VMSize`</ph> object associated with the HardwareProfile section you can type:</source>
        </trans-unit><trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Or to get information on one of the disks:</source>
        </trans-unit><trans-unit id="133" translate="yes" xml:space="preserve">
          <source>You can even pass the VM object into other cmdlets.</source>
        </trans-unit><trans-unit id="134" translate="yes" xml:space="preserve">
          <source>For example, this will retrieve the public IP address of your VM:</source>
        </trans-unit><trans-unit id="135" translate="yes" xml:space="preserve">
          <source>With the IP address, you can connect to the VM with SSH.</source>
        </trans-unit><trans-unit id="136" translate="yes" xml:space="preserve">
          <source>For example, if you used the username "bob", and the IP address is "205.22.16.5", then this command would connect to the Linux machine:</source>
        </trans-unit><trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Go ahead and log out by typing <ph id="ph1">`exit`</ph>.</source>
        </trans-unit><trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Delete a VM</source>
        </trans-unit><trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Just to try out some more commands, let's delete the VM.</source>
        </trans-unit><trans-unit id="140" translate="yes" xml:space="preserve">
          <source>We'll shut it down first.</source>
        </trans-unit><trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Now, let's delete the VM with the <ph id="ph1">`Remove-AzVM`</ph> cmdlet:</source>
        </trans-unit><trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Try this command to list all the resources in your resource group:</source>
        </trans-unit><trans-unit id="143" translate="yes" xml:space="preserve">
          <source>You should see a bunch of resources (disks, virtual networks, etc.) that all still exist.</source>
        </trans-unit><trans-unit id="144" translate="yes" xml:space="preserve">
          <source>This is because the <ph id="ph1">`Remove-AzVM`</ph> command <bpt id="p1">_</bpt>just deletes the VM<ept id="p1">_</ept>.</source>
        </trans-unit><trans-unit id="145" translate="yes" xml:space="preserve">
          <source>It doesn't cleanup any of the other resources!</source>
        </trans-unit><trans-unit id="146" translate="yes" xml:space="preserve">
          <source>At this point, we'd likely just delete the Resource Group itself and be done with it.</source>
        </trans-unit><trans-unit id="147" translate="yes" xml:space="preserve">
          <source>However, let's just run through the exercise to clean it up manually.</source>
        </trans-unit><trans-unit id="148" translate="yes" xml:space="preserve">
          <source>You should see a pattern in the commands.</source>
        </trans-unit><trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Delete the Network Interface.</source>
        </trans-unit><trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Delete the managed OS disks and storage account</source>
        </trans-unit><trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Next, delete the virtual network.</source>
        </trans-unit><trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Delete the network security group.</source>
        </trans-unit><trans-unit id="153" translate="yes" xml:space="preserve">
          <source>And finally, the public IP address.</source>
        </trans-unit><trans-unit id="154" translate="yes" xml:space="preserve">
          <source>We should have caught all the created resources; check the resource group just to be sure.</source>
        </trans-unit><trans-unit id="155" translate="yes" xml:space="preserve">
          <source>We did a lot of manual commands here but a better approach would have been to write a <bpt id="p1">_</bpt>script<ept id="p1">_</ept> so we could reuse this logic later to create or delete a VM.</source>
        </trans-unit><trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Let's look at scripting with PowerShell.</source>
        </trans-unit></group></body></file></xliff>