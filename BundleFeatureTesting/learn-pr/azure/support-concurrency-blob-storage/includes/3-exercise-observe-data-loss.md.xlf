<?xml version="1.0"?><xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd"><file datatype="xml" original="3-exercise-observe-data-loss.md" source-language="en-US" target-language="en-US"><header><tool tool-id="mdxliff" tool-name="mdxliff"  tool-company="Microsoft" /><xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3-exercise-observe-data-loss.10488c.af8570a0e38666d2c4fde5e79a9acc265a695407.skl</xliffext:skl_file_name><xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version><xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">af8570a0e38666d2c4fde5e79a9acc265a695407</xliffext:ms.openlocfilehash><xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ba7e452ac39d7f09a5646044b44de0e1cdc54982</xliffext:ms.sourcegitcommit><xliffext:ms.openlocfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">learn-pr\azure\support-concurrency-blob-storage\includes\3-exercise-observe-data-loss.md</xliffext:ms.openlocfilepath></header><body><group id="content" extype="content"><trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Your news organization has a web app the financial reporters use to submit stories to their newsroom chief.</source>
        </trans-unit><trans-unit id="102" translate="yes" xml:space="preserve">
          <source>The app uses Azure Blob storage to store stories for the chief  to review submitted stories.</source>
        </trans-unit><trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The newsroom chief first uses the editing application to create notes for the new stories they want to be written.</source>
        </trans-unit><trans-unit id="104" translate="yes" xml:space="preserve">
          <source>When they're finished, they save their changes.</source>
        </trans-unit><trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Saving them uploads the notes to a new blob.</source>
        </trans-unit><trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Stories are then assigned to a reporter.</source>
        </trans-unit><trans-unit id="107" translate="yes" xml:space="preserve">
          <source>A reporter assigned to a story loads the notes, overwrites, and expands on them with their story, and finally saves them.</source>
        </trans-unit><trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Now imagine two reporters are assigned to the same story.</source>
        </trans-unit><trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Reporter A begins work quickly, retrieving the notes and beginning to write a long story.</source>
        </trans-unit><trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Reporter B begins soon after, but works faster and finishes their story first.</source>
        </trans-unit><trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Reporter B saves their changes, committing them to the blob.</source>
        </trans-unit><trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Later, Reporter A finishes their story and saves it.</source>
        </trans-unit><trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The newsroom chief has been receiving complaints from their reporters that stories are being lost.</source>
        </trans-unit><trans-unit id="114" translate="yes" xml:space="preserve">
          <source>On executing the app, you'll notice Reporter A is unaware of the previous completed work of Reporter B, and Reporter A has their story read by the newsroom chief.</source>
        </trans-unit><trans-unit id="115" translate="yes" xml:space="preserve">
          <source>In this exercise, you'll deploy the app and observe the last writer wins issues created by concurrent updates.</source>
        </trans-unit><trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Create an Azure storage account and store the connection string</source>
        </trans-unit><trans-unit id="117" translate="yes" xml:space="preserve">
          <source>To experiment with Blob storage concurrency code, we'll start by creating a Blob storage account using the Cloud Shell.</source>
        </trans-unit><trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Run the commands below to create a new storage account:</source>
        </trans-unit><trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Next enter <ph id="ph1">`az storage account show-connection-string`</ph> to get the connection string and store it into an environment variable named <ph id="ph2">`STORAGE_CONNECTION_STRING`</ph>.</source>
        </trans-unit><trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Download and review the sample code</source>
        </trans-unit><trans-unit id="121" translate="yes" xml:space="preserve">
          <source>In the Cloud Shell, clone your app from GitHub.</source>
        </trans-unit><trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The above commands move you into the NewsEditor app folder.</source>
        </trans-unit><trans-unit id="123" translate="yes" xml:space="preserve">
          <source>There other folders that have completed code for units in the rest of the module.</source>
        </trans-unit><trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Open the <bpt id="p1">**</bpt>Program.cs<ept id="p1">**</ept> file in the code editor.</source>
        </trans-unit><trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Scroll down to the <ph id="ph1">`SimulateReporter`</ph> method.</source>
        </trans-unit><trans-unit id="126" translate="yes" xml:space="preserve">
          <source>This method simulates the activities of a reporter working in a version of the news editing application that does not perform any kind of active concurrency management.</source>
        </trans-unit><trans-unit id="127" translate="yes" xml:space="preserve">
          <source>In the simulation, two instances of this method will run simultaneously with different timings.</source>
        </trans-unit><trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Both reporters will observe the same contents when they first load the file from blob storage.</source>
        </trans-unit><trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The reporter that takes longer to write their story and save it back to the blob will overwrite the content placed there by the first author without knowing it.</source>
        </trans-unit><trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Close the Code editor (CTRL+Q).</source>
        </trans-unit><trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Execute the test app</source>
        </trans-unit><trans-unit id="132" translate="yes" xml:space="preserve">
          <source>In the Cloud Shell, build and run the app with this command.</source>
        </trans-unit><trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The output is:</source>
        </trans-unit><trans-unit id="134" translate="yes" xml:space="preserve">
          <source>These console messages allow you to follow the flow of the app; in this example Reporter B has lost their work.</source>
        </trans-unit></group></body></file></xliff>