<?xml version="1.0"?><xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd"><file datatype="xml" original="6-implementing-pessimistic-concurrency.md" source-language="en-US" target-language="en-US"><header><tool tool-id="mdxliff" tool-name="mdxliff"  tool-company="Microsoft" /><xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6-implementing-pessimistic-concurrency.be3ea4.64746c8756497e28a78620f5dcafdcc180d6fda7.skl</xliffext:skl_file_name><xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version><xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">64746c8756497e28a78620f5dcafdcc180d6fda7</xliffext:ms.openlocfilehash><xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ba7e452ac39d7f09a5646044b44de0e1cdc54982</xliffext:ms.sourcegitcommit><xliffext:ms.openlocfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">learn-pr\azure\support-concurrency-blob-storage\includes\6-implementing-pessimistic-concurrency.md</xliffext:ms.openlocfilepath></header><body><group id="content" extype="content"><trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Pessimistic concurrency prevents other users from modifying data by locking it with a <bpt id="p1">**</bpt>lease<ept id="p1">**</ept>.</source>
        </trans-unit><trans-unit id="102" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">**</bpt>lease<ept id="p1">**</ept> locks resticts access to a single client for a pre-determined amount of time.</source>
        </trans-unit><trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Once the lease has been acquired, other users are prevented from completing actions on that data.</source>
        </trans-unit><trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The lease defines how long you hold on to the content.</source>
        </trans-unit><trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Lease times are from between 15 to 60 seconds.</source>
        </trans-unit><trans-unit id="106" translate="yes" xml:space="preserve">
          <source>A lease can be reacquired before it expires to extend it, and released earlier once you've finished using it.</source>
        </trans-unit><trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The blob service automatically releases finite leases when they expire.</source>
        </trans-unit><trans-unit id="108" translate="yes" xml:space="preserve">
          <source><ph id="ph1">![</ph>Pessimistic approach to concurrency workflow<ph id="ph2">](../media/pessitimistic.png)
</ph></source>
        </trans-unit><trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Using our example app, the first reporter will lock the file.</source>
        </trans-unit><trans-unit id="110" translate="yes" xml:space="preserve">
          <source>No one else will be granted a lock until the current one has been released, or has expired.</source>
        </trans-unit><trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The second reporter, being the quickest, has finished writing their story but will be unable to get a lock to save it until the first reporter lets them.</source>
        </trans-unit><trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Locks on Azure blobs are called <bpt id="p1">*</bpt>leases<ept id="p1">*</ept>.</source>
        </trans-unit><trans-unit id="113" translate="yes" xml:space="preserve">
          <source>An app must acquire a lease before it tries to update an object in blob storage.</source>
        </trans-unit><trans-unit id="114" translate="yes" xml:space="preserve">
          <source>When requesting the least you specify an amount of time, or say that you want the lease indefinitely.</source>
        </trans-unit><trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The operations possible on a lease are:</source>
        </trans-unit><trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Acquire<ept id="p1">**</ept>: requests a new lease.</source>
        </trans-unit><trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Renew<ept id="p1">**</ept>: allows you to renew an existing lease.</source>
        </trans-unit><trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Change<ept id="p1">**</ept>: is used to change the ID of an existing lease.</source>
        </trans-unit><trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Release<ept id="p1">**</ept>: frees the lease early to allow another apps to acquire a lease.</source>
        </trans-unit><trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Break<ept id="p1">**</ept>: ends the lease but prevents another client from acquiring a new lease until the current lease period has expired.</source>
        </trans-unit><trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The first reporter will acquire a lease for the storage, and begin writing.</source>
        </trans-unit><trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The second reporter tries to acquire the lease before starting and receive an error, because there's already a lease in use.</source>
        </trans-unit><trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The reporter will have to wait until the lease is either released or expired.</source>
        </trans-unit><trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Azure Blob Storage</source>
        </trans-unit><trans-unit id="125" translate="yes" xml:space="preserve">
          <source>To acquire a lease in C#, use this code:</source>
        </trans-unit><trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The above code notifies Azure cloud storage that you'd like exclusive access to <ph id="ph1">`file-to-change`</ph> for <bpt id="p1">**</bpt>60 seconds<ept id="p1">**</ept>.</source>
        </trans-unit><trans-unit id="127" translate="yes" xml:space="preserve">
          <source>If a second app, or process, also tries to acquire a lease on the same object, Azure will return a <bpt id="p1">**</bpt>409<ept id="p1">**</ept> HTTP error code (conflict ocurred).</source>
        </trans-unit><trans-unit id="128" translate="yes" xml:space="preserve">
          <source>If other processes, including the Azure portal, tries to change the file they won't be able to.</source>
        </trans-unit><trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Screenshot of the Azure portal showing the storage as read only</source>
        </trans-unit><trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Now the lease has been created, you must use it with <ph id="ph1">`UploadTextAsync`</ph> to prove you're allowed to complete the update.</source>
        </trans-unit><trans-unit id="131" translate="yes" xml:space="preserve">
          <source>In code, you create an access condition generated from the acquired lease, and use that as the parameter:</source>
        </trans-unit><trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Advantages and disadvantages</source>
        </trans-unit><trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Pessimistic concurrency is primarily used in environments where there's heavy contention for data.</source>
        </trans-unit><trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The cost of protecting data with a lease is less than the cost of fixing the data if concurrency conflicts occur.</source>
        </trans-unit><trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Pessimistic concurrency is best implemented when lease times will be short, as in programmatic processing of records.</source>
        </trans-unit><trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Pessimistic concurrency isn't a scalable option if users are working with data and locking records for large periods of time.</source>
        </trans-unit><trans-unit id="137" translate="yes" xml:space="preserve">
          <source>It's pessimistic, because you think that someone else is going to edit a file at the same time you're using it.</source>
        </trans-unit><trans-unit id="138" translate="yes" xml:space="preserve">
          <source>An app can request ownership of a blob and not allow anyone else to change it while it's being used.</source>
        </trans-unit><trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The obvious downside is that no one else can make changes to the storage.</source>
        </trans-unit><trans-unit id="140" translate="yes" xml:space="preserve">
          <source>As you can see from the above Azure portal screenshot, it's still possible to open it for read access though.</source>
        </trans-unit><trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Unlike optimistic concurrency, leases are enforced globally, regardless of application implementation.</source>
        </trans-unit><trans-unit id="142" translate="yes" xml:space="preserve">
          <source>So if a single app acquires a lease, no other process can update the storage until the lease has expired or been released.</source>
        </trans-unit></group></body></file></xliff>