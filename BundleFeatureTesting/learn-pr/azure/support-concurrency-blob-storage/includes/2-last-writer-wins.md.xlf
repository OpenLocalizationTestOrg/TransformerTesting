<?xml version="1.0"?><xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd"><file datatype="xml" original="2-last-writer-wins.md" source-language="en-US" target-language="en-US"><header><tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1931010" tool-company="Microsoft" /><xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2-last-writer-wins.37c8b1ac7f40d0a0d12d700eb4b6455de2385a14.skl</xliffext:skl_file_name><xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version><xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5c84ea49dba0c8efd0f5b68e13c5d722b4c90e9d</xliffext:ms.openlocfilehash><xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/24/2019</xliffext:ms.lasthandoff><xliffext:ms.openlocfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">learn-pr\azure\support-concurrency-blob-storage\includes\2-last-writer-wins.md</xliffext:ms.openlocfilepath></header><body><group id="content" extype="content"><trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Cloud-based storage gives organizations the flexibility to work on files globally.</source>
        </trans-unit><trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Using economies of scale, large amounts of storage is available at a fraction of the cost of traditional storage.</source>
        </trans-unit><trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Companies have to handle files being accessed concurrently when writing applications that use it.</source>
        </trans-unit><trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Your company's authoring app stores data in Blob Storage.</source>
        </trans-unit><trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The app was written when there was only one or two reporters in the team.</source>
        </trans-unit><trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The newsroom has dramatically increased in size, and there are now issues with work being overwritten and lost.</source>
        </trans-unit><trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Here, you'll learn about the issues you can face with concurrency when using Blob storage.</source>
        </trans-unit><trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Last writer wins</source>
        </trans-unit><trans-unit id="109" translate="yes" xml:space="preserve">
          <source>text</source>
        </trans-unit><trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Last writer wins is the name given to the approach when no consideration has been given to concurrency.</source>
        </trans-unit><trans-unit id="111" translate="yes" xml:space="preserve">
          <source>As the name implies, whoever makes changes most recently overwrites previous changes.</source>
        </trans-unit><trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The results of operations are unpredictable and can lead to data loss.</source>
        </trans-unit><trans-unit id="113" translate="yes" xml:space="preserve">
          <source>When the last writer wins, there's no control over who reads or writes data.</source>
        </trans-unit><trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The last person to save their changes to a file has them reflected in that data.</source>
        </trans-unit><trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Anything that has happened to the storage before is overwritten.</source>
        </trans-unit><trans-unit id="116" translate="yes" xml:space="preserve">
          <source>For example, a user may start editing a document, while editing, a second user edits the same document and commits their changes.</source>
        </trans-unit><trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Then the first user saves their changes.</source>
        </trans-unit><trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Because they're starting from a copy of the document without the 2nd user's changes, those edits are overritten and lost.</source>
        </trans-unit><trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Even though there can be data lost, last writer wins can be a valid strategy in situations where having the latest data is most important.</source>
        </trans-unit><trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Previous versions of the data have little to no value.</source>
        </trans-unit><trans-unit id="121" translate="yes" xml:space="preserve">
          <source>A stock market ticker is a good example, as the ticker app just needs to show the most recent values for a stock.</source>
        </trans-unit><trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Blob Storage Concurrency</source>
        </trans-unit><trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Multiple users accessing data at the same time will liekly cause concurrency issues when using Azure blob storage.</source>
        </trans-unit><trans-unit id="124" translate="yes" xml:space="preserve">
          <source>To solve these problems, Blob storage supports two different approaches to resolving concurrency.</source>
        </trans-unit><trans-unit id="125" translate="yes" xml:space="preserve">
          <source>An app can choose to resolve concurrency <bpt id="p1">*</bpt>optimistically<ept id="p1">*</ept>, or <bpt id="p2">*</bpt>pessimistically<ept id="p2">*</ept>.</source>
        </trans-unit><trans-unit id="126" translate="yes" xml:space="preserve">
          <source>We'll explain these terms later in the module.</source>
        </trans-unit></group></body></file></xliff>