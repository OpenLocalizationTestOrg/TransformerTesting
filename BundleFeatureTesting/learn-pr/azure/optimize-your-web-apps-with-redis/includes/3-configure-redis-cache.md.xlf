<?xml version="1.0"?><xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd"><file datatype="xml" original="3-configure-redis-cache.md" source-language="en-US" target-language="en-US"><header><tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1931010" tool-company="Microsoft" /><xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3-configure-redis-cache.11843643a717dae805a409bb06f5b82bfe45b45e.skl</xliffext:skl_file_name><xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version><xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b0bf6a4b4badf663039812c999294c98f28a1cba</xliffext:ms.openlocfilehash><xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">05/13/2019</xliffext:ms.lasthandoff><xliffext:ms.openlocfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">learn-pr\azure\optimize-your-web-apps-with-redis\includes\3-configure-redis-cache.md</xliffext:ms.openlocfilepath></header><body><group id="content" extype="content"><trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Your sports statistics development team has decided that caching could dramatically improve performance for recently requested data.</source>
        </trans-unit><trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Your next step is to create and configure an Azure Cache for Redis instance.</source>
        </trans-unit><trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Create and configure the Azure Cache for Redis instance</source>
        </trans-unit><trans-unit id="104" translate="yes" xml:space="preserve">
          <source>You can create a Redis cache using the Azure portal, the Azure CLI, or Azure PowerShell.</source>
        </trans-unit><trans-unit id="105" translate="yes" xml:space="preserve">
          <source>There are several parameters you will need to decide in order to configure the cache properly for your purposes.</source>
        </trans-unit><trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit><trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The Redis cache will need a globally unique name.</source>
        </trans-unit><trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The name has to be unique within Azure because it is used to generate a public-facing URL to connect and communicate with the service.</source>
        </trans-unit><trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The name must be between 1 and 63 characters, composed of numbers, letters, and the '-' character.</source>
        </trans-unit><trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The cache name can't start or end with the '-' character, and consecutive '-' characters aren't valid.</source>
        </trans-unit><trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Resource Group</source>
        </trans-unit><trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The Azure Cache for Redis is a managed resource and needs a <bpt id="p1">_</bpt>resource group<ept id="p1">_</ept> owner.</source>
        </trans-unit><trans-unit id="113" translate="yes" xml:space="preserve">
          <source>You can either create a new resource group, or use an existing one in a subscription you are part of.</source>
        </trans-unit><trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Location</source>
        </trans-unit><trans-unit id="115" translate="yes" xml:space="preserve">
          <source>You will need to decide where the Redis cache will be physically located by selecting an Azure region.</source>
        </trans-unit><trans-unit id="116" translate="yes" xml:space="preserve">
          <source>You should always place your cache instance and your application in the same region.</source>
        </trans-unit><trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Connecting to a cache in a different region can significantly increase latency and reduce reliability.</source>
        </trans-unit><trans-unit id="118" translate="yes" xml:space="preserve">
          <source>If you are connecting to the cache outside of Azure, then select a location close to where the application consuming the data is running.</source>
        </trans-unit><trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Put the Redis cache as close to the data <bpt id="p1">_</bpt>consumer<ept id="p1">_</ept> as you can.</source>
        </trans-unit><trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Pricing tier</source>
        </trans-unit><trans-unit id="121" translate="yes" xml:space="preserve">
          <source>As mentioned in the last unit, there are three pricing tiers available for an Azure Cache for Redis.</source>
        </trans-unit><trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Basic<ept id="p1">**</ept>: Basic cache ideal for development/testing.</source>
        </trans-unit><trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Is limited to a single server, 53 GB of memory, and 20,000 connections.</source>
        </trans-unit><trans-unit id="124" translate="yes" xml:space="preserve">
          <source>There is no SLA for this service tier.</source>
        </trans-unit><trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Standard<ept id="p1">**</ept>: Production cache which supports replication and includes an 99.99% SLA.</source>
        </trans-unit><trans-unit id="126" translate="yes" xml:space="preserve">
          <source>It supports two servers (master/slave), and has the same memory/connection limits as the Basic tier.</source>
        </trans-unit><trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Premium<ept id="p1">**</ept>: Enterprise tier which builds on the Standard tier and includes persistence, clustering, and scale-out cache support.</source>
        </trans-unit><trans-unit id="128" translate="yes" xml:space="preserve">
          <source>This is the highest performing tier with up to 530 GB of memory and 40,000 simultaneous connections.</source>
        </trans-unit><trans-unit id="129" translate="yes" xml:space="preserve">
          <source>You can control the amount of cache memory available on each tier - this is selected by choosing a cache level from C0-C6 for Basic/Standard and P0-P4 for Premium.</source>
        </trans-unit><trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Check the <bpt id="p1">[</bpt>pricing page<ept id="p1">](https://azure.microsoft.com/pricing/details/cache/)</ept> for full details.</source>
        </trans-unit><trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Microsoft recommends you always use Standard or Premium Tier for production systems.</source>
        </trans-unit><trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The Basic Tier is a single node system with no data replication and no SLA.</source>
        </trans-unit><trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Also, use at least a C1 cache.</source>
        </trans-unit><trans-unit id="134" translate="yes" xml:space="preserve">
          <source>C0 caches are really meant for simple dev/test scenarios since they have a shared CPU core and very little memory.</source>
        </trans-unit><trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The Premium tier allows you to persist data in two ways to provide disaster recovery:</source>
        </trans-unit><trans-unit id="136" translate="yes" xml:space="preserve">
          <source>RDB persistence takes a periodic snapshot and can rebuild the cache using the snapshot in case of failure.</source>
        </trans-unit><trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Screenshot of the Azure portal showing the RDB persistence options on a new Redis cache instance.</source>
        </trans-unit><trans-unit id="138" translate="yes" xml:space="preserve">
          <source>AOF persistence saves every write operation to a log that is saved at least once per second.</source>
        </trans-unit><trans-unit id="139" translate="yes" xml:space="preserve">
          <source>This creates bigger files than RDB but has less data loss.</source>
        </trans-unit><trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Screenshot of the Azure portal showing the AOF persistence options on a new Redis cache instance.</source>
        </trans-unit><trans-unit id="141" translate="yes" xml:space="preserve">
          <source>There are several other settings which are only available to the <bpt id="p1">**</bpt>Premium<ept id="p1">**</ept> tier.</source>
        </trans-unit><trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Virtual Network support</source>
        </trans-unit><trans-unit id="143" translate="yes" xml:space="preserve">
          <source>If you create a premium tier Redis cache, you can deploy it to a virtual network in the cloud.</source>
        </trans-unit><trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Your cache will be available to only other virtual machines and applications in the same virtual network.</source>
        </trans-unit><trans-unit id="145" translate="yes" xml:space="preserve">
          <source>This provides a higher level of security when your service and cache are both hosted in Azure, or are connected through an Azure virtual network VPN.</source>
        </trans-unit><trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Clustering support</source>
        </trans-unit><trans-unit id="147" translate="yes" xml:space="preserve">
          <source>With a premium tier Redis cache, you can implement clustering to automatically split your dataset among multiple nodes.</source>
        </trans-unit><trans-unit id="148" translate="yes" xml:space="preserve">
          <source>To implement clustering, you specify the number of shards to a maximum of 10.</source>
        </trans-unit><trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The cost incurred is the cost of the original node, multiplied by the number of shards.</source>
        </trans-unit><trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Accessing the Redis instance</source>
        </trans-unit><trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Redis supports a set of <bpt id="p1">[</bpt>known commands<ept id="p1">](https://redis.io/commands)</ept>.</source>
        </trans-unit><trans-unit id="152" translate="yes" xml:space="preserve">
          <source>A command is typically issued as <ph id="ph1">`COMMAND parameter1 parameter2 parameter3`</ph>.</source>
        </trans-unit><trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Here are some common commands you can use:</source>
        </trans-unit><trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Command</source>
        </trans-unit><trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit><trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Ping the server.</source>
        </trans-unit><trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Returns "PONG".</source>
        </trans-unit><trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Sets a key/value in the cache.</source>
        </trans-unit><trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Returns "OK" on success.</source>
        </trans-unit><trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Gets a value from the cache.</source>
        </trans-unit><trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Returns '1' if the <bpt id="p1">**</bpt>key<ept id="p1">**</ept> exists in the cache, '0' if it doesn't.</source>
        </trans-unit><trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Returns the type associated to the value for the given <bpt id="p1">**</bpt>key<ept id="p1">**</ept>.</source>
        </trans-unit><trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Increment the given value associated with <bpt id="p1">**</bpt>key<ept id="p1">**</ept> by '1'.</source>
        </trans-unit><trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The value must be an integer or double value.</source>
        </trans-unit><trans-unit id="165" translate="yes" xml:space="preserve">
          <source>This returns the new value.</source>
        </trans-unit><trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Increment the given value associated with <bpt id="p1">**</bpt>key<ept id="p1">**</ept> by the specified amount.</source>
        </trans-unit><trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The value must be an integer or double value.</source>
        </trans-unit><trans-unit id="168" translate="yes" xml:space="preserve">
          <source>This returns the new value.</source>
        </trans-unit><trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Deletes the value associated with the <bpt id="p1">**</bpt>key<ept id="p1">**</ept>.</source>
        </trans-unit><trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Delete <bpt id="p1">_</bpt>all<ept id="p1">_</ept> keys and values in the database.</source>
        </trans-unit><trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Redis has a command-line tool (<bpt id="p1">**</bpt>redis-cli<ept id="p1">**</ept>) you can use to experiment directly with these commands.</source>
        </trans-unit><trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Here are some examples.</source>
        </trans-unit><trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Here's an example of working with the <ph id="ph1">`INCR`</ph> commands.</source>
        </trans-unit><trans-unit id="174" translate="yes" xml:space="preserve">
          <source>These are convenient because they provide atomic increments <bpt id="p1">_</bpt>across multiple applications<ept id="p1">_</ept> that are using the cache.</source>
        </trans-unit><trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Adding an expiration time to values</source>
        </trans-unit><trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Caching is important because it allows us to store commonly used values in memory.</source>
        </trans-unit><trans-unit id="177" translate="yes" xml:space="preserve">
          <source>However, we also need a way to expire values when they are stale.</source>
        </trans-unit><trans-unit id="178" translate="yes" xml:space="preserve">
          <source>In Redis this is done by applying a <bpt id="p1">_</bpt>time to live<ept id="p1">_</ept> (TTL) to a key.</source>
        </trans-unit><trans-unit id="179" translate="yes" xml:space="preserve">
          <source>When the TTL elapses, the key is automatically deleted, exactly as if the DEL command were issued.</source>
        </trans-unit><trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Here are some notes on TTL expirations.</source>
        </trans-unit><trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Expirations can be set using seconds or milliseconds precision.</source>
        </trans-unit><trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The expire time resolution is always 1 millisecond.</source>
        </trans-unit><trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Information about expires are replicated and persisted on disk, the time virtually passes when your Redis server remains stopped (this means that Redis saves the date at which a key will expire).</source>
        </trans-unit><trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Here is an example of an expiration:</source>
        </trans-unit><trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Accessing a Redis cache from a client</source>
        </trans-unit><trans-unit id="186" translate="yes" xml:space="preserve">
          <source>To connect to an Azure Cache for Redis instance, you'll need several pieces of information.</source>
        </trans-unit><trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Clients need the host name, port, and an access key for the cache.</source>
        </trans-unit><trans-unit id="188" translate="yes" xml:space="preserve">
          <source>You can retrieve this information in the Azure portal through the <bpt id="p1">**</bpt>Settings &gt; Access Keys<ept id="p1">**</ept> page.</source>
        </trans-unit><trans-unit id="189" translate="yes" xml:space="preserve">
          <source>The host name is the public Internet address of your cache, which was created using the name of the cache.</source>
        </trans-unit><trans-unit id="190" translate="yes" xml:space="preserve">
          <source>For example <ph id="ph1">`sportsresults.redis.cache.windows.net`</ph>.</source>
        </trans-unit><trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The access key acts as a password for your cache.</source>
        </trans-unit><trans-unit id="192" translate="yes" xml:space="preserve">
          <source>There are two keys created: primary and secondary.</source>
        </trans-unit><trans-unit id="193" translate="yes" xml:space="preserve">
          <source>You can use either key, two are provided in case you need to change the primary key.</source>
        </trans-unit><trans-unit id="194" translate="yes" xml:space="preserve">
          <source>You can switch all of your clients to the secondary key, and regenerate the primary key.</source>
        </trans-unit><trans-unit id="195" translate="yes" xml:space="preserve">
          <source>This would block any applications using the original primary key.</source>
        </trans-unit><trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Microsoft recommends periodically regenerating the keys - much like you would your personal passwords.</source>
        </trans-unit><trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Your access keys should be considered confidential information, treat them like you would a password.</source>
        </trans-unit><trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Anyone who has an access key can perform any operation on your cache!</source>
        </trans-unit></group></body></file></xliff>