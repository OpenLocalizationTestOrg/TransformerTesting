<?xml version="1.0"?><xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd"><file datatype="xml" original="5-execute-redis-commands.md" source-language="en-US" target-language="en-US"><header><tool tool-id="mdxliff" tool-name="mdxliff"  tool-company="Microsoft" /><xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5-execute-redis-commands.a4ea98.6bf6159037502659812730eb2045d7fdbd58e7bc.skl</xliffext:skl_file_name><xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version><xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6bf6159037502659812730eb2045d7fdbd58e7bc</xliffext:ms.openlocfilehash><xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ba7e452ac39d7f09a5646044b44de0e1cdc54982</xliffext:ms.sourcegitcommit><xliffext:ms.openlocfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">learn-pr\azure\optimize-your-web-apps-with-redis\includes\5-execute-redis-commands.md</xliffext:ms.openlocfilepath></header><body><group id="content" extype="content"><trans-unit id="101" translate="yes" xml:space="preserve">
          <source>As mentioned earlier, Redis is an in-memory NoSQL database which can be replicated across multiple servers.</source>
        </trans-unit><trans-unit id="102" translate="yes" xml:space="preserve">
          <source>It is often used as a cache, but can be used as a formal database or even message-broker.</source>
        </trans-unit><trans-unit id="103" translate="yes" xml:space="preserve">
          <source>It can store a variety of data types and structures and supports a variety of commands you can issue to retrieve cached data or query information about the cache itself.</source>
        </trans-unit><trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The data you work with is always stored as key/value pairs.</source>
        </trans-unit><trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Executing commands on the Redis cache</source>
        </trans-unit><trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Typically, a client application will use a <bpt id="p1">_</bpt>client library<ept id="p1">_</ept> to form requests and execute commands on a Redis cache.</source>
        </trans-unit><trans-unit id="107" translate="yes" xml:space="preserve">
          <source>You can get a list of client libraries directly from the <bpt id="p1">[</bpt>Redis clients page<ept id="p1">](https://redis.io/clients)</ept>.</source>
        </trans-unit><trans-unit id="108" translate="yes" xml:space="preserve">
          <source>A popular high-performance Redis client for the .NET language is <bpt id="p1">**</bpt>StackExchange.Redis<ept id="p1">**</ept>.</source>
        </trans-unit><trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The package is available through NuGet and can be added to your .NET code using the command line or IDE.</source>
        </trans-unit><trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Connecting to your Redis cache with StackExchange.Redis</source>
        </trans-unit><trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Recall that we use the host address, port number, and an access key to connect to a Redis server.</source>
        </trans-unit><trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Azure also offers a <bpt id="p1">_</bpt>connection string<ept id="p1">_</ept> for some Redis clients which bundles this data together into a single string.</source>
        </trans-unit><trans-unit id="113" translate="yes" xml:space="preserve">
          <source>What is a connection string?</source>
        </trans-unit><trans-unit id="114" translate="yes" xml:space="preserve">
          <source>A connection string is a single line of text that includes all the required pieces of information to connect and authenticate to a Redis cache in Azure.</source>
        </trans-unit><trans-unit id="115" translate="yes" xml:space="preserve">
          <source>It will look something like the following (with the <bpt id="p1">**</bpt>cache-name<ept id="p1">**</ept> and <bpt id="p2">**</bpt>password-here<ept id="p2">**</ept> fields filled in with real values):</source>
        </trans-unit><trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The connection string should be protected in your application.</source>
        </trans-unit><trans-unit id="117" translate="yes" xml:space="preserve">
          <source>If the application is hosted on Azure, consider using an Azure Key Vault to store the value.</source>
        </trans-unit><trans-unit id="118" translate="yes" xml:space="preserve">
          <source>You can pass this string to <bpt id="p1">**</bpt>StackExchange.Redis<ept id="p1">**</ept> to create a connection the server.</source>
        </trans-unit><trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Notice that there are two additional parameters at the end:</source>
        </trans-unit><trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ssl<ept id="p1">**</ept> - ensures that communication is encrypted.</source>
        </trans-unit><trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>abortConnection<ept id="p1">**</ept> - allows a connection to be created even if the server is unavailable at that moment.</source>
        </trans-unit><trans-unit id="122" translate="yes" xml:space="preserve">
          <source>There are several other <bpt id="p1">[</bpt>optional parameters<ept id="p1">](https://github.com/StackExchange/StackExchange.Redis/blob/master/docs/Configuration.md#configuration-options)</ept> you can append to the string to configure the client library.</source>
        </trans-unit><trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Creating a connection</source>
        </trans-unit><trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The main connection object in <bpt id="p1">**</bpt>StackExchange.Redis<ept id="p1">**</ept> is the <ph id="ph1">`StackExchange.Redis.ConnectionMultiplexer`</ph> class.</source>
        </trans-unit><trans-unit id="125" translate="yes" xml:space="preserve">
          <source>This object abstracts the process of connecting to a Redis server (or group of servers).</source>
        </trans-unit><trans-unit id="126" translate="yes" xml:space="preserve">
          <source>It's optimized to manage connections efficiently and intended to be kept around while you need access to the cache.</source>
        </trans-unit><trans-unit id="127" translate="yes" xml:space="preserve">
          <source>You create a <ph id="ph1">`ConnectionMultiplexer`</ph> instance using the static <ph id="ph2">`ConnectionMultiplexer.Connect`</ph> or <ph id="ph3">`ConnectionMultiplexer.ConnectAsync`</ph> method, passing in either a connection string or a <ph id="ph4">`ConfigurationOptions`</ph> object.</source>
        </trans-unit><trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Here's a simple example:</source>
        </trans-unit><trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Once you have a <ph id="ph1">`ConnectionMultiplexer`</ph>, there are 3 primary things you might want to do:</source>
        </trans-unit><trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Access a Redis Database.</source>
        </trans-unit><trans-unit id="131" translate="yes" xml:space="preserve">
          <source>This is what we will focus on here.</source>
        </trans-unit><trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Make use of the publisher/subscript features of Redis.</source>
        </trans-unit><trans-unit id="133" translate="yes" xml:space="preserve">
          <source>This is outside the scope of this module.</source>
        </trans-unit><trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Access an individual server for maintenance or monitoring purposes.</source>
        </trans-unit><trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Accessing a Redis database</source>
        </trans-unit><trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The Redis database is represented by the <ph id="ph1">`IDatabase`</ph> type.</source>
        </trans-unit><trans-unit id="137" translate="yes" xml:space="preserve">
          <source>You can retrieve one using the <ph id="ph1">`GetDatabase()`</ph> method:</source>
        </trans-unit><trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The object returned from <ph id="ph1">`GetDatabase`</ph> is a lightweight object, and does not need to be stored.</source>
        </trans-unit><trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Only the <ph id="ph1">`ConnectionMultiplexer`</ph> needs to be kept alive.</source>
        </trans-unit><trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Once you have a <ph id="ph1">`IDatabase`</ph> object, you can execute methods to interact with the cache.</source>
        </trans-unit><trans-unit id="141" translate="yes" xml:space="preserve">
          <source>All methods have synchronous and asynchronous versions which return <ph id="ph1">`Task`</ph> objects to make them compatible with the <ph id="ph2">`async`</ph> and <ph id="ph3">`await`</ph> keywords.</source>
        </trans-unit><trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Here is an example of storing a key/value in the cache:</source>
        </trans-unit><trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`StringSet`</ph> method returns a <ph id="ph2">`bool`</ph> indicating whether the value was set (<ph id="ph3">`true`</ph>) or not (<ph id="ph4">`false`</ph>).</source>
        </trans-unit><trans-unit id="144" translate="yes" xml:space="preserve">
          <source>We can then retrieve the value with the <ph id="ph1">`StringGet`</ph> method:</source>
        </trans-unit><trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Getting and Setting binary values</source>
        </trans-unit><trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Recall that Redis keys and values are <bpt id="p1">_</bpt>binary safe<ept id="p1">_</ept>.</source>
        </trans-unit><trans-unit id="147" translate="yes" xml:space="preserve">
          <source>These same methods can be used to store binary data.</source>
        </trans-unit><trans-unit id="148" translate="yes" xml:space="preserve">
          <source>There are implicit conversion operators to work with <ph id="ph1">`byte[]`</ph> types so you can work with the data naturally:</source>
        </trans-unit><trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>StackExchange.Redis<ept id="p1">**</ept> represents keys using the <ph id="ph1">`RedisKey`</ph> type.</source>
        </trans-unit><trans-unit id="150" translate="yes" xml:space="preserve">
          <source>This class has implicit conversions to and from both <ph id="ph1">`string`</ph> and <ph id="ph2">`byte[]`</ph>, allowing both text and binary keys to be used without any complication.</source>
        </trans-unit><trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Values are represented by the <ph id="ph1">`RedisValue`</ph> type.</source>
        </trans-unit><trans-unit id="152" translate="yes" xml:space="preserve">
          <source>As with <ph id="ph1">`RedisKey`</ph>, there are implicit conversions in place to allow you to pass <ph id="ph2">`string`</ph> or <ph id="ph3">`byte[]`</ph>.</source>
        </trans-unit><trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Other common operations</source>
        </trans-unit><trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`IDatabase`</ph> interface includes several other methods to work with the Redis cache.</source>
        </trans-unit><trans-unit id="155" translate="yes" xml:space="preserve">
          <source>There are methods to work with hashes, lists, sets, and ordered sets.</source>
        </trans-unit><trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Here are some of the more common ones that work with single keys, you can <bpt id="p1">[</bpt>read the source code<ept id="p1">](https://github.com/StackExchange/StackExchange.Redis/blob/master/src/StackExchange.Redis/Interfaces/IDatabase.cs)</ept> for the interface to see the full list.</source>
        </trans-unit><trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Method</source>
        </trans-unit><trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit><trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Creates a <bpt id="p1">_</bpt>group of operations<ept id="p1">_</ept> that will be sent to the server as a single unit, but not necessarily processed as a unit.</source>
        </trans-unit><trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Creates a group of operations that will be sent to the server as a single unit <bpt id="p1">_</bpt>and<ept id="p1">_</ept> processed on the server as a single unit.</source>
        </trans-unit><trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Delete the key/value.</source>
        </trans-unit><trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Returns whether the given key exists in cache.</source>
        </trans-unit><trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Sets a time-to-live (TTL) expiration on a key.</source>
        </trans-unit><trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Renames a key.</source>
        </trans-unit><trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Returns the TTL for a key.</source>
        </trans-unit><trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Returns the string representation of the type of the value stored at key.</source>
        </trans-unit><trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The different types that can be returned are: string, list, set, zset and hash.</source>
        </trans-unit><trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Executing other commands</source>
        </trans-unit><trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`IDatabase`</ph> object has an <ph id="ph2">`Execute`</ph> and <ph id="ph3">`ExecuteAsync`</ph> method which can be used to pass textual commands to the Redis server.</source>
        </trans-unit><trans-unit id="170" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit><trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Execute`</ph> and <ph id="ph2">`ExecuteAsync`</ph> methods return a <ph id="ph3">`RedisResult`</ph> object which is a data holder that includes two properties:</source>
        </trans-unit><trans-unit id="172" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`Type`</ph> which returns a <ph id="ph2">`string`</ph> indicating the type of the result - "STRING", "INTEGER", etc.</source>
        </trans-unit><trans-unit id="173" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`IsNull`</ph> a true/false value to detect when the result is <ph id="ph2">`null`</ph>.</source>
        </trans-unit><trans-unit id="174" translate="yes" xml:space="preserve">
          <source>You can then use <ph id="ph1">`ToString()`</ph> on the <ph id="ph2">`RedisResult`</ph> to get the actual return value.</source>
        </trans-unit><trans-unit id="175" translate="yes" xml:space="preserve">
          <source>You can use <ph id="ph1">`Execute`</ph> to perform any supported commands - for example, we can get all the clients connected to the cache ("CLIENT LIST"):</source>
        </trans-unit><trans-unit id="176" translate="yes" xml:space="preserve">
          <source>This would output all the connected clients:</source>
        </trans-unit><trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Storing more complex values</source>
        </trans-unit><trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Redis is oriented around binary safe strings, but you can cache off object graphs by serializing them to a textual format - typically XML or JSON.</source>
        </trans-unit><trans-unit id="179" translate="yes" xml:space="preserve">
          <source>For example, perhaps for our statistics, we have a <ph id="ph1">`GameStats`</ph> object which looks like:</source>
        </trans-unit><trans-unit id="180" translate="yes" xml:space="preserve">
          <source>We could use the <bpt id="p1">**</bpt>Newtonsoft.Json<ept id="p1">**</ept> library to turn an instance of this object into a string:</source>
        </trans-unit><trans-unit id="181" translate="yes" xml:space="preserve">
          <source>We could retrieve it and turn it back into an object using the reverse process:</source>
        </trans-unit><trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Cleaning up the connection</source>
        </trans-unit><trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Once you are done with the Redis connection, you can <bpt id="p1">**</bpt>Dispose<ept id="p1">**</ept> the <ph id="ph1">`ConnectionMultiplexer`</ph>.</source>
        </trans-unit><trans-unit id="184" translate="yes" xml:space="preserve">
          <source>This will close all connections and shutdown the communication to the server.</source>
        </trans-unit><trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Let's create an application and do some simple work with our Redis cache.</source>
        </trans-unit></group></body></file></xliff>