<?xml version="1.0"?><xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd"><file datatype="xml" original="2-transactions-in-redis.md" source-language="en-US" target-language="en-US"><header><tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1931010" tool-company="Microsoft" /><xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2-transactions-in-redis.e2f95e8c72d93fdac65366b561a1b75771c48a8a.skl</xliffext:skl_file_name><xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version><xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0d46d9fafa64c7d2ef3de52746d8569d9d9be335</xliffext:ms.openlocfilehash><xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/24/2019</xliffext:ms.lasthandoff><xliffext:ms.openlocfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">learn-pr\azure\work-with-mutable-and-partial-data-in-a-redis-cache\includes\2-transactions-in-redis.md</xliffext:ms.openlocfilepath></header><body><group id="content" extype="content"><trans-unit id="101" translate="yes" xml:space="preserve">
          <source>There are times when you must guarantee that multiple operations execute together.</source>
        </trans-unit><trans-unit id="102" translate="yes" xml:space="preserve">
          <source>For example, in your instant messaging application, users can send an individual picture, an individual text message, or a picture and text message together.</source>
        </trans-unit><trans-unit id="103" translate="yes" xml:space="preserve">
          <source>When the user chooses to send a picture and text message together, you must ensure that other members of the group receive them at the same time.</source>
        </trans-unit><trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This is important because if a picture and text message are not received together, itâ€™s possible that a separate message could be sent in between the picture and text message.</source>
        </trans-unit><trans-unit id="105" translate="yes" xml:space="preserve">
          <source>That could make the overall conversation confusing.</source>
        </trans-unit><trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Here, we'll look at how to create a transaction in Azure Cache for Redis to guarantee that multiple operations are executed together.</source>
        </trans-unit><trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Creating and running transactions</source>
        </trans-unit><trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Transactions in Redis work by queueing multiple commands to be executed as a group.</source>
        </trans-unit><trans-unit id="109" translate="yes" xml:space="preserve">
          <source>When a transaction is executed, the commands queued inside of it are guaranteed to execute without any other commands from other clients interleaved between them.</source>
        </trans-unit><trans-unit id="110" translate="yes" xml:space="preserve">
          <source>To begin a transaction block, enter the <ph id="ph1">`MULTI`</ph> command.</source>
        </trans-unit><trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Further commands will be queued and not executed immediately.</source>
        </trans-unit><trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Running the <ph id="ph1">`EXEC`</ph> command will execute all of the queued commands as a transactional unit.</source>
        </trans-unit><trans-unit id="113" translate="yes" xml:space="preserve">
          <source>If you decide you want to abort an open transaction while queuing commands, running the <ph id="ph1">`DISCARD`</ph> command will close the transaction block without running <bpt id="p1">_</bpt>any<ept id="p1">_</ept> of the queued commands.</source>
        </trans-unit><trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Redis transactions do not support the concept of rollback.</source>
        </trans-unit><trans-unit id="115" translate="yes" xml:space="preserve">
          <source>If you queue a command with incorrect syntax into a transaction block, the block will remain open, but will automatically be discarded if you attempt to execute it with <ph id="ph1">`EXEC`</ph>.</source>
        </trans-unit><trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Commands in a transaction that fail <bpt id="p1">_</bpt>during<ept id="p1">_</ept> execution (after <ph id="ph1">`EXEC`</ph> is called) do not cause a transaction to be aborted or rolled back <ph id="ph2">&amp;mdash;</ph> Redis will still run all of the commands and consider the transaction to have completed successfully.</source>
        </trans-unit><trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Redis transactions with ServiceStack.Redis</source>
        </trans-unit><trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ServiceStack.Redis<ept id="p1">**</ept> is a C# client library for interacting with Azure Cache for Redis.</source>
        </trans-unit><trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Transactions in ServiceStack.Redis are created by calling <ph id="ph1">`IRedisClient.CreateTransaction()`</ph>.</source>
        </trans-unit><trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`IRedisTransaction`</ph> object that is returned can have multiple commands queued into it with <ph id="ph2">`QueueCommand()`</ph>.</source>
        </trans-unit><trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Calling <ph id="ph1">`Commit()`</ph> on the transaction object will execute it.</source>
        </trans-unit><trans-unit id="122" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`IRedisTransaction`</ph> objects are disposable, and will automatically issue a <ph id="ph2">`DISCARD`</ph> command if disposed before calling <ph id="ph3">`Commit()`</ph>.</source>
        </trans-unit><trans-unit id="123" translate="yes" xml:space="preserve">
          <source>This feature works well with C#'s <ph id="ph1">`using`</ph> blocks: if you don't commit a transaction for any reason, you can trust that the transaction will automatically be discarded so that the Redis connection can continue to be used.</source>
        </trans-unit><trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Create a transaction using C# and the ServiceStack.Redis client</source>
        </trans-unit><trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Here's an example of using ServiceStack.Redis to create a transaction that can send a message that includes a picture URL and the contents of a text message.</source>
        </trans-unit><trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Transactions ensure that multiple operations are executed together without operations from other clients in between them.</source>
        </trans-unit><trans-unit id="127" translate="yes" xml:space="preserve">
          <source>You create a transaction using the <ph id="ph1">`MULTI`</ph> command.</source>
        </trans-unit><trans-unit id="128" translate="yes" xml:space="preserve">
          <source>With ServiceStack.Redis, you use the <ph id="ph1">`CreateTransaction()`</ph> method.</source>
        </trans-unit></group></body></file></xliff>