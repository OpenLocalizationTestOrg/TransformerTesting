<?xml version="1.0"?><xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd"><file datatype="xml" original="6-eviction-policies.md" source-language="en-US" target-language="en-US"><header><tool tool-id="mdxliff" tool-name="mdxliff"  tool-company="Microsoft" /><xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6-eviction-policies.0c948e.7f0709cfd2a07a2046bb2e0e7344739c26490448.skl</xliffext:skl_file_name><xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version><xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7f0709cfd2a07a2046bb2e0e7344739c26490448</xliffext:ms.openlocfilehash><xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ba7e452ac39d7f09a5646044b44de0e1cdc54982</xliffext:ms.sourcegitcommit><xliffext:ms.openlocfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">learn-pr\azure\work-with-mutable-and-partial-data-in-a-redis-cache\includes\6-eviction-policies.md</xliffext:ms.openlocfilepath></header><body><group id="content" extype="content"><trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Memory is the most critical resource for Azure Cache for Redis, because it's an in-memory database.</source>
        </trans-unit><trans-unit id="102" translate="yes" xml:space="preserve">
          <source>You can run into problems when you begin adding data that exceeds the amount of memory available.</source>
        </trans-unit><trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Azure Cache for Redis supports eviction policies, which indicate how data should be handled when you run out of memory.</source>
        </trans-unit><trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Here, you'll set an eviction policy to determine what your data should do when you exceed the maximum amount of memory.</source>
        </trans-unit><trans-unit id="105" translate="yes" xml:space="preserve">
          <source>What is an eviction policy?</source>
        </trans-unit><trans-unit id="106" translate="yes" xml:space="preserve">
          <source>An eviction policy is a plan that determines how your data should be managed when you exceed the maximum amount of memory available.</source>
        </trans-unit><trans-unit id="107" translate="yes" xml:space="preserve">
          <source>For example, using an eviction policy, you could tell Azure Cache for Redis to delete a random key to make room for the new data being inserted.</source>
        </trans-unit><trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Types of eviction policies</source>
        </trans-unit><trans-unit id="109" translate="yes" xml:space="preserve">
          <source>There are six different eviction policies provided by Azure Cache for Redis.</source>
        </trans-unit><trans-unit id="110" translate="yes" xml:space="preserve">
          <source>All of these values perform an action when you attempt to insert data when you're out of memory.</source>
        </trans-unit><trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>noeviction:<ept id="p1">**</ept> No eviction policy.</source>
        </trans-unit><trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Returns an error message if you attempt to insert data.</source>
        </trans-unit><trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>allkeys-lru:<ept id="p1">**</ept> Removes the least recently used key.</source>
        </trans-unit><trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>allkeys-random:<ept id="p1">**</ept> Removes a random key.</source>
        </trans-unit><trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>volatile-lru:<ept id="p1">**</ept> Removes the least recently used key out of all the keys with an expiration set.</source>
        </trans-unit><trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>volatile-ttl:<ept id="p1">**</ept> Removes the key with the shortest time to live based on the expiration set for it.</source>
        </trans-unit><trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>volatile-random:<ept id="p1">**</ept> Removes a random key that has an expiration set.</source>
        </trans-unit><trans-unit id="118" translate="yes" xml:space="preserve">
          <source>How to set an eviction policy</source>
        </trans-unit><trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Azure provides a simple drop-down menu to set the eviction policy for Azure Cache for Redis.</source>
        </trans-unit><trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Select <bpt id="p1">**</bpt>Advanced Settings<ept id="p1">**</ept>, and use the <bpt id="p2">**</bpt>maxmemory-policy<ept id="p2">**</ept> drop-down menu.</source>
        </trans-unit><trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Since memory is critical to Azure Cache for Redis, there is support for eviction policies.</source>
        </trans-unit><trans-unit id="122" translate="yes" xml:space="preserve">
          <source>An eviction policy determines what should be done with existing data when you're out of memory and attempt to insert new data.</source>
        </trans-unit></group></body></file></xliff>