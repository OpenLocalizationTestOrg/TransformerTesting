<?xml version="1.0"?><xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd"><file datatype="xml" original="4-data-expiration.md" source-language="en-US" target-language="en-US"><header><tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1931010" tool-company="Microsoft" /><xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4-data-expiration.8ef12d5dc14d0298afef95ca1ab9130696162d0c.skl</xliffext:skl_file_name><xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version><xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3fec08802e8597f614962e7c0e62975a4faf7e78</xliffext:ms.openlocfilehash><xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/24/2019</xliffext:ms.lasthandoff><xliffext:ms.openlocfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">learn-pr\azure\work-with-mutable-and-partial-data-in-a-redis-cache\includes\4-data-expiration.md</xliffext:ms.openlocfilepath></header><body><group id="content" extype="content"><trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Data is not always permanent, and there are times you would like to delete it at a specific time.</source>
        </trans-unit><trans-unit id="102" translate="yes" xml:space="preserve">
          <source>For example, in your instant messaging application, users can set the display name of the group chat.</source>
        </trans-unit><trans-unit id="103" translate="yes" xml:space="preserve">
          <source>However, you want the name to reset after one hour.</source>
        </trans-unit><trans-unit id="104" translate="yes" xml:space="preserve">
          <source>You could accomplish this by writing your own server-side logic that set an hour timer and deleted the name.</source>
        </trans-unit><trans-unit id="105" translate="yes" xml:space="preserve">
          <source>However, Azure Cache for Redis supports data expiration, which is a feature that does this automatically without writing additional logic.</source>
        </trans-unit><trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Here, you'll learn about the common Redis commands to implement data expiration.</source>
        </trans-unit><trans-unit id="107" translate="yes" xml:space="preserve">
          <source>What is data expiration?</source>
        </trans-unit><trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Data expiration is a feature that can automatically delete a key and value in the cache after a set amount of time.</source>
        </trans-unit><trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Why use data expiration?</source>
        </trans-unit><trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Data expiration is commonly used in situations where the data you're storing is short-lived.</source>
        </trans-unit><trans-unit id="111" translate="yes" xml:space="preserve">
          <source>This is important because Azure Cache for Redis is an in-memory database and you don't have as much memory available to use as you would if you were storing on disk.</source>
        </trans-unit><trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Since you have limited storage with Azure Cache for Redis, you want to make sure you're only storing data that is important.</source>
        </trans-unit><trans-unit id="113" translate="yes" xml:space="preserve">
          <source>If the data doesn't need to be around for a long time, make sure you set an expiration.</source>
        </trans-unit><trans-unit id="114" translate="yes" xml:space="preserve">
          <source>How to use data expiration in Azure Cache for Redis</source>
        </trans-unit><trans-unit id="115" translate="yes" xml:space="preserve">
          <source>There are different commands to implement and manage data expiration in Azure Cache for Redis:</source>
        </trans-unit><trans-unit id="116" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`EXPIRE`</ph>: Sets the timeout of a key in seconds</source>
        </trans-unit><trans-unit id="117" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`PEXPIRE`</ph>: Sets the timeout of a key in milliseconds</source>
        </trans-unit><trans-unit id="118" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`EXPIREAT`</ph>: Sets the timeout of a key using an absolute Unix timestamp in seconds</source>
        </trans-unit><trans-unit id="119" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`PEXPIREAT`</ph>: Sets the timeout of a key using an absolute Unix timestamp in milliseconds</source>
        </trans-unit><trans-unit id="120" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`TTL`</ph>: Returns the remaining time a key has to live in seconds</source>
        </trans-unit><trans-unit id="121" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`PTTL`</ph>: Returns the remaining time a key has to live in milliseconds</source>
        </trans-unit><trans-unit id="122" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`PERSIST`</ph>: Makes a key never expire</source>
        </trans-unit><trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The most common command is <ph id="ph1">`EXPIRE`</ph>, and we'll use it throughout this module.</source>
        </trans-unit><trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Example of data expiration using C# and ServiceStack.Redis</source>
        </trans-unit><trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Remember, when using a client library like <bpt id="p1">**</bpt>ServiceStack.Redis<ept id="p1">**</ept>, we don't have to worry about remembering the low-level Azure Cache for Redis commands.</source>
        </trans-unit><trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Instead, we can use simple C# methods.</source>
        </trans-unit><trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Azure Cache for Redis allows you to delete data automatically after a set amount of time using data expiration.</source>
        </trans-unit><trans-unit id="128" translate="yes" xml:space="preserve">
          <source>This is important because Azure Cache for Redis is an in-memory database, and you don't have as much memory available as you would with storing data on disk.</source>
        </trans-unit><trans-unit id="129" translate="yes" xml:space="preserve">
          <source>If the data you're storing doesn't need to be around for a long time, make sure you set an expiration.</source>
        </trans-unit></group></body></file></xliff>