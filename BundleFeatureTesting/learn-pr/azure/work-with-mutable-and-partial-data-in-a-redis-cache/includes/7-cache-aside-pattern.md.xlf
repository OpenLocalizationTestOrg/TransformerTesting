<?xml version="1.0"?><xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd"><file datatype="xml" original="7-cache-aside-pattern.md" source-language="en-US" target-language="en-US"><header><tool tool-id="mdxliff" tool-name="mdxliff"  tool-company="Microsoft" /><xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7-cache-aside-pattern.563182.9066274ce249ab0e969756d889a6468c8f79de59.skl</xliffext:skl_file_name><xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version><xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9066274ce249ab0e969756d889a6468c8f79de59</xliffext:ms.openlocfilehash><xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ba7e452ac39d7f09a5646044b44de0e1cdc54982</xliffext:ms.sourcegitcommit><xliffext:ms.openlocfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">learn-pr\azure\work-with-mutable-and-partial-data-in-a-redis-cache\includes\7-cache-aside-pattern.md</xliffext:ms.openlocfilepath></header><body><group id="content" extype="content"><trans-unit id="101" translate="yes" xml:space="preserve">
          <source>When building an application, you want to provide a great user experience, and a part of that is quick data retrieval.</source>
        </trans-unit><trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Retrieving data from a database is typically a slow process, and if this data is read often, this could provide a poor user experience.</source>
        </trans-unit><trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The cache-aside pattern describes how you can implement a cache in conjunction with a database, to return the most commonly accessed data as quickly as possible.</source>
        </trans-unit><trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Here, you'll learn how the cache-aside pattern can be used to ensure your important data is quickly accessible.</source>
        </trans-unit><trans-unit id="105" translate="yes" xml:space="preserve">
          <source>What is the cache-aside pattern?</source>
        </trans-unit><trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The cache-aside pattern dictates that when you need to retrieve data from a data source, like a relational database, you should first check for the data in your cache.</source>
        </trans-unit><trans-unit id="107" translate="yes" xml:space="preserve">
          <source>If the data is in your cache, use it.</source>
        </trans-unit><trans-unit id="108" translate="yes" xml:space="preserve">
          <source>If the data is not in your cache, then query the database, and when you're returning the data back to the user, add it to your cache.</source>
        </trans-unit><trans-unit id="109" translate="yes" xml:space="preserve">
          <source>This will then allow you to access the data from your cache the next time it's needed.</source>
        </trans-unit><trans-unit id="110" translate="yes" xml:space="preserve">
          <source>When to implement the cache-aside pattern?</source>
        </trans-unit><trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Reading data from a database is usually a slow process.</source>
        </trans-unit><trans-unit id="112" translate="yes" xml:space="preserve">
          <source>It involves compilation of a complex query, preparation of a query execution plan, execution of the query, and then preparation of the result.</source>
        </trans-unit><trans-unit id="113" translate="yes" xml:space="preserve">
          <source>In some cases, this process may read data from the disk as well.</source>
        </trans-unit><trans-unit id="114" translate="yes" xml:space="preserve">
          <source>There are optimizations that can be done on the database level, like pre-compiling the queries, and loading some of the data in memory.</source>
        </trans-unit><trans-unit id="115" translate="yes" xml:space="preserve">
          <source>However, execution of the query and preparation of the result will always happen when retrieving data from a database.</source>
        </trans-unit><trans-unit id="116" translate="yes" xml:space="preserve">
          <source>We can solve this problem by using the cache-aside pattern.</source>
        </trans-unit><trans-unit id="117" translate="yes" xml:space="preserve">
          <source>In the cache-aside pattern, we still have the application and the database, but now we also have a cache.</source>
        </trans-unit><trans-unit id="118" translate="yes" xml:space="preserve">
          <source>A cache stores its data in memory, so it doesn't have to interact with the file system.</source>
        </trans-unit><trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Caches also store data in very simple data structures, like key value pairs, so they don't have to execute complex queries to gather data or maintain indexes when writing data.</source>
        </trans-unit><trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Because of this, a cache is typically more performant than a database.</source>
        </trans-unit><trans-unit id="121" translate="yes" xml:space="preserve">
          <source>When you use an application, it will try to read data from the cache first.</source>
        </trans-unit><trans-unit id="122" translate="yes" xml:space="preserve">
          <source>If the requested data is not in the cache, the application will retrieve it from the database, like it always has done.</source>
        </trans-unit><trans-unit id="123" translate="yes" xml:space="preserve">
          <source>However, then it stores the data in the cache for subsequent requests.</source>
        </trans-unit><trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Next time when any user requests the data, it will return it from the cache directly.</source>
        </trans-unit><trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Diagram of loading data to cache</source>
        </trans-unit><trans-unit id="126" translate="yes" xml:space="preserve">
          <source>How to manage updating data</source>
        </trans-unit><trans-unit id="127" translate="yes" xml:space="preserve">
          <source>When you implement the cache-aside pattern, you introduce a small problem.</source>
        </trans-unit><trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Since your data is now stored in a cache and a data store, you can run into problems when you try to make an update.</source>
        </trans-unit><trans-unit id="129" translate="yes" xml:space="preserve">
          <source>For example, to update your data, you would need to update both the cache and the data store.</source>
        </trans-unit><trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The solution to this problem in the cache-aside pattern is to invalidate the data in the cache.</source>
        </trans-unit><trans-unit id="131" translate="yes" xml:space="preserve">
          <source>When you update data in your application, you should first delete the data in the cache and then make the changes to the data source directly.</source>
        </trans-unit><trans-unit id="132" translate="yes" xml:space="preserve">
          <source>By doing this, next time the data is requested, it won't be present in the cache, and the process will repeat.</source>
        </trans-unit><trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Diagram of invalidating cached data</source>
        </trans-unit><trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Considerations for using the cache-aside pattern</source>
        </trans-unit><trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Carefully consider which data to put in the cache.</source>
        </trans-unit><trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Not all data is suitable to be cached.</source>
        </trans-unit><trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Lifetime<ept id="p1">**</ept>: For cache-aside to be effective, make sure that the expiration policy matches the access frequency of the data.</source>
        </trans-unit><trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Making the expiration period too short can cause applications to continually retrieve data from the data store and add it to the cache.</source>
        </trans-unit><trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Evicting<ept id="p1">**</ept>: Caches have a limited size compared to typical data stores, and they'll evict data if necessary.</source>
        </trans-unit><trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Make sure you choose an appropriate eviction policy for your data.</source>
        </trans-unit><trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Priming<ept id="p1">**</ept>: To make the cache-aside pattern effective, many solutions will prepopulate the cache with data that they think will be accessed often.</source>
        </trans-unit><trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Consistency<ept id="p1">**</ept>: Implementing the cache-aside pattern doesn't guarantee consistency between the data store and the cache.</source>
        </trans-unit><trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Data in a data store can be changed without notifying the cache.</source>
        </trans-unit><trans-unit id="144" translate="yes" xml:space="preserve">
          <source>This can lead to serious synchronization issues.</source>
        </trans-unit><trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The cache-aside pattern is useful when you're required to access data frequently from a data source that uses a disk.</source>
        </trans-unit><trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Using the cache-aside pattern, you'll store important data in a cache to help increase the speed of retrieving it.</source>
        </trans-unit></group></body></file></xliff>