<?xml version="1.0"?><xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd"><file datatype="xml" original="2-high-availability.md" source-language="en-US" target-language="en-US"><header><tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1931010" tool-company="Microsoft" /><xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2-high-availability.c28b48201d445fa73f554e92ea99839b0515ab79.skl</xliffext:skl_file_name><xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version><xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fd4d3971c83a5080871395b2f04274a8ac326614</xliffext:ms.openlocfilehash><xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">05/13/2019</xliffext:ms.lasthandoff><xliffext:ms.openlocfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">learn-pr\azure\design-for-availability-and-recoverability-in-azure\includes\2-high-availability.md</xliffext:ms.openlocfilepath></header><body><group id="content" extype="content"><trans-unit id="101" translate="yes" xml:space="preserve">
          <source>High availability (HA) ensures your architecture can handle failures.</source>
        </trans-unit><trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Imagine you're responsible for a system that must be always fully operational.</source>
        </trans-unit><trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Failures can and will happen, so how do you ensure that your system can remain online when something goes wrong?</source>
        </trans-unit><trans-unit id="104" translate="yes" xml:space="preserve">
          <source>How do you perform maintenance without service interruption?</source>
        </trans-unit><trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Here, you'll learn the need for high availability, evaluate application high-availability requirements, and see how the Azure platform helps you meet your availability goals.</source>
        </trans-unit><trans-unit id="106" translate="yes" xml:space="preserve">
          <source>What is high availability?</source>
        </trans-unit><trans-unit id="107" translate="yes" xml:space="preserve">
          <source>A highly-available service is a service that absorbs fluctuations in availability, load, and temporary failures in dependent services and hardware.</source>
        </trans-unit><trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The application remains online and available (or maintains the appearance of it) while performing acceptably.</source>
        </trans-unit><trans-unit id="109" translate="yes" xml:space="preserve">
          <source>This availability is often defined by business requirements, service-level objectives, or service-level agreements.</source>
        </trans-unit><trans-unit id="110" translate="yes" xml:space="preserve">
          <source>High availability is ultimately about the ability to handle the loss or severe degradation of a component of a system.</source>
        </trans-unit><trans-unit id="111" translate="yes" xml:space="preserve">
          <source>This might be due to a virtual machine that's hosting an application going offline because the host failed.</source>
        </trans-unit><trans-unit id="112" translate="yes" xml:space="preserve">
          <source>It could be due to planned maintenance for a system upgrade.</source>
        </trans-unit><trans-unit id="113" translate="yes" xml:space="preserve">
          <source>It could even be caused by the failure of a service in the cloud.</source>
        </trans-unit><trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Identifying the places where your system can fail, and building in the capabilities to handle those failures, will ensure that the services you offer to your customers can stay online.</source>
        </trans-unit><trans-unit id="115" translate="yes" xml:space="preserve">
          <source>High availability of a service typically requires high availability of the components that make up the service.</source>
        </trans-unit><trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Think of a website that offers an online marketplace to purchase items.</source>
        </trans-unit><trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The service that's offered to your customers is the ability to list, buy, and sell items online.</source>
        </trans-unit><trans-unit id="118" translate="yes" xml:space="preserve">
          <source>To provide this service, you'll have multiple components: a database, web servers, application servers, and so on.</source>
        </trans-unit><trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Each of these components could fail, so you have to identify how and where  your failure points are, and determine how to address these failure points in your architecture.</source>
        </trans-unit><trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Evaluate high availability for your architecture</source>
        </trans-unit><trans-unit id="121" translate="yes" xml:space="preserve">
          <source>There are three steps to evaluate an application for high availability:</source>
        </trans-unit><trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Determine the service-level agreement of your application</source>
        </trans-unit><trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Evaluate the HA capabilities of the application</source>
        </trans-unit><trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Evaluate the HA capabilities of dependent applications</source>
        </trans-unit><trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Let's explore these steps in detail.</source>
        </trans-unit><trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Determine the service-level agreement of your application</source>
        </trans-unit><trans-unit id="127" translate="yes" xml:space="preserve">
          <source>A service-level agreement (SLA) is an agreement between a service provider and a service consumer in which the service provider commits to a standard of service based on measurable metrics and defined responsibilities.</source>
        </trans-unit><trans-unit id="128" translate="yes" xml:space="preserve">
          <source>SLAs can be strict, legally bound, contractual agreements, or assumed expectations of availability by customers.</source>
        </trans-unit><trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Service metrics typically focus on service throughput, capacity, and availability, all of which can be measured in various ways.</source>
        </trans-unit><trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Regardless of the specific metrics that make up the SLA, failure to meet the SLA can have serious financial ramifications for the service provider.</source>
        </trans-unit><trans-unit id="131" translate="yes" xml:space="preserve">
          <source>A common component of service agreements is guaranteed financial reimbursement for missed SLAs.</source>
        </trans-unit><trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Service-level objectives (SLO) are the values of target metrics that are used to measure performance, reliability, or availability.</source>
        </trans-unit><trans-unit id="133" translate="yes" xml:space="preserve">
          <source>These could be metrics defining the performance of request processing in milliseconds, the availability of services in minutes per month, or the number of requests processed per hour.</source>
        </trans-unit><trans-unit id="134" translate="yes" xml:space="preserve">
          <source>By evaluating the metrics exposed by your application and understanding what customers use as a measure of quality, you can define the acceptable and unacceptable ranges for these SLOs.</source>
        </trans-unit><trans-unit id="135" translate="yes" xml:space="preserve">
          <source>By defining these objectives, you clearly set goals and expectations with both the teams supporting the services and customers who are consuming these services.</source>
        </trans-unit><trans-unit id="136" translate="yes" xml:space="preserve">
          <source>These SLOs will be used to determine if your overall SLA is being met.</source>
        </trans-unit><trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The following table shows the potential cumulative downtime for various SLA levels.</source>
        </trans-unit><trans-unit id="138" translate="yes" xml:space="preserve">
          <source>SLA</source>
        </trans-unit><trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Downtime per week</source>
        </trans-unit><trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Downtime per month</source>
        </trans-unit><trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Downtime per year</source>
        </trans-unit><trans-unit id="142" translate="yes" xml:space="preserve">
          <source>99%</source>
        </trans-unit><trans-unit id="143" translate="yes" xml:space="preserve">
          <source>1.68 hours</source>
        </trans-unit><trans-unit id="144" translate="yes" xml:space="preserve">
          <source>7.2 hours</source>
        </trans-unit><trans-unit id="145" translate="yes" xml:space="preserve">
          <source>3.65 days</source>
        </trans-unit><trans-unit id="146" translate="yes" xml:space="preserve">
          <source>99.9%</source>
        </trans-unit><trans-unit id="147" translate="yes" xml:space="preserve">
          <source>10.1 minutes</source>
        </trans-unit><trans-unit id="148" translate="yes" xml:space="preserve">
          <source>43.2 minutes</source>
        </trans-unit><trans-unit id="149" translate="yes" xml:space="preserve">
          <source>8.76 hours</source>
        </trans-unit><trans-unit id="150" translate="yes" xml:space="preserve">
          <source>99.95%</source>
        </trans-unit><trans-unit id="151" translate="yes" xml:space="preserve">
          <source>5 minutes</source>
        </trans-unit><trans-unit id="152" translate="yes" xml:space="preserve">
          <source>21.6 minutes</source>
        </trans-unit><trans-unit id="153" translate="yes" xml:space="preserve">
          <source>4.38 hours</source>
        </trans-unit><trans-unit id="154" translate="yes" xml:space="preserve">
          <source>99.99%</source>
        </trans-unit><trans-unit id="155" translate="yes" xml:space="preserve">
          <source>1.01 minutes</source>
        </trans-unit><trans-unit id="156" translate="yes" xml:space="preserve">
          <source>4.32 minutes</source>
        </trans-unit><trans-unit id="157" translate="yes" xml:space="preserve">
          <source>52.56 minutes</source>
        </trans-unit><trans-unit id="158" translate="yes" xml:space="preserve">
          <source>99.999%</source>
        </trans-unit><trans-unit id="159" translate="yes" xml:space="preserve">
          <source>6 seconds</source>
        </trans-unit><trans-unit id="160" translate="yes" xml:space="preserve">
          <source>25.9 seconds</source>
        </trans-unit><trans-unit id="161" translate="yes" xml:space="preserve">
          <source>5.26 minutes</source>
        </trans-unit><trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Of course, higher availability is better, everything else being equal.</source>
        </trans-unit><trans-unit id="163" translate="yes" xml:space="preserve">
          <source>But as you strive for more 9s, the cost and complexity to achieve that level of availability grows.</source>
        </trans-unit><trans-unit id="164" translate="yes" xml:space="preserve">
          <source>An uptime of 99.99% translates to about 5 minutes of total downtime per month.</source>
        </trans-unit><trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Is it worth the additional complexity and cost to reach five 9s?</source>
        </trans-unit><trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The answer depends on the business requirements.</source>
        </trans-unit><trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Here are some other considerations when defining an SLA:</source>
        </trans-unit><trans-unit id="168" translate="yes" xml:space="preserve">
          <source>To achieve four 9's (99.99%), you probably can't rely on manual intervention to recover from failures.</source>
        </trans-unit><trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The application must be self-diagnosing and self-healing.</source>
        </trans-unit><trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Beyond four 9's, it is challenging to detect outages quickly enough to meet the SLA.</source>
        </trans-unit><trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Think about the time window that your SLA is measured against.</source>
        </trans-unit><trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The smaller the window, the tighter the tolerances.</source>
        </trans-unit><trans-unit id="173" translate="yes" xml:space="preserve">
          <source>It probably doesn't make sense to define your SLA in terms of hourly or daily uptime.</source>
        </trans-unit><trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Identifying SLAs is an important first step when determining the high availability capabilities that your architecture will require.</source>
        </trans-unit><trans-unit id="175" translate="yes" xml:space="preserve">
          <source>These will help shape the methods you'll use to make your application highly available.</source>
        </trans-unit><trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Evaluate the HA capabilities of the application</source>
        </trans-unit><trans-unit id="177" translate="yes" xml:space="preserve">
          <source>To evaluate the HA capabilities of your application, perform a failure analysis.</source>
        </trans-unit><trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Focus on single points of failure and critical components that would have a large impact on the application if they were unreachable, misconfigured, or started behaving unexpectedly.</source>
        </trans-unit><trans-unit id="179" translate="yes" xml:space="preserve">
          <source>For areas that do have redundancy, determine whether the application is capable of detecting error conditions and self-healing.</source>
        </trans-unit><trans-unit id="180" translate="yes" xml:space="preserve">
          <source>You'll need to carefully evaluate all components of your application, including the pieces designed to provide HA functionality, such as load balancers.</source>
        </trans-unit><trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Single points of failure will either need to be modified to have HA capabilities integrated, or will need to be replaced with services that can provide HA capabilities.</source>
        </trans-unit><trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Evaluate the HA capabilities of dependent applications</source>
        </trans-unit><trans-unit id="183" translate="yes" xml:space="preserve">
          <source>You'll need to understand not only your application's SLA requirements to your consumer, but also the provided SLAs of any resource that your application may depend on.</source>
        </trans-unit><trans-unit id="184" translate="yes" xml:space="preserve">
          <source>If you are committing an uptime to your customers of 99.9%, but a service your application depends on only has an uptime commitment of 99%, this could put you at risk of not meeting your SLA to your customers.</source>
        </trans-unit><trans-unit id="185" translate="yes" xml:space="preserve">
          <source>If a dependent service is unable to provide a sufficient SLA, you may need to modify your own SLA, replace the dependency with an alternative, or find ways to meet your SLA while the dependency is unavailable.</source>
        </trans-unit><trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Depending on the scenario and the nature of the dependency, failing dependencies can be temporarily worked around with solutions like caches and work queues.</source>
        </trans-unit><trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Azure's highly available platform</source>
        </trans-unit><trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The Azure cloud platform has been designed to provide high availability throughout all its services.</source>
        </trans-unit><trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Like any system, applications may be affected by both hardware and software platform events.</source>
        </trans-unit><trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The need to design your application architecture to handle failures is critical, and the Azure cloud platform provides you with the tools and capabilities to make your application highly available.</source>
        </trans-unit><trans-unit id="191" translate="yes" xml:space="preserve">
          <source>There are several core concepts when considering HA for your architecture on Azure:</source>
        </trans-unit><trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Availability sets</source>
        </trans-unit><trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Availability zones</source>
        </trans-unit><trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Load balancing</source>
        </trans-unit><trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Platform as a service (PaaS) HA capabilities</source>
        </trans-unit><trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Availability sets</source>
        </trans-unit><trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Availability sets are a way for you to inform Azure that VMs that belong to the same application workload should be distributed to prevent simultaneous impact from hardware failure and scheduled maintenance.</source>
        </trans-unit><trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Availability sets are made up of <bpt id="p1">*</bpt>update domains<ept id="p1">*</ept> and <bpt id="p2">*</bpt>fault domains<ept id="p2">*</ept>.</source>
        </trans-unit><trans-unit id="199" translate="yes" xml:space="preserve">
          <source>An illustration showing three availability sets.</source>
        </trans-unit><trans-unit id="200" translate="yes" xml:space="preserve">
          <source>The first set has one update domain, the second has two update domains, and the third is without any update domain.</source>
        </trans-unit><trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Update domains ensure that a subset of your application's servers always remain running when the virtual machine hosts in an Azure datacenter require downtime for maintenance.</source>
        </trans-unit><trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Most updates can be performed with no impact to the VMs running on them, but there are times when this isn't possible.</source>
        </trans-unit><trans-unit id="203" translate="yes" xml:space="preserve">
          <source>To ensure that updates don't happen to a whole datacenter at once, the Azure datacenter is logically sectioned into update domains (UD).</source>
        </trans-unit><trans-unit id="204" translate="yes" xml:space="preserve">
          <source>When a maintenance event, such as a performance update and critical security patch that needs to be applied to the host, the update is sequenced through update domains.</source>
        </trans-unit><trans-unit id="205" translate="yes" xml:space="preserve">
          <source>The use of sequencing updates using update domains ensures that the whole datacenter isn't unavailable during platform updates and patching.</source>
        </trans-unit><trans-unit id="206" translate="yes" xml:space="preserve">
          <source>While update domains represent a logical section of the datacenter, fault domains (FD) represent physical sections of the datacenter and ensure rack diversity of servers in an availability set.</source>
        </trans-unit><trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Fault domains align to the physical separation of shared hardware in the datacenter.</source>
        </trans-unit><trans-unit id="208" translate="yes" xml:space="preserve">
          <source>This includes power, cooling, and network hardware that supports the physical servers located in server racks.</source>
        </trans-unit><trans-unit id="209" translate="yes" xml:space="preserve">
          <source>In the event the hardware that supports a server rack has become unavailable, only that rack of servers would be affected by the outage.</source>
        </trans-unit><trans-unit id="210" translate="yes" xml:space="preserve">
          <source>By placing your VMs in an availability set, your VMs will be automatically spread across multiple FDs so that in the event of a hardware failure only part of your VMs will be impacted.</source>
        </trans-unit><trans-unit id="211" translate="yes" xml:space="preserve">
          <source>With availability sets, you can ensure your application remains online if a high-impact maintenance event is required or hardware failures occur.</source>
        </trans-unit><trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Availability zones</source>
        </trans-unit><trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Availability zones are independent physical datacenter locations within a region that include their own power, cooling, and networking.</source>
        </trans-unit><trans-unit id="214" translate="yes" xml:space="preserve">
          <source>By taking availability zones into account when deploying resources, you can protect workloads from datacenter outages while retaining presence in a particular region.</source>
        </trans-unit><trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Services like virtual machines are <bpt id="p1">*</bpt>zonal services<ept id="p1">*</ept> and allow you to deploy them to specific zones within a region.</source>
        </trans-unit><trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Other services are <bpt id="p1">*</bpt>zone-redundant services<ept id="p1">*</ept> and will replicate across the availability zones in the specific Azure region.</source>
        </trans-unit><trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Both types ensure that within an Azure region there are no single points of failure.</source>
        </trans-unit><trans-unit id="218" translate="yes" xml:space="preserve">
          <source>An illustration showing three availability zones within an Azure region.</source>
        </trans-unit><trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Each availability zone has its own set of resources and are connected with each other for replication of zone-redundant services.</source>
        </trans-unit><trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Supported regions contain a minimum of three availability zones.</source>
        </trans-unit><trans-unit id="221" translate="yes" xml:space="preserve">
          <source>When creating zonal service resources in those regions, you'll have the ability to select the zone in which the resource should be created.</source>
        </trans-unit><trans-unit id="222" translate="yes" xml:space="preserve">
          <source>This will allow you to design your application to withstand a zonal outage and continue to operate in an Azure region before having to evacuate your application to another Azure region.</source>
        </trans-unit><trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Availability zones are a newer high availability configuration service for Azure regions and are currently available for certain regions.</source>
        </trans-unit><trans-unit id="224" translate="yes" xml:space="preserve">
          <source>It's important to check the availability of this service in the region that you're planning to deploy your application if you want to consider this functionality.</source>
        </trans-unit><trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Availability zones are supported when using virtual machines, as well as several PaaS services.</source>
        </trans-unit><trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Availability zones are mutually exclusive with availability sets.</source>
        </trans-unit><trans-unit id="227" translate="yes" xml:space="preserve">
          <source>When using availability zones you no longer need to define an availability set for your systems.</source>
        </trans-unit><trans-unit id="228" translate="yes" xml:space="preserve">
          <source>You'll have diversity at the data center level, and updates will never be performed to multiple availability zones at the same time.</source>
        </trans-unit><trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Load balancing</source>
        </trans-unit><trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Load balancers manage how network traffic is distributed across an application.</source>
        </trans-unit><trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Load balancers are essential in keeping your application resilient to individual component failures and to ensure your application is available to process requests.</source>
        </trans-unit><trans-unit id="232" translate="yes" xml:space="preserve">
          <source>For applications that don't have service discovery built in, load balancing is required for both availability sets and availability zones.</source>
        </trans-unit><trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Azure possesses three load balancing technology services that are distinct in their abilities to route network traffic:</source>
        </trans-unit><trans-unit id="234" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Azure Traffic Manager<ept id="p1">**</ept> provides global DNS load balancing.</source>
        </trans-unit><trans-unit id="235" translate="yes" xml:space="preserve">
          <source>You would consider using Traffic Manager to provide load balancing of DNS endpoints within or across Azure regions.</source>
        </trans-unit><trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Traffic manager will distribute requests to available endpoints, and use endpoint monitoring to detect and remove failed endpoints from load.</source>
        </trans-unit><trans-unit id="237" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Azure Application Gateway<ept id="p1">**</ept> provides Layer 7 load-balancing capabilities, such as round-robin distribution of incoming traffic, cookie-based session affinity, URL path-based routing, and the ability to host multiple websites behind a single application gateway.</source>
        </trans-unit><trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Application Gateway by default monitors the health of all resources in its back-end pool and automatically removes any resource considered unhealthy from the pool.</source>
        </trans-unit><trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Application Gateway continues to monitor the unhealthy instances and adds them back to the healthy back-end pool once they become available and respond to health probes.</source>
        </trans-unit><trans-unit id="240" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Azure Load Balancer<ept id="p1">**</ept> is a layer 4 load balancer.</source>
        </trans-unit><trans-unit id="241" translate="yes" xml:space="preserve">
          <source>You can configure public and internal load-balanced endpoints and define rules to map inbound connections to back-end pool destinations by using TCP and HTTP health-probing options to manage service availability.</source>
        </trans-unit><trans-unit id="242" translate="yes" xml:space="preserve">
          <source>One or a combination of all three Azure load-balancing technologies can ensure you have the necessary options available to architect a highly available solution to route network traffic through your application.</source>
        </trans-unit><trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Azure load balancing optionsAn illustration showing the different load balancing technology in Azure.</source>
        </trans-unit><trans-unit id="244" translate="yes" xml:space="preserve">
          <source>The traffic manager balances the load between two regions.</source>
        </trans-unit><trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Within each region there is an application gateway that distributes the load among different virtual machines in the web tier based on the type of request.</source>
        </trans-unit><trans-unit id="246" translate="yes" xml:space="preserve">
          <source>All images requests go to the image server pool, and any other request is directed to the default server pool.</source>
        </trans-unit><trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Further requests coming from the default server pools are handled by the Azure load balancer to distribute them among the virtual machines in the database tier.</source>
        </trans-unit><trans-unit id="248" translate="yes" xml:space="preserve">
          <source>PaaS HA capabilities</source>
        </trans-unit><trans-unit id="249" translate="yes" xml:space="preserve">
          <source>PaaS services come with high availability built in.</source>
        </trans-unit><trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Services such as Azure SQL Database, Azure App Service, and Azure Service Bus include high availability features and ensure that failures of an individual component of the service will be seamless to your application.</source>
        </trans-unit><trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Using PaaS services is one of the best ways to ensure that your architecture is highly available.</source>
        </trans-unit><trans-unit id="252" translate="yes" xml:space="preserve">
          <source>When architecting for high availability, you'll want to understand the SLA that you're committing to your customers.</source>
        </trans-unit><trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Then evaluate both the HA capabilities that your application has, and the HA capabilities and SLAs of dependent systems.</source>
        </trans-unit><trans-unit id="254" translate="yes" xml:space="preserve">
          <source>After those have been established, use Azure features, such as availability sets, availability zones, and various load-balancing technologies, to add HA capabilities to your application.</source>
        </trans-unit><trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Any PaaS services you should choose to use will have HA capabilities built in.</source>
        </trans-unit></group></body></file></xliff>