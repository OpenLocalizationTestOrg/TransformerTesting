<?xml version="1.0"?><xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd"><file datatype="xml" original="6-how-to-programmatically-access-a-queue.md" source-language="en-US" target-language="en-US"><header><tool tool-id="mdxliff" tool-name="mdxliff"  tool-company="Microsoft" /><xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6-how-to-programmatically-access-a-queue.eb00e3.f739b71af2021df054502849dc27b1ef0cec4648.skl</xliffext:skl_file_name><xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version><xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f739b71af2021df054502849dc27b1ef0cec4648</xliffext:ms.openlocfilehash><xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ba7e452ac39d7f09a5646044b44de0e1cdc54982</xliffext:ms.sourcegitcommit><xliffext:ms.openlocfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">learn-pr\azure\communicate-between-apps-with-azure-queue-storage\includes\6-how-to-programmatically-access-a-queue.md</xliffext:ms.openlocfilepath></header><body><group id="content" extype="content"><trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Queues hold messages - packets of data whose shape is known to the sender application and receiver application.</source>
        </trans-unit><trans-unit id="102" translate="yes" xml:space="preserve">
          <source>The sender creates the queue and adds a message.</source>
        </trans-unit><trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The receiver retrieves a message, processes it, and then deletes the message from the queue.</source>
        </trans-unit><trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The following illustration shows a typical flow of this process.</source>
        </trans-unit><trans-unit id="105" translate="yes" xml:space="preserve">
          <source>An illustration showing a typical message flow through the Azure Queue.</source>
        </trans-unit><trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Notice that <ph id="ph1">`get`</ph> and <ph id="ph2">`delete`</ph> are separate operations.</source>
        </trans-unit><trans-unit id="107" translate="yes" xml:space="preserve">
          <source>This arrangement handles potential failures in the receiver and implements a concept called <bpt id="p1">_</bpt>at-least-once delivery<ept id="p1">_</ept>.</source>
        </trans-unit><trans-unit id="108" translate="yes" xml:space="preserve">
          <source>After the receiver gets a message, that message remains in the queue but is invisible for 30 seconds.</source>
        </trans-unit><trans-unit id="109" translate="yes" xml:space="preserve">
          <source>If the receiver crashes or experiences a power failure during processing, then it will never delete the message from the queue.</source>
        </trans-unit><trans-unit id="110" translate="yes" xml:space="preserve">
          <source>After 30 seconds, the message will reappear in the queue and another instance of the receiver can process it to completion.</source>
        </trans-unit><trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The Azure Storage Client Library for .NET</source>
        </trans-unit><trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Azure Storage Client Library for .NET<ept id="p1">**</ept> provides types to represent each of the objects you need to interact with:</source>
        </trans-unit><trans-unit id="113" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`CloudStorageAccount`</ph> represents your Azure storage account.</source>
        </trans-unit><trans-unit id="114" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`CloudQueueClient`</ph> represents Azure Queue storage.</source>
        </trans-unit><trans-unit id="115" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`CloudQueue`</ph> represents one of your queue instances.</source>
        </trans-unit><trans-unit id="116" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`CloudQueueMessage`</ph> represents a message.</source>
        </trans-unit><trans-unit id="117" translate="yes" xml:space="preserve">
          <source>You will use these classes to get programmatic access to your queue.</source>
        </trans-unit><trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The library has both synchronous and asynchronous methods; you should prefer to use the asynchronous versions to avoid blocking the client app.</source>
        </trans-unit><trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The Azure Storage Client Library for .NET is available in the <bpt id="p1">**</bpt>WindowsAzure.Storage<ept id="p1">**</ept> NuGet package.</source>
        </trans-unit><trans-unit id="120" translate="yes" xml:space="preserve">
          <source>You can install it through an IDE, Azure CLI, or through PowerShell <ph id="ph1">`Install-Package WindowsAzure.Storage`</ph>.</source>
        </trans-unit><trans-unit id="121" translate="yes" xml:space="preserve">
          <source>How to connect to a queue</source>
        </trans-unit><trans-unit id="122" translate="yes" xml:space="preserve">
          <source>To connect to a queue, you first create a <ph id="ph1">`CloudStorageAccount`</ph> with your connection string.</source>
        </trans-unit><trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The resulting object can then create a <ph id="ph1">`CloudQueueClient`</ph>, which in turn can open a <ph id="ph2">`CloudQueue`</ph> instance.</source>
        </trans-unit><trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The basic code flow is shown below.</source>
        </trans-unit><trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Creating a <ph id="ph1">`CloudQueue`</ph> doesn't necessarily mean the <bpt id="p1">_</bpt>actual<ept id="p1">_</ept> storage queue exists.</source>
        </trans-unit><trans-unit id="126" translate="yes" xml:space="preserve">
          <source>However, you can use this object to create, delete, and check for an existing queue.</source>
        </trans-unit><trans-unit id="127" translate="yes" xml:space="preserve">
          <source>As mentioned above, all methods support both synchronous and asynchronous versions, but we will only be using the <ph id="ph1">`Task`</ph>-based asynchronous versions.</source>
        </trans-unit><trans-unit id="128" translate="yes" xml:space="preserve">
          <source>How to create a queue</source>
        </trans-unit><trans-unit id="129" translate="yes" xml:space="preserve">
          <source>You will use a common pattern for queue creation: the sender application should always be responsible for creating the queue.</source>
        </trans-unit><trans-unit id="130" translate="yes" xml:space="preserve">
          <source>This keeps your application more self-contained and less dependent on administrative set-up.</source>
        </trans-unit><trans-unit id="131" translate="yes" xml:space="preserve">
          <source>To make the creation simple, the client library exposes a <ph id="ph1">`CreateIfNotExistsAsync`</ph> method that will create the queue if necessary, or return <ph id="ph2">`false`</ph> if the queue already exists.</source>
        </trans-unit><trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Typical code is shown below.</source>
        </trans-unit><trans-unit id="133" translate="yes" xml:space="preserve">
          <source>You must have <ph id="ph1">`Write`</ph> or <ph id="ph2">`Create`</ph> permissions for the storage account to use this API.</source>
        </trans-unit><trans-unit id="134" translate="yes" xml:space="preserve">
          <source>This is always true if you use the <bpt id="p1">**</bpt>Access Key<ept id="p1">**</ept> security model, but you can lock down permissions to the account with other approaches that will only allow read operations against the queue.</source>
        </trans-unit><trans-unit id="135" translate="yes" xml:space="preserve">
          <source>How to send a message</source>
        </trans-unit><trans-unit id="136" translate="yes" xml:space="preserve">
          <source>To send a message, you instantiate a <ph id="ph1">`CloudQueueMessage`</ph> object.</source>
        </trans-unit><trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The class has a few overloaded constructors that load your data into the message.</source>
        </trans-unit><trans-unit id="138" translate="yes" xml:space="preserve">
          <source>We will use the constructor that takes a <ph id="ph1">`string`</ph>.</source>
        </trans-unit><trans-unit id="139" translate="yes" xml:space="preserve">
          <source>After creating the message, you use a <ph id="ph1">`CloudQueue`</ph> object to send it.</source>
        </trans-unit><trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Here's a typical example:</source>
        </trans-unit><trans-unit id="141" translate="yes" xml:space="preserve">
          <source>While the total queue size can be up to 500 TB, the individual messages in it can only be up to 64 KB in size (48 KB when using Base64 encoding).</source>
        </trans-unit><trans-unit id="142" translate="yes" xml:space="preserve">
          <source>If you need a larger payload you can combine queues and blobs â€“ passing the URL to the actual data (stored as a Blob) in the message.</source>
        </trans-unit><trans-unit id="143" translate="yes" xml:space="preserve">
          <source>This approach would allow you to enqueue up to 200 GB for a single item.</source>
        </trans-unit><trans-unit id="144" translate="yes" xml:space="preserve">
          <source>How to receive and delete a message</source>
        </trans-unit><trans-unit id="145" translate="yes" xml:space="preserve">
          <source>In the receiver, you get the next message, process it, and then delete it after processing succeeds.</source>
        </trans-unit><trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Here's a simple example:</source>
        </trans-unit><trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Let's now apply this new knowledge to our application!</source>
        </trans-unit></group></body></file></xliff>