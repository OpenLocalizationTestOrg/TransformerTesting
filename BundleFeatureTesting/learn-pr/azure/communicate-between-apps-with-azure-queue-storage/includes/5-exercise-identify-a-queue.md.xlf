<?xml version="1.0"?><xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd"><file datatype="xml" original="5-exercise-identify-a-queue.md" source-language="en-US" target-language="en-US"><header><tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1931010" tool-company="Microsoft" /><xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5-exercise-identify-a-queue.ad3cb94f48572ab4b24edc847763f196c18df57b.skl</xliffext:skl_file_name><xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version><xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e70afe7f90c8b8902a9c88150fbb9b8130c83591</xliffext:ms.openlocfilehash><xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/24/2019</xliffext:ms.lasthandoff><xliffext:ms.openlocfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">learn-pr\azure\communicate-between-apps-with-azure-queue-storage\includes\5-exercise-identify-a-queue.md</xliffext:ms.openlocfilepath></header><body><group id="content" extype="content"><trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Let's create a client application to work with a queue.</source>
        </trans-unit><trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Then we'll add our connection string to the code.</source>
        </trans-unit><trans-unit id="103" translate="yes" xml:space="preserve">
          <source>You can create the client application on your local computer if you have .NET Core installed, or directly in the Cloud Shell environment.</source>
        </trans-unit><trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Create the application</source>
        </trans-unit><trans-unit id="105" translate="yes" xml:space="preserve">
          <source>We'll create a .NET Core application that you can run on Linux, macOS, or Windows.</source>
        </trans-unit><trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Let's name it <bpt id="p1">**</bpt>QueueApp<ept id="p1">**</ept>.</source>
        </trans-unit><trans-unit id="107" translate="yes" xml:space="preserve">
          <source>For simplicity, we'll use a single app that will both send and receive messages through our queue.</source>
        </trans-unit><trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">`dotnet new`</ph> command to create a new console app with the name <bpt id="p1">**</bpt>QueueApp<ept id="p1">**</ept>.</source>
        </trans-unit><trans-unit id="109" translate="yes" xml:space="preserve">
          <source>You can type commands into the Cloud Shell on the right, or if you are working locally, in a terminal/console window.</source>
        </trans-unit><trans-unit id="110" translate="yes" xml:space="preserve">
          <source>This command creates a simple app with a single source file: <ph id="ph1">`Program.cs`</ph>.</source>
        </trans-unit><trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Switch to the newly created <ph id="ph1">`QueueApp`</ph> folder and build the app to verify that all is well.</source>
        </trans-unit><trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Get your connection string</source>
        </trans-unit><trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Recall that your connection string is available in the Azure portal <bpt id="p1">**</bpt>Settings &gt; Access keys<ept id="p1">**</ept> section of your storage account.</source>
        </trans-unit><trans-unit id="114" translate="yes" xml:space="preserve">
          <source>You can also retrieve it through the Azure CLI or PowerShell tools.</source>
        </trans-unit><trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Let's use the Azure CLI command.</source>
        </trans-unit><trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Remember to replace the <ph id="ph1">`&lt;name&gt;`</ph> with the specific name of the storage account you created.</source>
        </trans-unit><trans-unit id="117" translate="yes" xml:space="preserve">
          <source>You can use <ph id="ph1">`az storage account list`</ph> if you need a reminder.</source>
        </trans-unit><trans-unit id="118" translate="yes" xml:space="preserve">
          <source>This command will return a JSON block with your connection string.</source>
        </trans-unit><trans-unit id="119" translate="yes" xml:space="preserve">
          <source>It will include the storage account name and the account key:</source>
        </trans-unit><trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Add the connection string to the application</source>
        </trans-unit><trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Finally, let's add the connection string into our app so it can access the storage account.</source>
        </trans-unit><trans-unit id="122" translate="yes" xml:space="preserve">
          <source>For simplicity, you will place the connection string in the <bpt id="p1">**</bpt>Program.cs<ept id="p1">**</ept> file.</source>
        </trans-unit><trans-unit id="123" translate="yes" xml:space="preserve">
          <source>In a production application, you should store it in a secure location.</source>
        </trans-unit><trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For server side use, we recommend using Azure Key Vault.</source>
        </trans-unit><trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Type <ph id="ph1">`code .`</ph> in the terminal to open the online code editor.</source>
        </trans-unit><trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Alternatively, if you are working on your own you can use the IDE of your choice.</source>
        </trans-unit><trans-unit id="127" translate="yes" xml:space="preserve">
          <source>We recommend Visual Studio Code, which is an excellent cross-platform IDE.</source>
        </trans-unit><trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Open the <ph id="ph1">`Program.cs`</ph> source file in the project.</source>
        </trans-unit><trans-unit id="129" translate="yes" xml:space="preserve">
          <source>In the <ph id="ph1">`Program`</ph> class, add a <ph id="ph2">`const string`</ph> value to hold the connection string.</source>
        </trans-unit><trans-unit id="130" translate="yes" xml:space="preserve">
          <source>You only need the value (it starts with the text <bpt id="p1">**</bpt>DefaultEndpointsProtocol<ept id="p1">**</ept>).</source>
        </trans-unit><trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Save the file.</source>
        </trans-unit><trans-unit id="132" translate="yes" xml:space="preserve">
          <source>You can click the ellipse "..." in the right corner of the cloud editor, or use the accelerator key (<bpt id="p1">&lt;kbd&gt;</bpt>Ctrl+S<ept id="p1">&lt;/kbd&gt;</ept> on Windows and Linux, <bpt id="p2">&lt;kbd&gt;</bpt>Cmd+S<ept id="p2">&lt;/kbd&gt;</ept> on macOS).</source>
        </trans-unit><trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Your code should look something like this (the string value will be unique to your account).</source>
        </trans-unit><trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Now that we have this starter project setup, let's look at how to work with a queue in code.</source>
        </trans-unit><trans-unit id="135" translate="yes" xml:space="preserve">
          <source>It all starts with <bpt id="p1">_</bpt>messages<ept id="p1">_</ept>.</source>
        </trans-unit></group></body></file></xliff>