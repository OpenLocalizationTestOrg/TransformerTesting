<?xml version="1.0"?><xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd"><file datatype="xml" original="4-identify-a-queue.md" source-language="en-US" target-language="en-US"><header><tool tool-id="mdxliff" tool-name="mdxliff"  tool-company="Microsoft" /><xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4-identify-a-queue.2f10e4.32f0c107029bd49038d3557d0e2b392f034b515e.skl</xliffext:skl_file_name><xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version><xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">32f0c107029bd49038d3557d0e2b392f034b515e</xliffext:ms.openlocfilehash><xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ba7e452ac39d7f09a5646044b44de0e1cdc54982</xliffext:ms.sourcegitcommit><xliffext:ms.openlocfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">learn-pr\azure\communicate-between-apps-with-azure-queue-storage\includes\4-identify-a-queue.md</xliffext:ms.openlocfilepath></header><body><group id="content" extype="content"><trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Now that we have a storage account, let's look at how we work with the queue that it will hold.</source>
        </trans-unit><trans-unit id="102" translate="yes" xml:space="preserve">
          <source>To access a queue, you need three pieces of information:</source>
        </trans-unit><trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Storage account name</source>
        </trans-unit><trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Queue name</source>
        </trans-unit><trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Authorization token</source>
        </trans-unit><trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This information is used by both applications that talk to the queue (the web front end that adds messages and the mid-tier that processes them).</source>
        </trans-unit><trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Queue identity</source>
        </trans-unit><trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Every queue has a name that you assign during creation.</source>
        </trans-unit><trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The name must be unique within your storage account but doesn't need to be globally unique (unlike the storage account name).</source>
        </trans-unit><trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The combination of your storage account name and your queue name uniquely identifies a queue.</source>
        </trans-unit><trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Access authorization</source>
        </trans-unit><trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Every request to a queue must be authorized and there are several options to choose from.</source>
        </trans-unit><trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Authorization Type</source>
        </trans-unit><trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit><trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Azure Active Directory<ept id="p1">**</ept></source>
        </trans-unit><trans-unit id="116" translate="yes" xml:space="preserve">
          <source>You can use role-based authentication and identify specific clients based on AAD credentials.</source>
        </trans-unit><trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Shared Key<ept id="p1">**</ept></source>
        </trans-unit><trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Sometimes referred to as an <bpt id="p1">**</bpt>account key<ept id="p1">**</ept>, this is an encrypted key signature associated with the storage account.</source>
        </trans-unit><trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Every storage account has two of these keys that can be passed with each request to authenticate access.</source>
        </trans-unit><trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Using this approach is like using a root password - it provides <bpt id="p1">_</bpt>full access<ept id="p1">_</ept> to the storage account.</source>
        </trans-unit><trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Shared access signature<ept id="p1">**</ept></source>
        </trans-unit><trans-unit id="122" translate="yes" xml:space="preserve">
          <source>A shared access signature (SAS) is a generated URI that grants limited access to objects in your storage account to clients.</source>
        </trans-unit><trans-unit id="123" translate="yes" xml:space="preserve">
          <source>You can restrict access to specific resources, permissions, and scope to a data range to automatically turn off access after a period of time.</source>
        </trans-unit><trans-unit id="124" translate="yes" xml:space="preserve">
          <source>We will use the account key authorization because it is the simplest way to get started working with queues, however it's recommended that you either use shared access signature (SAS) or Azure Active Directory (AAD) in production apps.</source>
        </trans-unit><trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Retrieving the account key</source>
        </trans-unit><trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Your account key is available in the <bpt id="p1">**</bpt>Settings &gt; Access keys<ept id="p1">**</ept> section of your storage account in the Azure portal, or you can retrieve it through the command line:</source>
        </trans-unit><trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Accessing queues</source>
        </trans-unit><trans-unit id="128" translate="yes" xml:space="preserve">
          <source>You access a queue using a REST API.</source>
        </trans-unit><trans-unit id="129" translate="yes" xml:space="preserve">
          <source>To do this, you'll use a URL that combines the name you gave the storage account with the domain <ph id="ph1">`queue.core.windows.net`</ph> and the path to the queue you want to work with.</source>
        </trans-unit><trans-unit id="130" translate="yes" xml:space="preserve">
          <source>For example: <ph id="ph1">`http://&lt;storage account&gt;.queue.core.windows.net/&lt;queue name&gt;`</ph>.</source>
        </trans-unit><trans-unit id="131" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">`Authorization`</ph> header must be included with every request.</source>
        </trans-unit><trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The value can be any of the three authorization styles.</source>
        </trans-unit><trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Using the Azure Storage Client Library for .NET</source>
        </trans-unit><trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The Azure Storage Client Library for .NET is a library provided by Microsoft that formulates REST requests and parses REST responses for you.</source>
        </trans-unit><trans-unit id="135" translate="yes" xml:space="preserve">
          <source>This greatly reduces the amount of code you need to write.</source>
        </trans-unit><trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Access using the client library still requires the same pieces of information (storage account name, queue name, and account key); however, they are organized differently.</source>
        </trans-unit><trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The client library uses a <bpt id="p1">**</bpt>connection string<ept id="p1">**</ept> to establish your connection.</source>
        </trans-unit><trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Your connection string is available in the <bpt id="p1">**</bpt>Settings<ept id="p1">**</ept> section of your Storage Account in the Azure portal, or through the Azure CLI and PowerShell.</source>
        </trans-unit><trans-unit id="139" translate="yes" xml:space="preserve">
          <source>A connection string is a string that combines a storage account name and account key and must be known to the application to access the storage account.</source>
        </trans-unit><trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The format looks like this:</source>
        </trans-unit><trans-unit id="141" translate="yes" xml:space="preserve">
          <source>This string value should be stored in a secure location since anyone who has access to this connection string would be able to manipulate the queue.</source>
        </trans-unit><trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Notice that the connection string doesn't include the queue name.</source>
        </trans-unit><trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The queue name is supplied in your code when you establish a connection to the queue.</source>
        </trans-unit><trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Let's get our connection string from Azure and set up a new application to use it.</source>
        </trans-unit></group></body></file></xliff>