<?xml version="1.0"?><xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd"><file datatype="xml" original="8-exercise-implement-dequeue.md" source-language="en-US" target-language="en-US"><header><tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1931010" tool-company="Microsoft" /><xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8-exercise-implement-dequeue.356a004d35183dd0756985cea78abf8b6d28f1a5.skl</xliffext:skl_file_name><xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version><xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4f22dc6be00205feef6289487e30e910851ab3b9</xliffext:ms.openlocfilehash><xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">05/13/2019</xliffext:ms.lasthandoff><xliffext:ms.openlocfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">learn-pr\azure\communicate-between-apps-with-azure-queue-storage\includes\8-exercise-implement-dequeue.md</xliffext:ms.openlocfilepath></header><body><group id="content" extype="content"><trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Now we want to complete the application by writing code to read the next message in the queue, process it, and delete it from the queue.</source>
        </trans-unit><trans-unit id="102" translate="yes" xml:space="preserve">
          <source>We're going to place this code into the same application and execute it when you don't pass any parameters, however in our news service scenario, we would really place this code into our middle-tier servers to process the stories.</source>
        </trans-unit><trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Dequeue a message</source>
        </trans-unit><trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Let's add a new method that retrieves the next message from the queue.</source>
        </trans-unit><trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Open the <ph id="ph1">`Program.cs`</ph> source file in your editor.</source>
        </trans-unit><trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Create a static method in the <ph id="ph1">`Program`</ph> class named <ph id="ph2">`ReceiveArticleAsync`</ph> that takes no parameters and returns a <ph id="ph3">`Task&lt;string&gt;`</ph>.</source>
        </trans-unit><trans-unit id="107" translate="yes" xml:space="preserve">
          <source>We'll use this method to pull a news article from the queue and return it.</source>
        </trans-unit><trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Go ahead and add the <ph id="ph1">`async`</ph> keyword to the method since we'll be using some asynchronous <ph id="ph2">`Task`</ph>-based methods.</source>
        </trans-unit><trans-unit id="109" translate="yes" xml:space="preserve">
          <source>In your <ph id="ph1">`ReceiveArticleAsync`</ph> method, call the new <ph id="ph2">`GetQueue`</ph> method to retrieve your queue reference and assign it to a variable.</source>
        </trans-unit><trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Next, call the <ph id="ph1">`ExistsAsync`</ph> method on the <ph id="ph2">`CloudQueue`</ph> object; this will return whether the queue has been created.</source>
        </trans-unit><trans-unit id="111" translate="yes" xml:space="preserve">
          <source>If we attempt to retrieve a message from a non-existent queue, the API will throw an exception.</source>
        </trans-unit><trans-unit id="112" translate="yes" xml:space="preserve">
          <source>This method is asynchronous so use <ph id="ph1">`await`</ph> to get the return value.</source>
        </trans-unit><trans-unit id="113" translate="yes" xml:space="preserve">
          <source>You should already have the <ph id="ph1">`async`</ph> keyword on the <ph id="ph2">`ReceiveArticleAsync`</ph> method, but if not add it now.</source>
        </trans-unit><trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Add an <ph id="ph1">`if`</ph> block that uses the return value from <ph id="ph2">`ExistsAsync`</ph>.</source>
        </trans-unit><trans-unit id="115" translate="yes" xml:space="preserve">
          <source>We'll add our code to read a value from the queue into the block.</source>
        </trans-unit><trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Add a final return string to the method that indicates no value was read.</source>
        </trans-unit><trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Your method should be looking something like this:</source>
        </trans-unit><trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Call <ph id="ph1">`GetMessageAsync`</ph> on the <ph id="ph2">`CloudQueue`</ph> object to get the first <ph id="ph3">`CloudQueueMessage`</ph> from the queue.</source>
        </trans-unit><trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The return value will be <ph id="ph1">`null`</ph> if the queue is empty.</source>
        </trans-unit><trans-unit id="120" translate="yes" xml:space="preserve">
          <source>If it's non-null, use the <ph id="ph1">`AsString`</ph> property on the <ph id="ph2">`CloudQueueMessage`</ph> object to get the contents of the message.</source>
        </trans-unit><trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Call <ph id="ph1">`DeleteMessageAsync`</ph> on the <ph id="ph2">`CloudQueue`</ph> object to delete the message from the queue.</source>
        </trans-unit><trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The final method implementation should resemble:</source>
        </trans-unit><trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Call the ReceiveArticleAsync method</source>
        </trans-unit><trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Finally, let's add support to invoke our new method.</source>
        </trans-unit><trans-unit id="125" translate="yes" xml:space="preserve">
          <source>We'll do this when we don't pass any parameters into the program.</source>
        </trans-unit><trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Locate the <ph id="ph1">`Main`</ph> method and specifically the <ph id="ph2">`if`</ph> block you added earlier to look for parameters.</source>
        </trans-unit><trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Add an <ph id="ph1">`else`</ph> condition and call the <ph id="ph2">`ReceiveArticleAsync`</ph> method.</source>
        </trans-unit><trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Since it's asynchronous, use the <ph id="ph1">`await`</ph> keyword to retrieve the result and print it to the console window.</source>
        </trans-unit><trans-unit id="129" translate="yes" xml:space="preserve">
          <source>If you didn't convert your app to C# 7.1, you can get the value using the <ph id="ph1">`Result`</ph> property from the returning task.</source>
        </trans-unit><trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Your code should look something like:</source>
        </trans-unit><trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Execute the application</source>
        </trans-unit><trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The code is now complete.</source>
        </trans-unit><trans-unit id="133" translate="yes" xml:space="preserve">
          <source>It can now send and retrieve messages.</source>
        </trans-unit><trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Make sure you have saved all the files in the online editor before you build and run the program.</source>
        </trans-unit><trans-unit id="135" translate="yes" xml:space="preserve">
          <source>To test it, use <ph id="ph1">`dotnet run`</ph> and pass parameters to send messages, and leave off parameters to read a single message.</source>
        </trans-unit><trans-unit id="136" translate="yes" xml:space="preserve">
          <source>If you want to test when a queue doesn't exist, you can delete the queue (and all the data) with the Azure CLI.</source>
        </trans-unit><trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Make sure to replace the <ph id="ph1">`&lt;connection-string&gt;`</ph> parameter (or set the environment variable).</source>
        </trans-unit><trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The next time you add a message, the queue should be re-created.</source>
        </trans-unit><trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The delete operation actually occurs asynchronously.</source>
        </trans-unit><trans-unit id="140" translate="yes" xml:space="preserve">
          <source>If it has not completed you may get an exception when you attempt to re-create the queue.</source>
        </trans-unit></group></body></file></xliff>