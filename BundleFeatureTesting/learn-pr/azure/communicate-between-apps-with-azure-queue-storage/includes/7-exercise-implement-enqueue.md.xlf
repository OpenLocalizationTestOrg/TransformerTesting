<?xml version="1.0"?><xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd"><file datatype="xml" original="7-exercise-implement-enqueue.md" source-language="en-US" target-language="en-US"><header><tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1931010" tool-company="Microsoft" /><xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7-exercise-implement-enqueue.2db0183eacb90e89a3009ad2545e8af4f7a2a0bb.skl</xliffext:skl_file_name><xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version><xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">15e7778d706e9fe5696ecde51b601eedcba895c4</xliffext:ms.openlocfilehash><xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">05/13/2019</xliffext:ms.lasthandoff><xliffext:ms.openlocfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">learn-pr\azure\communicate-between-apps-with-azure-queue-storage\includes\7-exercise-implement-enqueue.md</xliffext:ms.openlocfilepath></header><body><group id="content" extype="content"><trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Now that all the requirements are in place, you can write code that creates a new storage queue and adds a message.</source>
        </trans-unit><trans-unit id="102" translate="yes" xml:space="preserve">
          <source>We would typically place this code in our front-end apps that generate the data.</source>
        </trans-unit><trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Add the client library for Azure Storage</source>
        </trans-unit><trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Let's start by adding the <bpt id="p1">**</bpt>Azure Storage Client Library for .NET<ept id="p1">**</ept> to our app.</source>
        </trans-unit><trans-unit id="105" translate="yes" xml:space="preserve">
          <source>It can be installed with NuGet (a .NET package manager).</source>
        </trans-unit><trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Install the <ph id="ph1">`WindowsAzure.Storage`</ph> package to the project with the <ph id="ph2">`dotnet add package`</ph> command.</source>
        </trans-unit><trans-unit id="107" translate="yes" xml:space="preserve">
          <source>You can do this in the terminal window <bpt id="p1">_</bpt>below<ept id="p1">_</ept> the Cloud Shell, or if you are working on your local computer, in a terminal/console window in the same folder as the project.</source>
        </trans-unit><trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Add a method to send a news alert</source>
        </trans-unit><trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Next, let's create a new method to send a news story into a queue.</source>
        </trans-unit><trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Open the <ph id="ph1">`Program.cs`</ph> file in your code editor.</source>
        </trans-unit><trans-unit id="111" translate="yes" xml:space="preserve">
          <source>At the top of the file, add the following namespaces.</source>
        </trans-unit><trans-unit id="112" translate="yes" xml:space="preserve">
          <source>We'll be using types from both of these to connect to Azure Storage and then to work with queues.</source>
        </trans-unit><trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Create a static method in the <ph id="ph1">`Program`</ph> class named <ph id="ph2">`SendArticleAsync`</ph> that takes a <ph id="ph3">`string`</ph> and returns a <ph id="ph4">`Task`</ph>.</source>
        </trans-unit><trans-unit id="114" translate="yes" xml:space="preserve">
          <source>We'll use this method to send a news article in to our service.</source>
        </trans-unit><trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Name the input parameter <ph id="ph1">`newsMessage`</ph> as shown below.</source>
        </trans-unit><trans-unit id="116" translate="yes" xml:space="preserve">
          <source>In your new method, use the static <ph id="ph1">`CloudStorageAccount.Parse`</ph> method to parse your connection string (recall we placed it into a constant string).</source>
        </trans-unit><trans-unit id="117" translate="yes" xml:space="preserve">
          <source>This method returns a <ph id="ph1">`CloudStorageAccount`</ph> object that needs to be stored in a variable.</source>
        </trans-unit><trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Call the <ph id="ph1">`CreateCloudQueueClient()`</ph> method on the storage account object to get a client object and store that in a variable.</source>
        </trans-unit><trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Next, call <ph id="ph1">`GetQueueReference`</ph> method on the client object and pass the string "newsqueue" for the queue name.</source>
        </trans-unit><trans-unit id="120" translate="yes" xml:space="preserve">
          <source>This returns a <ph id="ph1">`CloudQueue`</ph> object that we can use to work with the queue.</source>
        </trans-unit><trans-unit id="121" translate="yes" xml:space="preserve">
          <source>It's OK if the queue does not exist yet.</source>
        </trans-unit><trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Call <ph id="ph1">`CreateIfNotExistsAsync()`</ph> on the <ph id="ph2">`CloudQueue`</ph> object to ensure the queue is ready for use.</source>
        </trans-unit><trans-unit id="123" translate="yes" xml:space="preserve">
          <source>This will create the queue if necessary.</source>
        </trans-unit><trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Since this is an asynchronous method, use the C# <ph id="ph1">`await`</ph> keyword to ensure we work properly with it.</source>
        </trans-unit><trans-unit id="125" translate="yes" xml:space="preserve">
          <source>That also means you need to decorate the <bpt id="p1">_</bpt>method<ept id="p1">_</ept> with the <ph id="ph1">`async`</ph> keyword.</source>
        </trans-unit><trans-unit id="126" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`CreateIfNotExistsAsync`</ph> returns a <ph id="ph2">`bool`</ph> value that will be <ph id="ph3">`true`</ph> if the queue was created and <ph id="ph4">`false`</ph> if it already exists.</source>
        </trans-unit><trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Output a message to the console if we created the queue.</source>
        </trans-unit><trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Here's an example if you need some help.</source>
        </trans-unit><trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Create an instance of a <ph id="ph1">`CloudQueueMessage`</ph>.</source>
        </trans-unit><trans-unit id="130" translate="yes" xml:space="preserve">
          <source>It takes a <ph id="ph1">`string`</ph> parameter, pass in the method parameter (<ph id="ph2">`newsMessage`</ph>).</source>
        </trans-unit><trans-unit id="131" translate="yes" xml:space="preserve">
          <source>This will be the <bpt id="p1">_</bpt>body<ept id="p1">_</ept> of the message.</source>
        </trans-unit><trans-unit id="132" translate="yes" xml:space="preserve">
          <source>There is also a static method named  that can create a binary message payload.</source>
        </trans-unit><trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Call <ph id="ph1">`AddMessageAsync`</ph> on the <ph id="ph2">`CloudQueue`</ph> object to add the message to the queue.</source>
        </trans-unit><trans-unit id="134" translate="yes" xml:space="preserve">
          <source>This is also an asynchronous method and you will need to use the <ph id="ph1">`await`</ph> keyword to ensure we properly interact with it.</source>
        </trans-unit><trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Save the file and build it by typing <ph id="ph1">`dotnet build`</ph> into the command window.</source>
        </trans-unit><trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Fix any errors, you can use the following code to check your work.</source>
        </trans-unit><trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Add code to send a message</source>
        </trans-unit><trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Let's modify the <ph id="ph1">`Main`</ph> method to pass any parameters received into our new method so we can test our new send method.</source>
        </trans-unit><trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Locate the <ph id="ph1">`Main`</ph> method.</source>
        </trans-unit><trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Check the passed <ph id="ph1">`args`</ph> parameter to see if any data was passed to the command line.</source>
        </trans-unit><trans-unit id="141" translate="yes" xml:space="preserve">
          <source>If so, use <ph id="ph1">`String.Join`</ph> to create a single string from all the words using a space as the separator.</source>
        </trans-unit><trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Pass that to the new <ph id="ph1">`SendArticleAsync`</ph> method.</source>
        </trans-unit><trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Once it returns, use <ph id="ph1">`Console.WriteLine`</ph> to output the message we sent.</source>
        </trans-unit><trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Save the file and build the program (<ph id="ph1">`dotnet build`</ph>), you can use the code below to check your work.</source>
        </trans-unit><trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Since our method is technically asynchronous, we will want to use the <ph id="ph1">`await`</ph> keyword, however that feature isn't available on your <ph id="ph2">`Main`</ph> method unless you are using C# 7.1 or later.</source>
        </trans-unit><trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Just call <ph id="ph1">`Wait()`</ph> on the method to actually block waiting for the method to return, we'll fix that in a minute.</source>
        </trans-unit><trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Execute the application</source>
        </trans-unit><trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The application can now send messages.</source>
        </trans-unit><trans-unit id="149" translate="yes" xml:space="preserve">
          <source>To test it, you can run it from the command line with the <ph id="ph1">`dotnet run`</ph> command.</source>
        </trans-unit><trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Any additional strings are passed as parameters to the application.</source>
        </trans-unit><trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Make sure you have saved all the files in the online editor before you build and run the program.</source>
        </trans-unit><trans-unit id="152" translate="yes" xml:space="preserve">
          <source>As an example, you can type:</source>
        </trans-unit><trans-unit id="153" translate="yes" xml:space="preserve">
          <source>This should add the string <ph id="ph1">`"Send this message"`</ph> into the queue.</source>
        </trans-unit><trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Check your results</source>
        </trans-unit><trans-unit id="155" translate="yes" xml:space="preserve">
          <source>You can check queues in the Azure portal using the <bpt id="p1">**</bpt>Storage Explorer<ept id="p1">**</ept>, if you open that product it will let you explore the data in each storage account you own.</source>
        </trans-unit><trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Alternatively, you can use the Azure CLI or PowerShell.</source>
        </trans-unit><trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Try this command in the shell, replacing the <ph id="ph1">`&lt;connection-string&gt;`</ph> value with your specific connection string:</source>
        </trans-unit><trans-unit id="158" translate="yes" xml:space="preserve">
          <source>This should dump the information for your message, which will look something like this:</source>
        </trans-unit><trans-unit id="159" translate="yes" xml:space="preserve">
          <source>There are several other commands available that you can try with the tools - check out both <ph id="ph1">`az storage queue --help`</ph> and <ph id="ph2">`az storage message --help`</ph> to explore them.</source>
        </trans-unit><trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Put your connection string value into an environment variable named <ph id="ph1">`AZURE_STORAGE_CONNECTION_STRING`</ph> to save yourself from having to type the <ph id="ph2">`--connection-string`</ph> parameter every time!</source>
        </trans-unit><trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Optional - Use the async versions of the methods</source>
        </trans-unit><trans-unit id="162" translate="yes" xml:space="preserve">
          <source>We used <ph id="ph1">`Wait()`</ph> on the send method above but that's not an efficient use of our computing resources.</source>
        </trans-unit><trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Instead, we want to use the C# <ph id="ph1">`async`</ph> and <ph id="ph2">`await`</ph> methods.</source>
        </trans-unit><trans-unit id="164" translate="yes" xml:space="preserve">
          <source>However, we will need to be using <bpt id="p1">_</bpt>at least<ept id="p1">_</ept> C# 7.1 to be able to apply these keywords to our <bpt id="p2">**</bpt>Main<ept id="p2">**</ept> method.</source>
        </trans-unit><trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Switch to C# 7.1</source>
        </trans-unit><trans-unit id="166" translate="yes" xml:space="preserve">
          <source>C#'s <ph id="ph1">`async`</ph> and <ph id="ph2">`await`</ph> keywords were not valid keywords in <bpt id="p1">**</bpt>Main<ept id="p1">**</ept> methods until C# 7.1.</source>
        </trans-unit><trans-unit id="167" translate="yes" xml:space="preserve">
          <source>We can easily switch to that compiler through a flag in the <bpt id="p1">**</bpt>.csproj<ept id="p1">**</ept> file.</source>
        </trans-unit><trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Open the <bpt id="p1">**</bpt>QueueApp.csproj<ept id="p1">**</ept> file in the editor.</source>
        </trans-unit><trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Add <ph id="ph1">`&lt;LangVersion&gt;7.1&lt;/LangVersion&gt;`</ph> into the first <ph id="ph2">`PropertyGroup`</ph> in the build file.</source>
        </trans-unit><trans-unit id="170" translate="yes" xml:space="preserve">
          <source>It should look like the following when you are finished.</source>
        </trans-unit><trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Apply the async keyword</source>
        </trans-unit><trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Next, apply the <ph id="ph1">`async`</ph> keyword to the <bpt id="p1">**</bpt>Main<ept id="p1">**</ept> method.</source>
        </trans-unit><trans-unit id="173" translate="yes" xml:space="preserve">
          <source>We will have to do three things.</source>
        </trans-unit><trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Add the <ph id="ph1">`async`</ph> keyword onto the <bpt id="p1">**</bpt>Main<ept id="p1">**</ept> method signature.</source>
        </trans-unit><trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Change the return type from <ph id="ph1">`void`</ph> to <ph id="ph2">`Task`</ph>.</source>
        </trans-unit><trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Remove the call to <ph id="ph1">`Wait()`</ph> on the call to <ph id="ph2">`SendArticleAsync`</ph> and replace it with <ph id="ph3">`await`</ph>.</source>
        </trans-unit><trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Try running the app again - it should still work exactly as before, but now the code is able to release the thread back to the .NET threadpool while we wait for the message to be queued.</source>
        </trans-unit><trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Now that we have sent a message, the last step is to add support to <bpt id="p1">_</bpt>receive<ept id="p1">_</ept> the message.</source>
        </trans-unit></group></body></file></xliff>