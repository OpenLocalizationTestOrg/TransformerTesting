<?xml version="1.0"?><xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd"><file datatype="xml" original="2-create-the-azure-storage-infrastructure.md" source-language="en-US" target-language="en-US"><header><tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1931010" tool-company="Microsoft" /><xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2-create-the-azure-storage-infrastructure.590788dc580be94bbd9f5b443bc95066336e2296.skl</xliffext:skl_file_name><xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version><xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b2ecc8b7f6648db704ee49c701ee6ddb68f35223</xliffext:ms.openlocfilehash><xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">05/13/2019</xliffext:ms.lasthandoff><xliffext:ms.openlocfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">learn-pr\azure\communicate-between-apps-with-azure-queue-storage\includes\2-create-the-azure-storage-infrastructure.md</xliffext:ms.openlocfilepath></header><body><group id="content" extype="content"><trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Direct communication between the components of a distributed application can be problematic because it might be disrupted when network bandwidth is low or when demand is high.</source>
        </trans-unit><trans-unit id="102" translate="yes" xml:space="preserve">
          <source>We've seen this in our system: the web portal calls a web service, which works great if the service responds in a timely manner.</source>
        </trans-unit><trans-unit id="103" translate="yes" xml:space="preserve">
          <source>High traffic causes problems and so the plan is to use a queue to eliminate the direct link between the front-end apps and your middle-tier web service.</source>
        </trans-unit><trans-unit id="104" translate="yes" xml:space="preserve">
          <source>What is Azure Queue storage?</source>
        </trans-unit><trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Azure Queue storage is an Azure service that implements cloud-based queues.</source>
        </trans-unit><trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Each queue maintains a list of messages.</source>
        </trans-unit><trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Application components access a queue using a REST API or an Azure-supplied client library.</source>
        </trans-unit><trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Typically, you will have one or more <bpt id="p1">_</bpt>sender<ept id="p1">_</ept> components and one or more <bpt id="p2">_</bpt>receiver<ept id="p2">_</ept> components.</source>
        </trans-unit><trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Sender components add messages to the queue.</source>
        </trans-unit><trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Receiver components retrieve messages from the front of the queue for processing.</source>
        </trans-unit><trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The following illustration shows multiple sender applications adding messages to the Azure Queue and one receiver application retrieving the messages.</source>
        </trans-unit><trans-unit id="112" translate="yes" xml:space="preserve">
          <source>An illustration showing a high-level architecture of Azure Queue storage</source>
        </trans-unit><trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Pricing is based on queue size and number of operations.</source>
        </trans-unit><trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Larger message queues cost more than smaller queues.</source>
        </trans-unit><trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Charges are also incurred for each operation, such as adding a message and deleting a message.</source>
        </trans-unit><trans-unit id="116" translate="yes" xml:space="preserve">
          <source>For pricing details, see <bpt id="p1">[</bpt>Azure Queue storage pricing<ept id="p1">](https://azure.microsoft.com/pricing/details/storage/queues/)</ept>.</source>
        </trans-unit><trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Why use queues?</source>
        </trans-unit><trans-unit id="118" translate="yes" xml:space="preserve">
          <source>A queue increases resiliency by temporarily storing waiting messages.</source>
        </trans-unit><trans-unit id="119" translate="yes" xml:space="preserve">
          <source>At times of low or normal demand, the size of the queue remains small because the destination component removes messages from the queue faster than they are added.</source>
        </trans-unit><trans-unit id="120" translate="yes" xml:space="preserve">
          <source>At times of high demand, the queue may increase in size, but messages are not lost.</source>
        </trans-unit><trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The destination component can catch up and empty the queue as demand returns to normal.</source>
        </trans-unit><trans-unit id="122" translate="yes" xml:space="preserve">
          <source>A single queue can be up to <bpt id="p1">**</bpt>500 TB<ept id="p1">**</ept> in size, so it can potentially store <bpt id="p2">_</bpt>millions<ept id="p2">_</ept> of messages.</source>
        </trans-unit><trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The target throughput for a single queue is 2000 messages per second, allowing it to handle high-volume scenarios.</source>
        </trans-unit><trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Queues let your application scale automatically and immediately when demand changes.</source>
        </trans-unit><trans-unit id="125" translate="yes" xml:space="preserve">
          <source>This makes them useful for critical business data that would be damaging to lose.</source>
        </trans-unit><trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Azure offers many other services that scale automatically.</source>
        </trans-unit><trans-unit id="127" translate="yes" xml:space="preserve">
          <source>For example, the <bpt id="p1">**</bpt>Autoscale<ept id="p1">**</ept> feature is available on Azure virtual machine scale sets, cloud services, Azure App Service plans, and App Service environments.</source>
        </trans-unit><trans-unit id="128" translate="yes" xml:space="preserve">
          <source>This lets you define rules that Azure uses to identify periods of high demand and automatically add capacity without involving an administrator.</source>
        </trans-unit><trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Autoscaling responds to demand quickly, but not instantaneously.</source>
        </trans-unit><trans-unit id="130" translate="yes" xml:space="preserve">
          <source>By contrast, Azure Queue storage instantaneously handles high demand by storing messages until processing resources are available.</source>
        </trans-unit><trans-unit id="131" translate="yes" xml:space="preserve">
          <source>What is a message?</source>
        </trans-unit><trans-unit id="132" translate="yes" xml:space="preserve">
          <source>A message in a queue is a byte array of up to 64 KB.</source>
        </trans-unit><trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Message contents are not interpreted at all by any Azure component.</source>
        </trans-unit><trans-unit id="134" translate="yes" xml:space="preserve">
          <source>If you want to create a structured message, you could format the message content using XML or JSON.</source>
        </trans-unit><trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Your code is responsible for generating and interpreting your custom format.</source>
        </trans-unit><trans-unit id="136" translate="yes" xml:space="preserve">
          <source>For example, you could make a custom JSON message that looks like the following:</source>
        </trans-unit><trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Creating a storage account</source>
        </trans-unit><trans-unit id="138" translate="yes" xml:space="preserve">
          <source>A queue must be part of a storage account.</source>
        </trans-unit><trans-unit id="139" translate="yes" xml:space="preserve">
          <source>You can create a storage account using the Azure CLI (or PowerShell), or Azure portal.</source>
        </trans-unit><trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The portal is easiest because it's all guided and prompts you for each piece of information.</source>
        </trans-unit><trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The following screenshot shows the location of the Storage accounts category.</source>
        </trans-unit><trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Screenshot of the All services blade with the Storage accounts category highlighted.</source>
        </trans-unit><trans-unit id="143" translate="yes" xml:space="preserve">
          <source>There are several options you can supply when you create the account, most of which you can use the default selection.</source>
        </trans-unit><trans-unit id="144" translate="yes" xml:space="preserve">
          <source>We covered these options in a previous module, but you can hover over the <ph id="ph1">`(i)`</ph> tip associated with each option to get a reminder of what it does.</source>
        </trans-unit><trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Here's an example of filling out the portal blade.</source>
        </trans-unit><trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The following screenshot displays the Create storage account blade and the information required to create a storage account.</source>
        </trans-unit><trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Screenshot of the Create storage account blade showing the options to specify when creating a storage account.</source>
        </trans-unit><trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Settings for queues</source>
        </trans-unit><trans-unit id="149" translate="yes" xml:space="preserve">
          <source>When you create a storage account that will contain queues, you should consider the following settings:</source>
        </trans-unit><trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Queues are only available as part of Azure general-purpose storage accounts (v1 or v2).</source>
        </trans-unit><trans-unit id="151" translate="yes" xml:space="preserve">
          <source>You cannot add them to Blob storage accounts.</source>
        </trans-unit><trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Access tier<ept id="p1">**</ept> setting which is shown for StorageV2 accounts applies only to Blob storage and does not affect queues.</source>
        </trans-unit><trans-unit id="153" translate="yes" xml:space="preserve">
          <source>You should choose a location that is close to either the source components or destination components or (preferably) both.</source>
        </trans-unit><trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Data is always replicated to multiple servers to guard against disk failures and other hardware problems.</source>
        </trans-unit><trans-unit id="155" translate="yes" xml:space="preserve">
          <source>You have a choice of replication strategies: <bpt id="p1">**</bpt>Locally Redundant Storage (LRS)<ept id="p1">**</ept> is low-cost but vulnerable to disasters that affect an entire data center while <bpt id="p2">**</bpt>Geo-Redundant Storage (GRS)<ept id="p2">**</ept> replicates data to other Azure data centers.</source>
        </trans-unit><trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Choose the replication strategy that meets your redundancy needs.</source>
        </trans-unit><trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The performance tier determines how your message are stored: <bpt id="p1">**</bpt>Standard<ept id="p1">**</ept> uses magnetic drives while <bpt id="p2">**</bpt>Premium<ept id="p2">**</ept> uses solid-state drives.</source>
        </trans-unit><trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Choose Standard if you expect peaks in demand to be short.</source>
        </trans-unit><trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Consider Premium if queue length sometimes becomes long and you need to minimize the time to access messages.</source>
        </trans-unit><trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Require secure transfer if sensitive information may pass through the queue.</source>
        </trans-unit><trans-unit id="161" translate="yes" xml:space="preserve">
          <source>This setting ensures that all connections to the queue are encrypted using Secure Sockets Layer (SSL).</source>
        </trans-unit></group></body></file></xliff>