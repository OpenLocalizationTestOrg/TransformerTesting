<?xml version="1.0"?><xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd"><file datatype="xml" original="3-what-is-a-request-unit.md" source-language="en-US" target-language="en-US"><header><tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1931010" tool-company="Microsoft" /><xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3-what-is-a-request-unit.6c69ebb6f07cb793b6f61098944b4f307d124267.skl</xliffext:skl_file_name><xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version><xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">34eaaf0ba32e7cf6c70b18491435f436a6f4060b</xliffext:ms.openlocfilehash><xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/24/2019</xliffext:ms.lasthandoff><xliffext:ms.openlocfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">learn-pr\azure\create-cosmos-db-for-scale\includes\3-what-is-a-request-unit.md</xliffext:ms.openlocfilepath></header><body><group id="content" extype="content"><trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Next, let's consider the data for your database.</source>
        </trans-unit><trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Adequate throughput is important to ensure you can handle the volume of transactions for your business needs.</source>
        </trans-unit><trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Throughput requirements aren't always consistent.</source>
        </trans-unit><trans-unit id="104" translate="yes" xml:space="preserve">
          <source>For example, you may be building a shopping website that needs to scale during sales or holidays.</source>
        </trans-unit><trans-unit id="105" translate="yes" xml:space="preserve">
          <source>We'll start by learning about request units and how to estimate throughput requirements.</source>
        </trans-unit><trans-unit id="106" translate="yes" xml:space="preserve">
          <source>What is database throughput?</source>
        </trans-unit><trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Database throughput is the number of reads and writes that your database can perform in a single second.</source>
        </trans-unit><trans-unit id="108" translate="yes" xml:space="preserve">
          <source>To scale throughput strategically, you need to estimate your throughput needs by estimating the number of reads and writes you'll have to support at different times and for different document sizes.</source>
        </trans-unit><trans-unit id="109" translate="yes" xml:space="preserve">
          <source>If you estimate correctly, you'll keep your customers happy when demand spikes.</source>
        </trans-unit><trans-unit id="110" translate="yes" xml:space="preserve">
          <source>If you estimate incorrectly, your requests can get rate-limited and operations will have to wait and retry, likely causing high latency and unhappy customers.</source>
        </trans-unit><trans-unit id="111" translate="yes" xml:space="preserve">
          <source>What is a request unit?</source>
        </trans-unit><trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Azure Cosmos DB measures throughput using something called a <bpt id="p1">**</bpt>request unit (RU)<ept id="p1">**</ept>.</source>
        </trans-unit><trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Request unit usage is measured per second, so the unit of measure is <bpt id="p1">**</bpt>request units per second (RU/s)<ept id="p1">**</ept>.</source>
        </trans-unit><trans-unit id="114" translate="yes" xml:space="preserve">
          <source>You must reserve the number of RU/s you want Azure Cosmos DB to provision in advance, so it can handle the load you've estimated, and you can scale your RU/s up or down at any time to meet current demand.</source>
        </trans-unit><trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Request unit basics</source>
        </trans-unit><trans-unit id="116" translate="yes" xml:space="preserve">
          <source>A single request unit, 1 RU, is equal to the approximate cost of performing a single GET request on a 1-KB document using a document's ID.</source>
        </trans-unit><trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Performing a GET by using a document's ID is an efficient means for retrieving a document, and thus the cost is small.</source>
        </trans-unit><trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Creating, replacing, or deleting the same item requires additional processing by the service, and therefore requires more request units.</source>
        </trans-unit><trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The number of request units used for an operation changes depending on the document size, the number of properties in the document, the operation being performed, and some additional complex concepts such as consistency and indexing policy.</source>
        </trans-unit><trans-unit id="120" translate="yes" xml:space="preserve">
          <source>If you need to estimate the throughput needs of an application, the Azure Cosmos DB <bpt id="p1">[</bpt>Capacity Planner<ept id="p1">](https://www.documentdb.com/capacityplanner)</ept> is an online tool that enables you to upload a sample JSON document and set the number of operations you need to complete per second.</source>
        </trans-unit><trans-unit id="121" translate="yes" xml:space="preserve">
          <source>It then provides an estimated total to reserve.</source>
        </trans-unit><trans-unit id="122" translate="yes" xml:space="preserve">
          <source>To manage and plan capacity, Azure Cosmos DB ensures that the number of RUs for a given database operation over a given dataset is deterministic.</source>
        </trans-unit><trans-unit id="123" translate="yes" xml:space="preserve">
          <source>You can examine the response header to track the number of RUs that are consumed by any database operation.</source>
        </trans-unit><trans-unit id="124" translate="yes" xml:space="preserve">
          <source>When you understand the factors that affect RU charges and your application's throughput requirements, you can run your application cost effectively.</source>
        </trans-unit><trans-unit id="125" translate="yes" xml:space="preserve">
          <source>You provision the number of RUs for your application on a per-second basis in increments of 100 RUs per second.</source>
        </trans-unit><trans-unit id="126" translate="yes" xml:space="preserve">
          <source>To scale the provisioned throughput for your application, you can increase or decrease the number of RUs at any time.</source>
        </trans-unit><trans-unit id="127" translate="yes" xml:space="preserve">
          <source>You can scale in increments or decrements of 100 RUs.</source>
        </trans-unit><trans-unit id="128" translate="yes" xml:space="preserve">
          <source>You can make your changes either programmatically or by using the Azure portal.</source>
        </trans-unit><trans-unit id="129" translate="yes" xml:space="preserve">
          <source>You are billed on an hourly basis.</source>
        </trans-unit><trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Request Unit considerations</source>
        </trans-unit><trans-unit id="131" translate="yes" xml:space="preserve">
          <source>While you estimate the number of RUs per second to provision, consider the following factors:</source>
        </trans-unit><trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Item size<ept id="p1">**</ept>: As the size of an item increases, the number of RUs consumed to read or write the item also increases.</source>
        </trans-unit><trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Item indexing<ept id="p1">**</ept>: By default, each item is automatically indexed.</source>
        </trans-unit><trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Fewer RUs are consumed if you choose not to index some of your items in a container.</source>
        </trans-unit><trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Item property count<ept id="p1">**</ept>: Assuming the default indexing is on all properties, the number of RUs consumed to write an item increases as the item property count increases.</source>
        </trans-unit><trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Indexed properties<ept id="p1">**</ept>: An index policy on each container determines which properties are indexed by default.</source>
        </trans-unit><trans-unit id="137" translate="yes" xml:space="preserve">
          <source>To reduce the RU consumption for write operations, limit the number of indexed properties.</source>
        </trans-unit><trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Data consistency<ept id="p1">**</ept>: The strong and bounded staleness consistency levels consume approximately two times more RUs while performing read operations when compared to that of other relaxed consistency levels.</source>
        </trans-unit><trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Query patterns<ept id="p1">**</ept>: The complexity of a query affects how many RUs are consumed for an operation.</source>
        </trans-unit><trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Factors that affect the cost of query operations include:</source>
        </trans-unit><trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The number of query results</source>
        </trans-unit><trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The number of predicates</source>
        </trans-unit><trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The nature of the predicates</source>
        </trans-unit><trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The number of user-defined functions</source>
        </trans-unit><trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The size of the source data</source>
        </trans-unit><trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The size of the result set</source>
        </trans-unit><trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Projections</source>
        </trans-unit><trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Azure Cosmos DB guarantees that the same query on the same data always costs the same number of RUs on repeated executions.</source>
        </trans-unit><trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Script usage<ept id="p1">**</ept>: As with queries, stored procedures and triggers consume RUs based on the complexity of the operations that are performed.</source>
        </trans-unit><trans-unit id="150" translate="yes" xml:space="preserve">
          <source>As you develop your application, inspect the <bpt id="p1">[</bpt>request charge header<ept id="p1">](/azure/cosmos-db/optimize-cost-queries#evaluate-request-unit-charge-for-a-query)</ept> to better understand how much RU capacity each operation consumes.</source>
        </trans-unit><trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Exceeding throughput limits</source>
        </trans-unit><trans-unit id="152" translate="yes" xml:space="preserve">
          <source>If you don’t reserve enough request units, and you attempt to read or write more data than your provisioned throughput allows, your request will be rate-limited.</source>
        </trans-unit><trans-unit id="153" translate="yes" xml:space="preserve">
          <source>When a request is rate-limited, the request has to be retried again after a specified interval.</source>
        </trans-unit><trans-unit id="154" translate="yes" xml:space="preserve">
          <source>If you use the .NET SDK, the request will be retried automatically after waiting the amount of time specified in the retry-after header.</source>
        </trans-unit><trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Creating an account built to scale</source>
        </trans-unit><trans-unit id="156" translate="yes" xml:space="preserve">
          <source>You can change the number of request units provisioned to a database at any time.</source>
        </trans-unit><trans-unit id="157" translate="yes" xml:space="preserve">
          <source>So, during heavy volume periods, you can scale up to accommodate those high demands, and then reduce provisioned throughput during off peak times to reduce costs.</source>
        </trans-unit><trans-unit id="158" translate="yes" xml:space="preserve">
          <source>When you create an account, you can provision a minimum of 400 RU/s, or a maximum of 250,000 RU/s in the portal.</source>
        </trans-unit><trans-unit id="159" translate="yes" xml:space="preserve">
          <source>If you need even more throughput, fill out a ticket in the Azure portal.</source>
        </trans-unit><trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Setting the initial throughput to 1000 RU/s is recommended for almost all accounts, as it is the minimum value in which your database will autoscale should you need more than 10 GB of storage.</source>
        </trans-unit><trans-unit id="161" translate="yes" xml:space="preserve">
          <source>If you set the initial throughput to any value less than 1000 RU/s, your database will not be able to scale to larger than 10 GB unless you reprovision the database and provide a partition key.</source>
        </trans-unit><trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Partition keys enable quick lookup of data in Azure Cosmos DB and enable it to autoscale your database when needed.</source>
        </trans-unit><trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Partition keys are discussed a bit later in the module.</source>
        </trans-unit><trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Summary</source>
        </trans-unit><trans-unit id="165" translate="yes" xml:space="preserve">
          <source>You now understand how to estimate and scope throughput for an Azure Cosmos DB using request units, and can make an appropriate selection when creating a new Azure Cosmos DB collection.</source>
        </trans-unit><trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Request units can be modified at any time, but setting them to 1000 RU/s when you create an account helps ensure your database is ready to scale later.</source>
        </trans-unit></group></body></file></xliff>