<?xml version="1.0"?><xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd"><file datatype="xml" original="5-customize-manage-cdn-behavior.md" source-language="en-US" target-language="en-US"><header><tool tool-id="mdxliff" tool-name="mdxliff"  tool-company="Microsoft" /><xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5-customize-manage-cdn-behavior.fb5555.c6d22f8db18ed0dffc4978f480710dc087996a65.skl</xliffext:skl_file_name><xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version><xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c6d22f8db18ed0dffc4978f480710dc087996a65</xliffext:ms.openlocfilehash><xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ba7e452ac39d7f09a5646044b44de0e1cdc54982</xliffext:ms.sourcegitcommit><xliffext:ms.openlocfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">learn-pr\azure\create-cdn-static-resources-blob-storage\includes\5-customize-manage-cdn-behavior.md</xliffext:ms.openlocfilepath></header><body><group id="content" extype="content"><trans-unit id="101" translate="yes" xml:space="preserve">
          <source>CDNs can improve the performance of static websites.</source>
        </trans-unit><trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Within the context of a global training business, your content needs to be easily accessible and up-to-date.</source>
        </trans-unit><trans-unit id="103" translate="yes" xml:space="preserve">
          <source>In this unit, you'll learn how to make additional configuration changes so that CDNs work properly with static sites in production environments.</source>
        </trans-unit><trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Using Custom domains</source>
        </trans-unit><trans-unit id="105" translate="yes" xml:space="preserve">
          <source>From the exercise, you saw how the CDN had a unique URL in the form of <bpt id="p1">*</bpt>endpointname.azureedge.net<ept id="p1">*</ept>.</source>
        </trans-unit><trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Regardless of where the user is in the world, this URL will point to the nearest POP, in that way improving performance.</source>
        </trans-unit><trans-unit id="107" translate="yes" xml:space="preserve">
          <source>While this approach works fine, the URL isn't memorable and doesn't reflect your company's brand.</source>
        </trans-unit><trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Custom domain settings enable you to specify a Canonical Name (CNAME) record in Domain Name System (DNS) that points to the CDN URL.</source>
        </trans-unit><trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Suppose the user types in the custom domain name, for example <bpt id="p1">_</bpt>www.contoso.com<ept id="p1">_</ept>.</source>
        </trans-unit><trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The DNS maps that domain name to the POP endpoint URL and connects the user to that URL.</source>
        </trans-unit><trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Create a CNAME DNS record</source>
        </trans-unit><trans-unit id="112" translate="yes" xml:space="preserve">
          <source>To provide custom domain mapping, you first need to create the CNAME record in DNS.</source>
        </trans-unit><trans-unit id="113" translate="yes" xml:space="preserve">
          <source>How you do the mapping depends on the interface that your DNS provider implements.</source>
        </trans-unit><trans-unit id="114" translate="yes" xml:space="preserve">
          <source>However, what you need to configure is a record in the following form:</source>
        </trans-unit><trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Address (left field)</source>
        </trans-unit><trans-unit id="116" translate="yes" xml:space="preserve">
          <source>type</source>
        </trans-unit><trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Points to (Right field)</source>
        </trans-unit><trans-unit id="118" translate="yes" xml:space="preserve">
          <source>www.contoso.com</source>
        </trans-unit><trans-unit id="119" translate="yes" xml:space="preserve">
          <source>CNAME</source>
        </trans-unit><trans-unit id="120" translate="yes" xml:space="preserve">
          <source>endpointname.azureedge.net.</source>
        </trans-unit><trans-unit id="121" translate="yes" xml:space="preserve">
          <source>DNS may take up to 72 hours to update.</source>
        </trans-unit><trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Mapping the temporary cdnverify subdomain</source>
        </trans-unit><trans-unit id="123" translate="yes" xml:space="preserve">
          <source>You can configure the CNAME record and publish it if your web server isn't yet online.</source>
        </trans-unit><trans-unit id="124" translate="yes" xml:space="preserve">
          <source>If your domain is already in production and pointing to the origin server, you don't want to have any interruption to your users when you configure the CDN record.</source>
        </trans-unit><trans-unit id="125" translate="yes" xml:space="preserve">
          <source>CNAME records should point to the <bpt id="p1">**</bpt>cdnverify<ept id="p1">**</ept> subdomain.</source>
        </trans-unit><trans-unit id="126" translate="yes" xml:space="preserve">
          <source>In this case, the record will look like this format:</source>
        </trans-unit><trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Address (left field)</source>
        </trans-unit><trans-unit id="128" translate="yes" xml:space="preserve">
          <source>type</source>
        </trans-unit><trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Points to (Right field)</source>
        </trans-unit><trans-unit id="130" translate="yes" xml:space="preserve">
          <source>cdnverify.www.contoso.com</source>
        </trans-unit><trans-unit id="131" translate="yes" xml:space="preserve">
          <source>CNAME</source>
        </trans-unit><trans-unit id="132" translate="yes" xml:space="preserve">
          <source>cdnverify.contoso.azureedge.net.</source>
        </trans-unit><trans-unit id="133" translate="yes" xml:space="preserve">
          <source>cdnverify.www.contoso.com     CNAME   cdnverify.contoso.azureedge.net.</source>
        </trans-unit><trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Typically, you would configure this record with a Time to Live (TTL) of 1 hour.</source>
        </trans-unit><trans-unit id="135" translate="yes" xml:space="preserve">
          <source>When you've configured the cdnverify subdomain and the CNAME for the domain mapping, you can now add the custom domain.</source>
        </trans-unit><trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Adding a custom domain</source>
        </trans-unit><trans-unit id="137" translate="yes" xml:space="preserve">
          <source>To add a custom domain, go to the CDN endpoint that you created, and under <bpt id="p1">**</bpt>Settings<ept id="p1">**</ept>, click <bpt id="p2">**</bpt>Custom domains<ept id="p2">**</ept>.</source>
        </trans-unit><trans-unit id="138" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Custom domain<ept id="p1">**</ept> blade, click <bpt id="p2">**</bpt>Custom domain<ept id="p2">**</ept>, then in the <bpt id="p3">**</bpt>Add a custom domain<ept id="p3">**</ept>, under <bpt id="p4">**</bpt>Custom hostname<ept id="p4">**</ept>, enter the hostname that matches the CNAME record in your custom domain, such as www.contoso.com.</source>
        </trans-unit><trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Add a custom domain</source>
        </trans-unit><trans-unit id="140" translate="yes" xml:space="preserve">
          <source>When you enter the custom domain name, Azure will use DNS to attempt to resolve the address to the endpoint hostname.</source>
        </trans-unit><trans-unit id="141" translate="yes" xml:space="preserve">
          <source>You'll see a tick next to the **Custom hostname field if they match.</source>
        </trans-unit><trans-unit id="142" translate="yes" xml:space="preserve">
          <source>If you see a red exclamation mark, then you should check your DNS settings.</source>
        </trans-unit><trans-unit id="143" translate="yes" xml:space="preserve">
          <source>If the custom domain name resolves to the endpoint hostname, click <bpt id="p1">**</bpt>Add<ept id="p1">**</ept>.</source>
        </trans-unit><trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Now any users going to www.contoso.com will be redirected to the Azure POP nearest their location.</source>
        </trans-unit><trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Compressing files</source>
        </trans-unit><trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Azure CDN can improve performance by compressing to files before they're delivered.</source>
        </trans-unit><trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Files are then decompressed by the receiving browser.</source>
        </trans-unit><trans-unit id="148" translate="yes" xml:space="preserve">
          <source>How this activity applies depends on whether the file is originally compressed on the origin server or not.</source>
        </trans-unit><trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Azure CDN passes along the compressed files unaltered if you enable compression on files hosted on your origin server.</source>
        </trans-unit><trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Azure CDN dynamically compresses uncompressed files on the origin server that is of a type that can be compressed.</source>
        </trans-unit><trans-unit id="151" translate="yes" xml:space="preserve">
          <source>It then stores the compressed files on the POP.</source>
        </trans-unit><trans-unit id="152" translate="yes" xml:space="preserve">
          <source>This process improves the client experience and site performance.</source>
        </trans-unit><trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Compression in Azure CDN Standard from Microsoft is on by default.</source>
        </trans-unit><trans-unit id="154" translate="yes" xml:space="preserve">
          <source>You can't configure additional file types to compress or delete existing file types.</source>
        </trans-unit><trans-unit id="155" translate="yes" xml:space="preserve">
          <source>However, you can add and modify file types to compress in the Akamai Standard and Verizon profiles.</source>
        </trans-unit><trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Controlling caching behavior</source>
        </trans-unit><trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Azure CDNs provide two mechanisms for caching files.</source>
        </trans-unit><trans-unit id="158" translate="yes" xml:space="preserve">
          <source>However, these configuration settings depend on the tier you've selected.</source>
        </trans-unit><trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Caching rules in Azure CDN Standard for Microsoft are set at the endpoint level and provide three configuration options.</source>
        </trans-unit><trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Other tiers provide additional configuration options, which include:</source>
        </trans-unit><trans-unit id="161" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Caching rules<ept id="p1">**</ept>.</source>
        </trans-unit><trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Caching rules can be either global (apply to all content from a specified endpoint) or custom.</source>
        </trans-unit><trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Custom rules apply to specific paths and file extensions.</source>
        </trans-unit><trans-unit id="164" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Query string caching<ept id="p1">**</ept>.</source>
        </trans-unit><trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Query string caching enables you to configure how Azure CDN responds to a query string.</source>
        </trans-unit><trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Query string caching has no effect on files that can't be cached.</source>
        </trans-unit><trans-unit id="167" translate="yes" xml:space="preserve">
          <source>With the Azure CDN Standard for Microsoft Tier, caching rules are as simple as the following three options:</source>
        </trans-unit><trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Ignore query strings.</source>
        </trans-unit><trans-unit id="169" translate="yes" xml:space="preserve">
          <source>This option is the default mode.</source>
        </trans-unit><trans-unit id="170" translate="yes" xml:space="preserve">
          <source>A CDN POP simply passes the request and any query strings directly to the origin server on the first request and caches the asset.</source>
        </trans-unit><trans-unit id="171" translate="yes" xml:space="preserve">
          <source>New requests for the same asset will ignore any query strings until the TTL expires.</source>
        </trans-unit><trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Bypass caching for query strings.</source>
        </trans-unit><trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Each query request from the client is passed directly to the origin server with no caching.</source>
        </trans-unit><trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Cache every unique URL.</source>
        </trans-unit><trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Every time a requesting client generates a unique URL, that URL is passed back to the origin server and the response cached with its own TTL.</source>
        </trans-unit><trans-unit id="176" translate="yes" xml:space="preserve">
          <source>This final method is inefficient where each request is a unique URL, as the cache-hit ratio becomes low.</source>
        </trans-unit><trans-unit id="177" translate="yes" xml:space="preserve">
          <source>To change these settings, in the Endpoint blade, click <bpt id="p1">**</bpt>Caching rules<ept id="p1">**</ept> and then select the caching option that you want to apply to the endpoint and click <bpt id="p2">**</bpt>Save<ept id="p2">**</ept>.</source>
        </trans-unit><trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Caching and time to live</source>
        </trans-unit><trans-unit id="179" translate="yes" xml:space="preserve">
          <source>If you publish a website through Azure CDN, the files on that site are cached until their TTL expires.</source>
        </trans-unit><trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The Cache-Control header contained in the HTTP response from origin server determines the TTL duration.</source>
        </trans-unit><trans-unit id="181" translate="yes" xml:space="preserve">
          <source>If you don't set a TTL on a file, Azure CDN sets a default value.</source>
        </trans-unit><trans-unit id="182" translate="yes" xml:space="preserve">
          <source>However, this default may be overridden if you have set up caching rules in Azure.</source>
        </trans-unit><trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Default TTL values are as follows:</source>
        </trans-unit><trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Generalized web delivery optimizations: seven days</source>
        </trans-unit><trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Large file optimizations: one day</source>
        </trans-unit><trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Media streaming optimizations: one year</source>
        </trans-unit><trans-unit id="187" translate="yes" xml:space="preserve">
          <source>For more information on caching, see the Further Reading section of the Summary unit.</source>
        </trans-unit><trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Content updating</source>
        </trans-unit><trans-unit id="189" translate="yes" xml:space="preserve">
          <source>In normal operation, an Azure CDN edge node will serve an asset until its TTL expires.</source>
        </trans-unit><trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The edge node reconnects to the origin server when the TTL expires and a client makes a request to the same asset.</source>
        </trans-unit><trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The node will fetch another copy of the asset, resetting the TTL in the process.</source>
        </trans-unit><trans-unit id="192" translate="yes" xml:space="preserve">
          <source>To ensure that users always receive the latest version of an asset, consider including a version string in the asset URL.</source>
        </trans-unit><trans-unit id="193" translate="yes" xml:space="preserve">
          <source>This approach causes the CDN to retrieve the new asset immediately.</source>
        </trans-unit><trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Alternatively, you can purge cached content from the edge nodes, which refreshes the content on the next client request.</source>
        </trans-unit><trans-unit id="195" translate="yes" xml:space="preserve">
          <source>You might purge cached content when publishing a new version of a web app or to replace any out-of-date assets.</source>
        </trans-unit><trans-unit id="196" translate="yes" xml:space="preserve">
          <source>You can purge content in several ways.</source>
        </trans-unit><trans-unit id="197" translate="yes" xml:space="preserve">
          <source>On an endpoint by endpoint basis, or all endpoints simultaneously should you want to update everything on your CDN at once.</source>
        </trans-unit><trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Specify a file, by including the path to that file or all assets on the selected endpoint by checking the <bpt id="p1">**</bpt>Purge All<ept id="p1">**</ept> checkbox.</source>
        </trans-unit><trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Based on wildcards (*) or using the root (/).</source>
        </trans-unit><trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Purge assets</source>
        </trans-unit><trans-unit id="201" translate="yes" xml:space="preserve">
          <source>When you've specified what content you want to purge, click the Purge button.</source>
        </trans-unit><trans-unit id="202" translate="yes" xml:space="preserve">
          <source>For more information content expiration, see the Further Reading section of the Summary unit.</source>
        </trans-unit><trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Geo-filtering</source>
        </trans-unit><trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Geo-filtering enables you to allow or block content in specific countries, based on the country code.</source>
        </trans-unit><trans-unit id="205" translate="yes" xml:space="preserve">
          <source>In the Azure CDN Standard for Microsoft Tier, you can only allow or block the entire site.</source>
        </trans-unit><trans-unit id="206" translate="yes" xml:space="preserve">
          <source>With the Verizon and Akamai tiers, you can also set up restrictions on directory paths.</source>
        </trans-unit><trans-unit id="207" translate="yes" xml:space="preserve">
          <source>For more information, see the further reading section in the Summary unit.</source>
        </trans-unit><trans-unit id="208" translate="yes" xml:space="preserve">
          <source>To configure geo-filtering, in the properties of the respective endpoint, click Geo-filtering.</source>
        </trans-unit><trans-unit id="209" translate="yes" xml:space="preserve">
          <source>On the Geo-filtering panel, select either allow or block, then in the Country codes list, select which countries you want to allow or block.</source>
        </trans-unit><trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Geo-filtering</source>
        </trans-unit><trans-unit id="211" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Allow<ept id="p1">**</ept> setting is more restrictive than Block.</source>
        </trans-unit><trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Allow allows access only for the selected countries.</source>
        </trans-unit><trans-unit id="213" translate="yes" xml:space="preserve">
          <source>The logic for Block is to allow access from all countries, except for those countries blocked.</source>
        </trans-unit><trans-unit id="214" translate="yes" xml:space="preserve">
          <source>For more information on geo-filtering, see the Further Reading section in the Summary.</source>
        </trans-unit></group></body></file></xliff>