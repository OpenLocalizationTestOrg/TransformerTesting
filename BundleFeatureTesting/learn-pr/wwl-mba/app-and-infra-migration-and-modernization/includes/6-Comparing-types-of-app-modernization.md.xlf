<?xml version="1.0"?><xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd"><file datatype="xml" original="6-Comparing-types-of-app-modernization.md" source-language="en-US" target-language="en-US"><header><tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1931010" tool-company="Microsoft" /><xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6-Comparing-types-of-app-modernization.757853bcad12a35fd87531af71e7fa9d0cabbd71.skl</xliffext:skl_file_name><xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version><xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f519160cfc8ea13869560bda90e0af7349822667</xliffext:ms.openlocfilehash><xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">05/13/2019</xliffext:ms.lasthandoff><xliffext:ms.openlocfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">learn-pr\wwl-mba\app-and-infra-migration-and-modernization\includes\6-Comparing-types-of-app-modernization.md</xliffext:ms.openlocfilepath></header><body><group id="content" extype="content"><trans-unit id="101" translate="yes" xml:space="preserve">
          <source>In this unit, we’ll talk about modernizing your applications by refactoring with container technology, rearchitecting with microservices, and Cloud native – rebuilding the application in the cloud.</source>
        </trans-unit><trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Let’s dive into refactoring first.</source>
        </trans-unit><trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Refactoring with container technology</source>
        </trans-unit><trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Containers are a packaging mechanism in which applications are abstracted from the environment in which they run, allowing your applications to be more portable.</source>
        </trans-unit><trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Icon indicating play video</source>
        </trans-unit><trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Watch this video to learn about refactoring your applications with container technology.</source>
        </trans-unit><trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Icon of lightbulb</source>
        </trans-unit><trans-unit id="108" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Here’s one way to think about containers. Say you are packing up your kitchen. You put all the appliances and furniture, along with pots and pans into a moving van. This is the container. Wherever you decide to move, you take the container with you and it will be the same kitchen. With container technology, applications can be built to run in any environment. Additional tools, such as Kubernetes, help orchestrate the containers, so you can deploy and scale with confidence.<ept id="p1">*</ept></source>
        </trans-unit><trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Let’s look at how Xerox uses Azure containers.</source>
        </trans-unit><trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Customer scenario: Xerox</source>
        </trans-unit><trans-unit id="111" translate="yes" xml:space="preserve">
          <source>When Xerox chose to refactor their applications with containers in Azure, they were able to access a faster demo environment for new releases.</source>
        </trans-unit><trans-unit id="112" translate="yes" xml:space="preserve">
          <source>They also found several other benefits of refactoring with container technology.</source>
        </trans-unit><trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Onboarding customers faster</source>
        </trans-unit><trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Enabling self-service environments</source>
        </trans-unit><trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Reducing administrative overhead</source>
        </trans-unit><trans-unit id="116" translate="yes" xml:space="preserve">
          <source>No code modification required</source>
        </trans-unit><trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Thanks to Azure Kubernetes Service, we can now spin up customer environments in 10 minutes instead of 24 hours. Moving DocuShare Flex from virtual machines to containers in Azure allows us to provision environments faster, empowering our sales and partner network.<ept id="p1">*</ept></source>
        </trans-unit><trans-unit id="118" translate="yes" xml:space="preserve">
          <source>⸺Robert Bingham, Director of DocuShare Cloud Operations, Xerox</source>
        </trans-unit><trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Now that you’ve learned about the success Xerox had refactoring with container technology in Azure, let’s take a look at rearchitecting.</source>
        </trans-unit><trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Rearchitecting with microservices</source>
        </trans-unit><trans-unit id="121" translate="yes" xml:space="preserve">
          <source>In a microservices architecture, the application is composed of small, independent services.</source>
        </trans-unit><trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Here are some of the defining characteristics of microservices:</source>
        </trans-unit><trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Each microservice executes a single business capability.</source>
        </trans-unit><trans-unit id="124" translate="yes" xml:space="preserve">
          <source>A microservice is small enough that a single small team of developers can write and maintain it.</source>
        </trans-unit><trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Microservices run in separate processes, communicating through well-defined APIs or messaging patterns.</source>
        </trans-unit><trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Microservices do not share data stores or data schemas.</source>
        </trans-unit><trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Each microservice is responsible for managing its own data.</source>
        </trans-unit><trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Microservices have separate code bases, and do not share source code.</source>
        </trans-unit><trans-unit id="129" translate="yes" xml:space="preserve">
          <source>They may use common utility libraries, however.</source>
        </trans-unit><trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Each microservice can be deployed and updated independently of other services.</source>
        </trans-unit><trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Done correctly, microservices can provide several benefits:</source>
        </trans-unit><trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Agility</source>
        </trans-unit><trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Microservices are deployed independently, it's easier to manage bug fixes and feature releases.</source>
        </trans-unit><trans-unit id="134" translate="yes" xml:space="preserve">
          <source>You can update a service without redeploying the entire application and roll back an update if something goes wrong.</source>
        </trans-unit><trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Small code, small teams</source>
        </trans-unit><trans-unit id="136" translate="yes" xml:space="preserve">
          <source>A microservice should be small enough that a single feature team can build, test, and deploy it.</source>
        </trans-unit><trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Small code bases are easier to understand.</source>
        </trans-unit><trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Mix of technologies</source>
        </trans-unit><trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Teams can pick the technology that best fits their service, using a mix of technology stacks as appropriate.</source>
        </trans-unit><trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Resiliency</source>
        </trans-unit><trans-unit id="141" translate="yes" xml:space="preserve">
          <source>If an individual microservice becomes unavailable, it won't disrupt the entire application, as long as any upstream microservices are designed to handle faults correctly (for example, by implementing circuit breaking).</source>
        </trans-unit><trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Scalability</source>
        </trans-unit><trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Microservices architecture allows each microservice to be scaled independently of the others.</source>
        </trans-unit><trans-unit id="144" translate="yes" xml:space="preserve">
          <source>That lets you scale out subsystems that require more resources, without scaling out the entire application.</source>
        </trans-unit><trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Data isolation</source>
        </trans-unit><trans-unit id="146" translate="yes" xml:space="preserve">
          <source>It is much easier to perform schema updates, because only a single microservice is impacted.</source>
        </trans-unit><trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Icon indicating play video</source>
        </trans-unit><trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Watch this video to learn about rearchitecting with microservices.</source>
        </trans-unit><trans-unit id="149" translate="yes" xml:space="preserve">
          <source>As you saw in the video, with microservices, each service is independent.</source>
        </trans-unit><trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Each service is a new project that can be developed on its own schedule, using any language or stack that best fits current requirements.</source>
        </trans-unit><trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Scaling up is easier than with VMs or containers, it just requires deploying additional services as needed.</source>
        </trans-unit><trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Now that we’ve discovered rearchitecting with microservices, let’s focus on building cloud native apps.</source>
        </trans-unit><trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Build for the cloud with applications with serverless</source>
        </trans-unit><trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Serverless computing is a cloud-computing execution model in which the cloud provider dynamically manages the allocation of machine resources.</source>
        </trans-unit><trans-unit id="155" translate="yes" xml:space="preserve">
          <source>With Azure, you can build applications without provisioning and managing infrastructure, using a fully-managed platform.</source>
        </trans-unit><trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Icon indicating play video</source>
        </trans-unit><trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Watch the video to learn about cloud native capabilities.</source>
        </trans-unit><trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Now that you’ve learned about modernizing your apps by refactoring, rearchitecting, and building cloud native, let’s learn how to build, develop, deploy, and manage in a modern way with DevOps.</source>
        </trans-unit></group></body></file></xliff>