<?xml version="1.0"?><xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd"><file datatype="xml" original="5-write-crud-queries.md" source-language="en-US" target-language="en-US"><header><tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1931010" tool-company="Microsoft" /><xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5-write-crud-queries.6b02d31037c16effcb9ed99bbc74ff4901075a52.skl</xliffext:skl_file_name><xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version><xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">23e7f120b7bf1d3a65cf8d71c90dc4fdd2735afe</xliffext:ms.openlocfilehash><xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/24/2019</xliffext:ms.lasthandoff><xliffext:ms.openlocfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">learn-pr\aspnetcore\persist-data-ef-core\includes\5-write-crud-queries.md</xliffext:ms.openlocfilepath></header><body><group id="content" extype="content"><trans-unit id="101" translate="yes" xml:space="preserve">
          <source>There are two query composition styles used with EF Core: Language-Integrated Query (<bpt id="p1">**</bpt>LINQ<ept id="p1">**</ept>) and <bpt id="p2">**</bpt>fluent<ept id="p2">**</ept>.</source>
        </trans-unit><trans-unit id="102" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>LINQ<ept id="p1">](https://docs.microsoft.com/dotnet/csharp/linq/)</ept> uses a declarative SQL-like query syntax.</source>
        </trans-unit><trans-unit id="103" translate="yes" xml:space="preserve">
          <source>At compile time, the LINQ statements are translated into method calls for the .NET Common Language Runtime (CLR).</source>
        </trans-unit><trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Fluent uses method chaining and lambda expressions.</source>
        </trans-unit><trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Instructions for both styles have been provided.</source>
        </trans-unit><trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Select your preference using the toggle above.</source>
        </trans-unit><trans-unit id="107" translate="yes" xml:space="preserve">
          <source>A business requirement for the web API is to provide limited order information to protect customer privacy from unauthorized users.</source>
        </trans-unit><trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The details are as follows:</source>
        </trans-unit><trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The most recent orders should be shown first when retrieving all orders.</source>
        </trans-unit><trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The customer name should be formatted as <bpt id="p1">*</bpt>Last Name, First Name<ept id="p1">*</ept>.</source>
        </trans-unit><trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The dates should be formatted as short dates without timestamps.</source>
        </trans-unit><trans-unit id="112" translate="yes" xml:space="preserve">
          <source>If an order has been fulfilled, the fulfillment date is displayed.</source>
        </trans-unit><trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Otherwise, no fulfillment date should be displayed.</source>
        </trans-unit><trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Each order's unique ID should be displayed.</source>
        </trans-unit><trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Each line item on the order should display the product name and the quantity.</source>
        </trans-unit><trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The client needs to retrieve individual orders by unique ID.</source>
        </trans-unit><trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Your team decides to implement these requirements in the <bpt id="p1">*</bpt>ContosoPets.DataAccess<ept id="p1">*</ept> project.</source>
        </trans-unit><trans-unit id="118" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">*</bpt>Services/OrderService.cs<ept id="p1">*</ept> file of the <bpt id="p2">*</bpt>ContosoPets.DataAccess<ept id="p2">*</ept> project, replace the comment <ph id="ph1">`// Add the ContosoPets.Domain.Models using statement`</ph> with the following code.</source>
        </trans-unit><trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Save your changes.</source>
        </trans-unit><trans-unit id="120" translate="yes" xml:space="preserve">
          <source>In the same <bpt id="p1">*</bpt>OrderService.cs<ept id="p1">*</ept> file, replace the comment <ph id="ph1">`// Add the constructor code`</ph> with the following code.</source>
        </trans-unit><trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Save your changes.</source>
        </trans-unit><trans-unit id="122" translate="yes" xml:space="preserve">
          <source>In the preceding code:</source>
        </trans-unit><trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Constructor injection<ept id="p1">](https://docs.microsoft.com/aspnet/core/mvc/controllers/dependency-injection#constructor-injection)</ept> provides an instance of <ph id="ph1">`ContosoPetsContext`</ph> to the service.</source>
        </trans-unit><trans-unit id="124" translate="yes" xml:space="preserve">
          <source>A read-only field is defined.</source>
        </trans-unit><trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Don't confuse the C# <ph id="ph1">`readonly`</ph> keyword with any read/write capabilities of <ph id="ph2">`ContosoPetsContext`</ph>.</source>
        </trans-unit><trans-unit id="126" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>readonly (C# Reference)<ept id="p1">](https://docs.microsoft.com/dotnet/csharp/language-reference/keywords/readonly#readonly-field-example)</ept>.</source>
        </trans-unit><trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Replace the comment <ph id="ph1">`// Add the GetAll code`</ph> with the following code.</source>
        </trans-unit><trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Save your changes.</source>
        </trans-unit><trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The preceding code retrieves a list of all orders.</source>
        </trans-unit><trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The following actions occur:</source>
        </trans-unit><trans-unit id="131" translate="yes" xml:space="preserve">
          <source>An asynchronous method returns a <ph id="ph1">`Task&lt;List&lt;CustomerOrder&gt;&gt;`</ph>.</source>
        </trans-unit><trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The target entity, <ph id="ph1">`_context.Orders`</ph>, is referenced in the <ph id="ph2">`from`</ph> clause.</source>
        </trans-unit><trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Change tracking of entities is disabled, via <ph id="ph1">`AsNoTracking`</ph>, to denote a read-only query to EF Core.</source>
        </trans-unit><trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The result is reduced overhead and improved performance.</source>
        </trans-unit><trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`select`</ph> clause projects the result set into a <ph id="ph2">`CustomerOrder`</ph> object.</source>
        </trans-unit><trans-unit id="136" translate="yes" xml:space="preserve">
          <source>This practice allows us to shape the result set to satisfy the business requirements.</source>
        </trans-unit><trans-unit id="137" translate="yes" xml:space="preserve">
          <source>In some cases, it may be appropriate to use the domain model without projection, however.</source>
        </trans-unit><trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>See this tutorial for an example<ept id="p1">](https://docs.microsoft.com/aspnet/core/tutorials/razor-pages/)</ept>.</source>
        </trans-unit><trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`orderby`</ph> clause sorts the result set in a descending manner, by the order placed date.</source>
        </trans-unit><trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Each <ph id="ph1">`CustomerOrder`</ph> object's <ph id="ph2">`OrderLineItems`</ph> property in the result set is populated by a nested LINQ query.</source>
        </trans-unit><trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The preceding code retrieves a list of all orders.</source>
        </trans-unit><trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The following actions occur:</source>
        </trans-unit><trans-unit id="143" translate="yes" xml:space="preserve">
          <source>An asynchronous method returns a <ph id="ph1">`Task&lt;List&lt;CustomerOrder&gt;&gt;`</ph>.</source>
        </trans-unit><trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The target entity, <ph id="ph1">`_context.Orders`</ph>, represents all <ph id="ph2">`Order`</ph> entities in the context.</source>
        </trans-unit><trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Change tracking of entities is disabled, via <ph id="ph1">`AsNoTracking`</ph>, to denote a read-only query to EF Core.</source>
        </trans-unit><trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The result is reduced overhead and improved performance.</source>
        </trans-unit><trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`OrderByDescending`</ph> method sorts the results in a descending manner, by the order placed date.</source>
        </trans-unit><trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Select`</ph> method projects the result set into a <ph id="ph2">`CustomerOrder`</ph> object.</source>
        </trans-unit><trans-unit id="149" translate="yes" xml:space="preserve">
          <source>This practice allows us to shape the result set to satisfy the business requirements.</source>
        </trans-unit><trans-unit id="150" translate="yes" xml:space="preserve">
          <source>In some cases, it may be appropriate to use the domain model without projection, however.</source>
        </trans-unit><trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>See this tutorial for an example<ept id="p1">](https://docs.microsoft.com/aspnet/core/tutorials/razor-pages/)</ept>.</source>
        </trans-unit><trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Each <ph id="ph1">`CustomerOrder`</ph> object's <ph id="ph2">`OrderLineItems`</ph> property in the result set is populated by a nested query.</source>
        </trans-unit><trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Replace the comment <ph id="ph1">`// Add the GetById code`</ph> with the following code.</source>
        </trans-unit><trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Save your changes.</source>
        </trans-unit><trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The preceding code allows the client to retrieve an individual order by ID.</source>
        </trans-unit><trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The following actions occur:</source>
        </trans-unit><trans-unit id="157" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`GetOrderById`</ph> method defines how to retrieve an order by ID.</source>
        </trans-unit><trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`IQueryable&lt;T&gt;`</ph> return type indicates the query's intent.</source>
        </trans-unit><trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Query execution is deferred.</source>
        </trans-unit><trans-unit id="160" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`GetById`</ph> method composes on top of the query defined in <ph id="ph2">`GetOrderById`</ph>.</source>
        </trans-unit><trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The result set is projected into a <ph id="ph1">`CustomerOrder`</ph> object.</source>
        </trans-unit><trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The query defined in <ph id="ph1">`GetOrderById`</ph> is finally executed by the call to <ph id="ph2">`FirstOrDefaultAsync`</ph>.</source>
        </trans-unit><trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Replace the comment <ph id="ph1">`// Add the Create code`</ph> with the following code.</source>
        </trans-unit><trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Save your changes.</source>
        </trans-unit><trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The preceding code adds an order to the database.</source>
        </trans-unit><trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The following actions occur:</source>
        </trans-unit><trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Sets the order placed date to the current timestamp in UTC format.</source>
        </trans-unit><trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Asynchronously saves the modified <ph id="ph1">`Order`</ph> object to the database by calling <ph id="ph2">`SaveChangesAsync`</ph>.</source>
        </trans-unit><trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Order`</ph> object modifications exist only in memory.</source>
        </trans-unit><trans-unit id="170" translate="yes" xml:space="preserve">
          <source>When <ph id="ph1">`SaveChangesAsync`</ph> is called, the in-memory object changes are persisted to the database.</source>
        </trans-unit><trans-unit id="171" translate="yes" xml:space="preserve">
          <source>For most Database Providers, calling <ph id="ph1">`SaveChanges`</ph> or <ph id="ph2">`SaveChangesAsync`</ph> creates a database transaction.</source>
        </trans-unit><trans-unit id="172" translate="yes" xml:space="preserve">
          <source>All operations within the transaction either succeed or fail as an atomic unit.</source>
        </trans-unit><trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Returns the completed <ph id="ph1">`Order`</ph> object as represented in the <ph id="ph2">`Orders`</ph> table.</source>
        </trans-unit><trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Replace the comment <ph id="ph1">`// Add the SetFulfilled code`</ph> with the following code.</source>
        </trans-unit><trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Save your changes.</source>
        </trans-unit><trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The preceding code sets the timestamp at which an order was fulfilled.</source>
        </trans-unit><trans-unit id="177" translate="yes" xml:space="preserve">
          <source>One of the following two actions occurs:</source>
        </trans-unit><trans-unit id="178" translate="yes" xml:space="preserve">
          <source>If the order is found, the <ph id="ph1">`OrderFulfilled`</ph> property is set to the current UTC timestamp.</source>
        </trans-unit><trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The modified object is saved to the database, and a value of <ph id="ph1">`true`</ph> is returned.</source>
        </trans-unit><trans-unit id="180" translate="yes" xml:space="preserve">
          <source>If the order isn't found, <ph id="ph1">`false`</ph> is returned.</source>
        </trans-unit><trans-unit id="181" translate="yes" xml:space="preserve">
          <source>When modifying an entity returned by a query with change tracking disabled, it is essential to explicitly set the entity state.</source>
        </trans-unit><trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Otherwise, a call to <ph id="ph1">`SaveChanges`</ph> or <ph id="ph2">`SaveChangesAsync`</ph> doesn't modify the underlying table data.</source>
        </trans-unit><trans-unit id="183" translate="yes" xml:space="preserve">
          <source>In the preceding example, the <ph id="ph1">`Order`</ph> entity is returned in a detached state.</source>
        </trans-unit><trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Removing the <ph id="ph1">`AsNoTracking`</ph> call in the <ph id="ph2">`GetOrderById`</ph> method's query would make explicitly setting the state unnecessary.</source>
        </trans-unit><trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Replace the comment <ph id="ph1">`// Add the Delete code`</ph> with the following code.</source>
        </trans-unit><trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Save your changes.</source>
        </trans-unit><trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The preceding code attempts to delete the <ph id="ph1">`Order`</ph> specified by the <ph id="ph2">`id`</ph> parameter.</source>
        </trans-unit><trans-unit id="188" translate="yes" xml:space="preserve">
          <source>One of the following two actions occurs:</source>
        </trans-unit><trans-unit id="189" translate="yes" xml:space="preserve">
          <source>If the order is found, the parent record in the <ph id="ph1">`Orders`</ph> table and all children in <ph id="ph2">`ProductOrders`</ph> are deleted from the database.</source>
        </trans-unit><trans-unit id="190" translate="yes" xml:space="preserve">
          <source>A value of <ph id="ph1">`true`</ph> is returned.</source>
        </trans-unit><trans-unit id="191" translate="yes" xml:space="preserve">
          <source>If order isn't found, <ph id="ph1">`false`</ph> is returned.</source>
        </trans-unit></group></body></file></xliff>