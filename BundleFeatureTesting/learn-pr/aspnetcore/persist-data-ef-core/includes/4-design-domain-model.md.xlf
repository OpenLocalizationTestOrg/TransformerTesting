<?xml version="1.0"?><xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd"><file datatype="xml" original="4-design-domain-model.md" source-language="en-US" target-language="en-US"><header><tool tool-id="mdxliff" tool-name="mdxliff"  tool-company="Microsoft" /><xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4-design-domain-model.a9dc91.9aedd68e7cdb9e7bc6ccf8b0aa41f318d830ee50.skl</xliffext:skl_file_name><xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version><xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9aedd68e7cdb9e7bc6ccf8b0aa41f318d830ee50</xliffext:ms.openlocfilehash><xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ba7e452ac39d7f09a5646044b44de0e1cdc54982</xliffext:ms.sourcegitcommit><xliffext:ms.openlocfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">learn-pr\aspnetcore\persist-data-ef-core\includes\4-design-domain-model.md</xliffext:ms.openlocfilepath></header><body><group id="content" extype="content"><trans-unit id="101" translate="yes" xml:space="preserve">
          <source>In this unit, you'll create C# entity classes that will map to tables in the <bpt id="p1">*</bpt>ContosoPets<ept id="p1">*</ept> Azure SQL database.</source>
        </trans-unit><trans-unit id="102" translate="yes" xml:space="preserve">
          <source>EF migrations will produce tables from those entities.</source>
        </trans-unit><trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Migrations provide a way to incrementally update the database schema.</source>
        </trans-unit><trans-unit id="104" translate="yes" xml:space="preserve">
          <source>As is true with ASP.NET Core MVC, EF Core adopts a <bpt id="p1">*</bpt>convention over configuration<ept id="p1">*</ept> philosophy.</source>
        </trans-unit><trans-unit id="105" translate="yes" xml:space="preserve">
          <source>EF Core conventions shorten development time by inferring the developer's intent.</source>
        </trans-unit><trans-unit id="106" translate="yes" xml:space="preserve">
          <source>For example, a property named <ph id="ph1">`Id`</ph> or <ph id="ph2">`&lt;entity name&gt;Id`</ph> is inferred to be the generated table's primary key.</source>
        </trans-unit><trans-unit id="107" translate="yes" xml:space="preserve">
          <source>If you choose not to adopt the naming convention, the property must be annotated with the <ph id="ph1">`[Key]`</ph> attribute.</source>
        </trans-unit><trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Run the following command to create new files to store entity model classes:</source>
        </trans-unit><trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The preceding command:</source>
        </trans-unit><trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Navigates to the <bpt id="p1">*</bpt>Models<ept id="p1">*</ept> directory of the <bpt id="p2">*</bpt>ContosoPets.Domain<ept id="p2">*</ept> project.</source>
        </trans-unit><trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Creates files named <bpt id="p1">*</bpt>Product.cs<ept id="p1">*</ept>, <bpt id="p2">*</bpt>ProductOrder.cs<ept id="p2">*</ept>, <bpt id="p3">*</bpt>Order.cs<ept id="p3">*</ept>, and <bpt id="p4">*</bpt>Customer.cs<ept id="p4">*</ept> in the <bpt id="p5">*</bpt>Models<ept id="p5">*</ept> directory.</source>
        </trans-unit><trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Navigates back to the root of the <bpt id="p1">*</bpt>ContosoPets.Api<ept id="p1">*</ept> project.</source>
        </trans-unit><trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The newly created files will ultimately support generation of the following database structure:</source>
        </trans-unit><trans-unit id="114" translate="yes" xml:space="preserve">
          <source>database diagram</source>
        </trans-unit><trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The following one-to-many relationships will exist:</source>
        </trans-unit><trans-unit id="116" translate="yes" xml:space="preserve">
          <source>A customer may have one or more orders.</source>
        </trans-unit><trans-unit id="117" translate="yes" xml:space="preserve">
          <source>An order may have one or many products.</source>
        </trans-unit><trans-unit id="118" translate="yes" xml:space="preserve">
          <source>A product may belong to one or many orders.</source>
        </trans-unit><trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The following table depicts the foreign key relationships that will be created.</source>
        </trans-unit><trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Dependent entity</source>
        </trans-unit><trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Principal entity</source>
        </trans-unit><trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Foreign key property</source>
        </trans-unit><trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Orders</source>
        </trans-unit><trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Customers</source>
        </trans-unit><trans-unit id="125" translate="yes" xml:space="preserve">
          <source>CustomerId</source>
        </trans-unit><trans-unit id="126" translate="yes" xml:space="preserve">
          <source>ProductOrders</source>
        </trans-unit><trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Orders</source>
        </trans-unit><trans-unit id="128" translate="yes" xml:space="preserve">
          <source>OrderId</source>
        </trans-unit><trans-unit id="129" translate="yes" xml:space="preserve">
          <source>ProductOrders</source>
        </trans-unit><trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Products</source>
        </trans-unit><trans-unit id="131" translate="yes" xml:space="preserve">
          <source>ProductId</source>
        </trans-unit><trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>Product.cs<ept id="p1">*</ept>, <bpt id="p2">*</bpt>ProductOrder.cs<ept id="p2">*</ept>, <bpt id="p3">*</bpt>Order.cs<ept id="p3">*</ept>, and <bpt id="p4">*</bpt>Customer.cs<ept id="p4">*</ept> files appear in the <bpt id="p5">*</bpt>ContosoPets.Domain/Models<ept id="p5">*</ept> folder.</source>
        </trans-unit><trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Add the following code to <bpt id="p1">*</bpt>Models/Product.cs<ept id="p1">*</ept>.</source>
        </trans-unit><trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Save your changes.</source>
        </trans-unit><trans-unit id="135" translate="yes" xml:space="preserve">
          <source>In the preceding code:</source>
        </trans-unit><trans-unit id="136" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`Product`</ph> entity is defined to represent a table for storing product data.</source>
        </trans-unit><trans-unit id="137" translate="yes" xml:space="preserve">
          <source>By convention, the <ph id="ph1">`Id`</ph> property is used as the primary key column name.</source>
        </trans-unit><trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`[Required]`</ph> attribute is applied to the <ph id="ph2">`Name`</ph> property.</source>
        </trans-unit><trans-unit id="139" translate="yes" xml:space="preserve">
          <source>As a result, the associated column in the generated <ph id="ph1">`Products`</ph> table is assigned a <ph id="ph2">`not null`</ph> constraint.</source>
        </trans-unit><trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`[Column]`</ph> attribute is applied to the <ph id="ph2">`Price`</ph> property.</source>
        </trans-unit><trans-unit id="141" translate="yes" xml:space="preserve">
          <source>As a result, the associated column in the generated <ph id="ph1">`Products`</ph> table is assigned a <ph id="ph2">`decimal(18,2)`</ph> SQL Server column data type.</source>
        </trans-unit><trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Defining the specific data type prevents loss of precision.</source>
        </trans-unit><trans-unit id="143" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">*</bpt>navigation property<ept id="p1">*</ept>, named <ph id="ph1">`ProductOrders`</ph>, is defined on the principal entity <ph id="ph2">`Product`</ph>.</source>
        </trans-unit><trans-unit id="144" translate="yes" xml:space="preserve">
          <source>A navigation property contains a reference to a related entity and enables loading of related entities without explicitly joining them in a query.</source>
        </trans-unit><trans-unit id="145" translate="yes" xml:space="preserve">
          <source>A one-to-many relationship is established between the <ph id="ph1">`Product`</ph> entity and the <ph id="ph2">`ProductOrder`</ph> entity.</source>
        </trans-unit><trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Add the following code to <bpt id="p1">*</bpt>Models/ProductOrder.cs<ept id="p1">*</ept>.</source>
        </trans-unit><trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Save your changes.</source>
        </trans-unit><trans-unit id="148" translate="yes" xml:space="preserve">
          <source>In the preceding code:</source>
        </trans-unit><trans-unit id="149" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`ProductOrder`</ph> entity is defined to represent an <bpt id="p1">*</bpt>intersection table<ept id="p1">*</ept>.</source>
        </trans-unit><trans-unit id="150" translate="yes" xml:space="preserve">
          <source>An intersection table models a many-to-many relationship between two tables.</source>
        </trans-unit><trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Every order is associated with one or more products.</source>
        </trans-unit><trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Each product can belong to multiple orders.</source>
        </trans-unit><trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Order`</ph> and <ph id="ph2">`Product`</ph> navigation properties represent foreign key relationships to be created in the database.</source>
        </trans-unit><trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The generated <ph id="ph1">`ProductOrders`</ph> table will contain foreign key columns named <ph id="ph2">`OrderId`</ph> and <ph id="ph3">`ProductId`</ph> to establish this relationship.</source>
        </trans-unit><trans-unit id="155" translate="yes" xml:space="preserve">
          <source>As a best practice, the <ph id="ph1">`OrderId`</ph> and <ph id="ph2">`ProductId`</ph> properties are included.</source>
        </trans-unit><trans-unit id="156" translate="yes" xml:space="preserve">
          <source>If the properties aren't included, EF Core infers their inclusion in the entity as <bpt id="p1">*</bpt>shadow properties<ept id="p1">*</ept>.</source>
        </trans-unit><trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Shadow properties aren't defined in the entity but are defined in the generated EF Core model.</source>
        </trans-unit><trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Add the following code to <bpt id="p1">*</bpt>Models/Customer.cs<ept id="p1">*</ept>.</source>
        </trans-unit><trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Save your changes.</source>
        </trans-unit><trans-unit id="160" translate="yes" xml:space="preserve">
          <source>In the preceding code:</source>
        </trans-unit><trans-unit id="161" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`Customer`</ph> entity is defined to represent a table for storing customer data.</source>
        </trans-unit><trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`[Required]`</ph> attribute is applied to the <ph id="ph2">`FirstName`</ph> and <ph id="ph3">`LastName`</ph> properties.</source>
        </trans-unit><trans-unit id="163" translate="yes" xml:space="preserve">
          <source>As a result, the associated columns in the generated <ph id="ph1">`Customers`</ph> table are each assigned a <ph id="ph2">`not null`</ph> constraint.</source>
        </trans-unit><trans-unit id="164" translate="yes" xml:space="preserve">
          <source>A navigation property named <ph id="ph1">`Orders`</ph> is defined on the principal entity <ph id="ph2">`Customer`</ph>.</source>
        </trans-unit><trans-unit id="165" translate="yes" xml:space="preserve">
          <source>A one-to-many relationship is established between the <ph id="ph1">`Customer`</ph> entity and the <ph id="ph2">`Order`</ph> entity.</source>
        </trans-unit><trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Add the following code to <bpt id="p1">*</bpt>Models/Order.cs<ept id="p1">*</ept>.</source>
        </trans-unit><trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Save your changes.</source>
        </trans-unit><trans-unit id="168" translate="yes" xml:space="preserve">
          <source>In the preceding code:</source>
        </trans-unit><trans-unit id="169" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">`Order`</ph> entity is defined to represent a table for storing order data.</source>
        </trans-unit><trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`OrderFulfilled`</ph> property is declared as a nullable <ph id="ph2">`DateTime`</ph> type.</source>
        </trans-unit><trans-unit id="171" translate="yes" xml:space="preserve">
          <source>As a result, the associated column in the generated <ph id="ph1">`Orders`</ph> table is assigned a <ph id="ph2">`null`</ph> constraint and uses the <ph id="ph3">`datetime2(7)`</ph> SQL Server data type.</source>
        </trans-unit><trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Navigation properties, named <ph id="ph1">`Customer`</ph> and <ph id="ph2">`ProductOrders`</ph>, are defined on the principal entity <ph id="ph3">`Order`</ph>.</source>
        </trans-unit><trans-unit id="173" translate="yes" xml:space="preserve">
          <source>A one-to-many relationship is established between the <ph id="ph1">`Customer`</ph> entity and the <ph id="ph2">`Order`</ph> entity.</source>
        </trans-unit><trans-unit id="174" translate="yes" xml:space="preserve">
          <source>A one-to-many relationship is established between the <ph id="ph1">`Order`</ph> entity and the <ph id="ph2">`ProductOrder`</ph> entity.</source>
        </trans-unit><trans-unit id="175" translate="yes" xml:space="preserve">
          <source>In <bpt id="p1">*</bpt>ContosoPets.DataAccess/Data/ContosoPetsContext.cs<ept id="p1">*</ept>, replace the <ph id="ph1">`// Add the DbSet&lt;T&gt; properties`</ph> comment with the following code.</source>
        </trans-unit><trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Save your changes.</source>
        </trans-unit><trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`DbSet&lt;T&gt;`</ph> properties correspond to tables to be created in the database.</source>
        </trans-unit><trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The table names will match the <ph id="ph1">`DbSet&lt;T&gt;`</ph> property names in the <ph id="ph2">`ContosoPetsContext`</ph> class.</source>
        </trans-unit><trans-unit id="179" translate="yes" xml:space="preserve">
          <source>In <bpt id="p1">*</bpt>ContosoPetsContext.cs<ept id="p1">*</ept>, replace the <ph id="ph1">`// Add the ContosoPets.Domain.Models using statement`</ph> comment with the following code.</source>
        </trans-unit><trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Save your changes.</source>
        </trans-unit><trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Inclusion of the preceding namespace resolves the <ph id="ph1">`DbSet&lt;T&gt;`</ph> references in the previous step.</source>
        </trans-unit><trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Run the following command to generate a migration for creating the database tables:</source>
        </trans-unit><trans-unit id="183" translate="yes" xml:space="preserve">
          <source>In the preceding command:</source>
        </trans-unit><trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The migration is given a name of <bpt id="p1">*</bpt>InitialCreate<ept id="p1">*</ept>.</source>
        </trans-unit><trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`--project`</ph> option provides the location of the project to be used for creating the migration.</source>
        </trans-unit><trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`--context`</ph> option specifies the name of the class in the <bpt id="p1">*</bpt>ContosoPets.DataAccess<ept id="p1">*</ept> project, which derives from <ph id="ph2">`DbContext`</ph>.</source>
        </trans-unit><trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Refresh file explorer.</source>
        </trans-unit><trans-unit id="188" translate="yes" xml:space="preserve">
          <source>A new <bpt id="p1">*</bpt>Migrations<ept id="p1">*</ept> directory appears in the <bpt id="p2">*</bpt>ContosoPets.DataAccess<ept id="p2">*</ept> project root.</source>
        </trans-unit><trans-unit id="189" translate="yes" xml:space="preserve">
          <source>The directory contains a <bpt id="p1">*</bpt><ph id="ph1">\&lt;</ph>timestamp&gt;_InitialCreate.cs<ept id="p1">*</ept> file describing database changes to be translated to a Data Definition Language (DDL) change script.</source>
        </trans-unit><trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Run the following command to apply the <bpt id="p1">*</bpt>InitialCreate<ept id="p1">*</ept> migration:</source>
        </trans-unit><trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Execution of the preceding command results in DDL changes within the Azure SQL database.</source>
        </trans-unit><trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Run the following command to list the tables in the Azure SQL database:</source>
        </trans-unit><trans-unit id="193" translate="yes" xml:space="preserve">
          <source>The following output appears, which confirms the <bpt id="p1">*</bpt>InitialCreate<ept id="p1">*</ept> migration successfully created the tables.</source>
        </trans-unit><trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Run the following command to list the primary key and foreign key constraints on tables in the Azure SQL database:</source>
        </trans-unit><trans-unit id="195" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>listkeys.sql<ept id="p1">*</ept> script referenced in the preceding command uses the <ph id="ph1">`sp_pkeys`</ph> and <ph id="ph2">`sp_fkeys`</ph> system stored procedures in the database.</source>
        </trans-unit><trans-unit id="196" translate="yes" xml:space="preserve">
          <source>The following result set appears:</source>
        </trans-unit><trans-unit id="197" translate="yes" xml:space="preserve">
          <source>EF Core's primary key and foreign key constraint naming conventions are <ph id="ph1">`PK_&lt;Primary key property&gt;`</ph> and <ph id="ph2">`FK_&lt;Dependent entity&gt;_&lt;Principal entity&gt;_&lt;Foreign key property&gt;`</ph>, respectively.</source>
        </trans-unit><trans-unit id="198" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`&lt;Dependent entity&gt;`</ph> and <ph id="ph2">`&lt;Principal entity&gt;`</ph> placeholders correspond to the entity class names.</source>
        </trans-unit></group></body></file></xliff>