<?xml version="1.0"?><xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd"><file datatype="xml" original="3-add-data-store.md" source-language="en-US" target-language="en-US"><header><tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1931010" tool-company="Microsoft" /><xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3-add-data-store.958c45299a4c6a54d326f534e7110e63ed6b7cd2.skl</xliffext:skl_file_name><xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version><xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">875683987a87bb16b414e54c9924d776777142a2</xliffext:ms.openlocfilehash><xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/24/2019</xliffext:ms.lasthandoff><xliffext:ms.openlocfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">learn-pr\aspnetcore\build-web-api-net-core\includes\3-add-data-store.md</xliffext:ms.openlocfilepath></header><body><group id="content" extype="content"><trans-unit id="101" translate="yes" xml:space="preserve">
          <source>A type of class called a <bpt id="p1">*</bpt>Model<ept id="p1">*</ept> is needed to represent a dog toy in inventory.</source>
        </trans-unit><trans-unit id="102" translate="yes" xml:space="preserve">
          <source>The Model must include the properties of a product and is used to pass data in the web API.</source>
        </trans-unit><trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The Model is also used to persist dog toys in a data store.</source>
        </trans-unit><trans-unit id="104" translate="yes" xml:space="preserve">
          <source>In this unit, that data store will be created as an <bpt id="p1">[</bpt>in-memory EF Core database<ept id="p1">](https://docs.microsoft.com/ef/core/providers/in-memory/)</ept>.</source>
        </trans-unit><trans-unit id="105" translate="yes" xml:space="preserve">
          <source>An in-memory database is used in this unit for simplicity.</source>
        </trans-unit><trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Choose a different data store for production environments, such as SQL Server or Azure SQL Database.</source>
        </trans-unit><trans-unit id="107" translate="yes" xml:space="preserve">
          <source>If the Cloud Shell session ever times out or disconnects, reconnect and run the following command after reconnecting to set the working directory to <bpt id="p1">*</bpt>~/contoso-pets/src/ContosoPets.Api<ept id="p1">*</ept> and launch the editor:</source>
        </trans-unit><trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Run the following command:</source>
        </trans-unit><trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`touch`</ph> command is specific to Linux, the Cloud Shell's underlying OS.</source>
        </trans-unit><trans-unit id="110" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">*</bpt>Models<ept id="p1">*</ept> directory is created in the project root with an empty <bpt id="p2">*</bpt>Product.cs<ept id="p2">*</ept> file.</source>
        </trans-unit><trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The directory name <bpt id="p1">*</bpt>Models<ept id="p1">*</ept> is a convention.</source>
        </trans-unit><trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The directory name comes from the <bpt id="p1">**</bpt>Model<ept id="p1">**</ept>-View-Controller architecture used by the web API.</source>
        </trans-unit><trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>Models<ept id="p1">*</ept> directory and its <bpt id="p2">*</bpt>Product.cs<ept id="p2">*</ept> file appear.</source>
        </trans-unit><trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Add the following code to <bpt id="p1">*</bpt>Models/Product.cs<ept id="p1">*</ept> to define a product.</source>
        </trans-unit><trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Save your changes.</source>
        </trans-unit><trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Name`</ph> and <ph id="ph2">`Price`</ph> properties are marked as required to ensure values are provided when creating a <ph id="ph3">`Product`</ph> object.</source>
        </trans-unit><trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Additionally, the <ph id="ph1">`Price`</ph> property enforces minimum and maximum values.</source>
        </trans-unit><trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Run the following command:</source>
        </trans-unit><trans-unit id="119" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">*</bpt>Data<ept id="p1">*</ept> directory is created in the project root with empty <bpt id="p2">*</bpt>ContosoPetsContext.cs<ept id="p2">*</ept> and <bpt id="p3">*</bpt>SeedData.cs<ept id="p3">*</ept> files.</source>
        </trans-unit><trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Refresh file explorer, and add the following code to <bpt id="p1">*</bpt>Data/ContosoPetsContext.cs<ept id="p1">*</ept>.</source>
        </trans-unit><trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Save your changes.</source>
        </trans-unit><trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The preceding code creates a Contoso Pets-specific implementation of an EF Core <ph id="ph1">`DbContext`</ph> object.</source>
        </trans-unit><trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`ContosoPetsContext`</ph> class provides access to an in-memory database, as configured in the next step.</source>
        </trans-unit><trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Add the following highlighted code to the <bpt id="p1">*</bpt>Startup.cs<ept id="p1">*</ept> file's <ph id="ph1">`ConfigureServices`</ph> method.</source>
        </trans-unit><trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Save your changes.</source>
        </trans-unit><trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The preceding code:</source>
        </trans-unit><trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Registers the custom <ph id="ph1">`DbContext`</ph> class, named <ph id="ph2">`ContosoPetsContext`</ph>, with ASP.NET Core's <bpt id="p1">[</bpt>dependency injection<ept id="p1">](https://docs.microsoft.com/aspnet/core/fundamentals/dependency-injection)</ept> system.</source>
        </trans-unit><trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Defines an in-memory database named <bpt id="p1">*</bpt>ContosoPets<ept id="p1">*</ept>.</source>
        </trans-unit><trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Add the following code to the top of <bpt id="p1">*</bpt>Startup.cs<ept id="p1">*</ept>.</source>
        </trans-unit><trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Save your changes.</source>
        </trans-unit><trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Microsoft.EntityFrameworkCore`</ph> namespace resolves the <ph id="ph2">`UseInMemoryDatabase`</ph> method call.</source>
        </trans-unit><trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`ContosoPets.Api.Data`</ph> namespace resolves the <ph id="ph2">`ContosoPetsContext`</ph> reference.</source>
        </trans-unit><trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Add the following code to <bpt id="p1">*</bpt>Data/SeedData.cs<ept id="p1">*</ept>.</source>
        </trans-unit><trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Save your changes.</source>
        </trans-unit><trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The preceding code defines a static <ph id="ph1">`SeedData`</ph> class.</source>
        </trans-unit><trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The class's <ph id="ph1">`Initialize`</ph> method seeds the in-memory database with two dog toys.</source>
        </trans-unit><trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Replace the code in <bpt id="p1">*</bpt>Program.cs<ept id="p1">*</ept> with the following code.</source>
        </trans-unit><trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Save your changes.</source>
        </trans-unit><trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Program.Main`</ph> method is the first code to execute when the app starts.</source>
        </trans-unit><trans-unit id="140" translate="yes" xml:space="preserve">
          <source>With the preceding changes, seeding of the in-memory database is triggered via a call to <ph id="ph1">`SeedData.Initialize`</ph>.</source>
        </trans-unit><trans-unit id="141" translate="yes" xml:space="preserve">
          <source>This database seeding strategy isn't recommended in a production environment.</source>
        </trans-unit><trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Consider seeding during database deployment instead.</source>
        </trans-unit><trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Product`</ph> Model and <ph id="ph2">`ContosoPetsContext`</ph> class will be used by the controller created in the next unit.</source>
        </trans-unit></group></body></file></xliff>