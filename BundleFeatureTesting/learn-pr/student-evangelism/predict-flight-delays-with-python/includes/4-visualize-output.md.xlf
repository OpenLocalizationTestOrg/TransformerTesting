<?xml version="1.0"?><xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd"><file datatype="xml" original="4-visualize-output.md" source-language="en-US" target-language="en-US"><header><tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1931010" tool-company="Microsoft" /><xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4-visualize-output.c38f00b9769010030c710cfc8aa5d004a9b7a4e8.skl</xliffext:skl_file_name><xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version><xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">64608f15a27fe8478092ed4744c5d26ca4d8cf9d</xliffext:ms.openlocfilehash><xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">05/13/2019</xliffext:ms.lasthandoff><xliffext:ms.openlocfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">learn-pr\student-evangelism\predict-flight-delays-with-python\includes\4-visualize-output.md</xliffext:ms.openlocfilepath></header><body><group id="content" extype="content"><trans-unit id="101" translate="yes" xml:space="preserve">
          <source>In this unit, you'll import Matplotlib into the notebook you've been working with and configure the notebook to support inline Matplotlib output.</source>
        </trans-unit><trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Switch back to the Azure notebook that you created in the previous section.</source>
        </trans-unit><trans-unit id="103" translate="yes" xml:space="preserve">
          <source>If you closed the notebook, you can sign back into the <bpt id="p1">[</bpt>Microsoft Azure Notebooks portal<ept id="p1">](https://notebooks.azure.com?azure-portal=true)</ept>, open your notebook, and use the <bpt id="p2">**</bpt>Cell<ept id="p2">**</ept><ph id="ph1"> -&gt; </ph><bpt id="p3">**</bpt>Run All<ept id="p3">**</ept> to rerun the all of the cells in the notebook after opening it.</source>
        </trans-unit><trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Execute the following statements in a new cell at the end of the notebook.</source>
        </trans-unit><trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Ignore any warning messages that are displayed related to font caching:</source>
        </trans-unit><trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The first statement is one of several <bpt id="p1">[</bpt>magic commands<ept id="p1">](http://ipython.readthedocs.io/en/stable/interactive/magics.html)</ept> supported by the Python kernel that you selected when you created the notebook.</source>
        </trans-unit><trans-unit id="107" translate="yes" xml:space="preserve">
          <source>It enables Jupyter to render Matplotlib output in a notebook without making repeated calls to <bpt id="p1">[</bpt>show<ept id="p1">](https://matplotlib.org/devdocs/api/_as_gen/matplotlib.pyplot.show.html)</ept>.</source>
        </trans-unit><trans-unit id="108" translate="yes" xml:space="preserve">
          <source>And it must appear before any references to Matplotlib itself.</source>
        </trans-unit><trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The final statement configures <bpt id="p1">[</bpt>Seaborn<ept id="p1">](https://seaborn.pydata.org/)</ept> to enhance the output from Matplotlib.</source>
        </trans-unit><trans-unit id="110" translate="yes" xml:space="preserve">
          <source>To see Matplotlib at work, execute the following code in a new cell to plot the <bpt id="p1">[</bpt>ROC curve<ept id="p1">](https://en.wikipedia.org/wiki/Receiver_operating_characteristic)</ept> for the machine-learning model you built in the previous lab:</source>
        </trans-unit><trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Confirm that you see the following output:</source>
        </trans-unit><trans-unit id="112" translate="yes" xml:space="preserve">
          <source>ROC curve generated with Matplotlib</source>
        </trans-unit><trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">_</bpt>ROC curve generated with Matplotlib<ept id="p1">_</ept></source>
        </trans-unit><trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The dotted line in the middle of the graph represents a 50-50 chance of obtaining a correct answer.</source>
        </trans-unit><trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The blue curve represents the accuracy of your model.</source>
        </trans-unit><trans-unit id="116" translate="yes" xml:space="preserve">
          <source>More importantly, the fact that this chart appears at all demonstrates that you can use Matplotlib in a Jupyter notebook.</source>
        </trans-unit><trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The reason you built a machine-learning model is to predict whether a flight will arrive on time or late.</source>
        </trans-unit><trans-unit id="118" translate="yes" xml:space="preserve">
          <source>In this exercise, you'll write a Python function that calls the machine-learning model you built in the previous lab to compute the likelihood that a flight will be on time.</source>
        </trans-unit><trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Then you'll use the function to analyze several flights.</source>
        </trans-unit><trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Enter the following function definition in a new cell, and then run the cell.</source>
        </trans-unit><trans-unit id="121" translate="yes" xml:space="preserve">
          <source>This function takes as input a date and time, an origin airport code, and a destination airport code, and returns a value between 0.0 and 1.0 indicating the probability that the flight will arrive at its destination on time.</source>
        </trans-unit><trans-unit id="122" translate="yes" xml:space="preserve">
          <source>It uses the machine-learning model you built in the previous lab to compute the probability.</source>
        </trans-unit><trans-unit id="123" translate="yes" xml:space="preserve">
          <source>And to call the model, it passes a DataFrame containing the input values to <ph id="ph1">`predict_proba`</ph>.</source>
        </trans-unit><trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The structure of the DataFrame exactly matches the structure of the DataFrame we used earlier.</source>
        </trans-unit><trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Date input to the <ph id="ph1">`predict_delay`</ph> function use the international date format <ph id="ph2">`dd/mm/year`</ph>.</source>
        </trans-unit><trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Use the code below to compute the probability that a flight from New York to Atlanta on the evening of October 1 will arrive on time.</source>
        </trans-unit><trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The year you enter is irrelevant because it isn't used by the model.</source>
        </trans-unit><trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Confirm that the output shows that the likelihood of an on-time arrival is 60%:</source>
        </trans-unit><trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Predicting whether a flight will arrive on time</source>
        </trans-unit><trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">_</bpt>Predicting whether a flight will arrive on time<ept id="p1">_</ept></source>
        </trans-unit><trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Modify the code to compute the probability that the same flight a day later will arrive on time:</source>
        </trans-unit><trans-unit id="132" translate="yes" xml:space="preserve">
          <source>How likely is this flight to arrive on time?</source>
        </trans-unit><trans-unit id="133" translate="yes" xml:space="preserve">
          <source>If your travel plans were flexible, would you consider postponing your trip for one day?</source>
        </trans-unit><trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Now modify the code to compute the probability that a morning flight the same day from Atlanta to Seattle will arrive on time:</source>
        </trans-unit><trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Is this flight likely to arrive on time?</source>
        </trans-unit><trans-unit id="136" translate="yes" xml:space="preserve">
          <source>You now have an easy way to predict, with a single line of code, whether a flight is likely to be on time or late.</source>
        </trans-unit><trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Feel free to experiment with other dates, times, origins, and destinations.</source>
        </trans-unit><trans-unit id="138" translate="yes" xml:space="preserve">
          <source>But keep in mind that the results are only meaningful for the airport codes ATL, DTW, JFK, MSP, and SEA because those are the only airport codes the model was trained with.</source>
        </trans-unit><trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Execute the following code to plot the probability of on-time arrivals for an evening flight from JFK to ATL over a range of days:</source>
        </trans-unit><trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Confirm that the output looks like this:</source>
        </trans-unit><trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Probability of on-time arrivals for a range of dates</source>
        </trans-unit><trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">_</bpt>Probability of on-time arrivals for a range of dates<ept id="p1">_</ept></source>
        </trans-unit><trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Modify the code to produce a similar chart for flights leaving JFK for MSP at 1:00 p.m.</source>
        </trans-unit><trans-unit id="144" translate="yes" xml:space="preserve">
          <source>on April 10 through April 16.</source>
        </trans-unit><trans-unit id="145" translate="yes" xml:space="preserve">
          <source>How does the output compare to the output in the previous step?</source>
        </trans-unit><trans-unit id="146" translate="yes" xml:space="preserve">
          <source>On your own, write code to graph the probability that flights leaving SEA for ATL at 9:00 a.m., noon, 3:00 p.m., 6:00 p.m., and 9:00 p.m.</source>
        </trans-unit><trans-unit id="147" translate="yes" xml:space="preserve">
          <source>on January 30 will arrive on time.</source>
        </trans-unit><trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Confirm that the output matches this:</source>
        </trans-unit><trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Probability of on-time arrivals for a range of times</source>
        </trans-unit><trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1">_</bpt>Probability of on-time arrivals for a range of times<ept id="p1">_</ept></source>
        </trans-unit><trans-unit id="151" translate="yes" xml:space="preserve">
          <source>If you are new to Matplotlib and would like to learn more about it, you will find an excellent tutorial at <ph id="ph1">&lt;https://www.labri.fr/perso/nrougier/teaching/matplotlib/.&gt;</ph> There is <bpt id="p1">*</bpt>much<ept id="p1">*</ept> more to Matplotlib than what was shown here, which is one reason why it is so popular in the Python community.</source>
        </trans-unit></group></body></file></xliff>