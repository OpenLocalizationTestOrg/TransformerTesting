<?xml version="1.0"?><xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd"><file datatype="xml" original="2-clean-and-prepare-data.md" source-language="en-US" target-language="en-US"><header><tool tool-id="mdxliff" tool-name="mdxliff"  tool-company="Microsoft" /><xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2-clean-and-prepare-data.da12f2.4fb86e67d094b1c7df06b5ae705e1785fcd8ab43.skl</xliffext:skl_file_name><xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version><xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4fb86e67d094b1c7df06b5ae705e1785fcd8ab43</xliffext:ms.openlocfilehash><xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ba7e452ac39d7f09a5646044b44de0e1cdc54982</xliffext:ms.sourcegitcommit><xliffext:ms.openlocfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">learn-pr\student-evangelism\predict-flight-delays-with-python\includes\2-clean-and-prepare-data.md</xliffext:ms.openlocfilepath></header><body><group id="content" extype="content"><trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Before you can prepare a dataset, you need to understand its content and structure.</source>
        </trans-unit><trans-unit id="102" translate="yes" xml:space="preserve">
          <source>In the previous lab, you imported a dataset containing on-time arrival information for a major U.S. airline.</source>
        </trans-unit><trans-unit id="103" translate="yes" xml:space="preserve">
          <source>That data included 26 columns and thousands of rows, with each row representing one flight and containing information such as the flight's origin, destination, and scheduled departure time.</source>
        </trans-unit><trans-unit id="104" translate="yes" xml:space="preserve">
          <source>You also loaded the data into a Jupyter notebook and used a simple Python script to create a Pandas DataFrame from it.</source>
        </trans-unit><trans-unit id="105" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>DataFrame<ept id="p1">](https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.html)</ept> is a two-dimensional labeled data structure.</source>
        </trans-unit><trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The columns in a DataFrame can be of different types, just like columns in a spreadsheet or database table.</source>
        </trans-unit><trans-unit id="107" translate="yes" xml:space="preserve">
          <source>It is the most commonly used object in Pandas.</source>
        </trans-unit><trans-unit id="108" translate="yes" xml:space="preserve">
          <source>In this exercise, you will examine the DataFrame — and the data inside it — more closely.</source>
        </trans-unit><trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Switch back to the Azure notebook that you created in the previous section.</source>
        </trans-unit><trans-unit id="110" translate="yes" xml:space="preserve">
          <source>If you closed the notebook, you can sign back into the <bpt id="p1">[</bpt>Microsoft Azure Notebooks portal<ept id="p1">](https://notebooks.azure.com?azure-portal=true)</ept>, open your notebook and use the <bpt id="p2">**</bpt>Cell<ept id="p2">**</ept><ph id="ph1"> -&gt; </ph><bpt id="p3">**</bpt>Run All<ept id="p3">**</ept> to rerun the all of the cells in the notebook after opening it.</source>
        </trans-unit><trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The FlightData notebook</source>
        </trans-unit><trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">_</bpt>The FlightData notebook<ept id="p1">_</ept></source>
        </trans-unit><trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The code that you added to the notebook in the previous lab creates a DataFrame from <bpt id="p1">**</bpt>flightdata.csv<ept id="p1">**</ept> and calls <bpt id="p2">[</bpt>DataFrame.head<ept id="p2">](https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.head.html)</ept> on it to display the first five rows.</source>
        </trans-unit><trans-unit id="114" translate="yes" xml:space="preserve">
          <source>One of the first things you typically want to know about a dataset is how many rows it contains.</source>
        </trans-unit><trans-unit id="115" translate="yes" xml:space="preserve">
          <source>To get a count, type the following statement into an empty cell at the end of the notebook and run it:</source>
        </trans-unit><trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Confirm that the DataFrame contains 11,231 rows and 26 columns:</source>
        </trans-unit><trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Getting a row and column count</source>
        </trans-unit><trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">_</bpt>Getting a row and column count<ept id="p1">_</ept></source>
        </trans-unit><trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Now take a moment to examine the 26 columns in the dataset.</source>
        </trans-unit><trans-unit id="120" translate="yes" xml:space="preserve">
          <source>They contain important information such as the date that the flight took place (YEAR, MONTH, and DAY_OF_MONTH), the origin and destination (ORIGIN and DEST), the scheduled departure and arrival times (CRS_DEP_TIME and CRS_ARR_TIME), the difference between the scheduled arrival time and the actual arrival time in minutes (ARR_DELAY), and whether the flight was late by 15 minutes or more (ARR_DEL15).</source>
        </trans-unit><trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Here is a complete list of the columns in the dataset.</source>
        </trans-unit><trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Times are expressed in 24-hour military time.</source>
        </trans-unit><trans-unit id="123" translate="yes" xml:space="preserve">
          <source>For example, 1130 equals 11:30 a.m.</source>
        </trans-unit><trans-unit id="124" translate="yes" xml:space="preserve">
          <source>and 1500 equals 3:00 p.m.</source>
        </trans-unit><trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Column</source>
        </trans-unit><trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit><trans-unit id="127" translate="yes" xml:space="preserve">
          <source>YEAR</source>
        </trans-unit><trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Year that the flight took place</source>
        </trans-unit><trans-unit id="129" translate="yes" xml:space="preserve">
          <source>QUARTER</source>
        </trans-unit><trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Quarter that the flight took place (1-4)</source>
        </trans-unit><trans-unit id="131" translate="yes" xml:space="preserve">
          <source>MONTH</source>
        </trans-unit><trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Month that the flight took place (1-12)</source>
        </trans-unit><trans-unit id="133" translate="yes" xml:space="preserve">
          <source>DAY_OF_MONTH</source>
        </trans-unit><trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Day of the month that the flight took place (1-31)</source>
        </trans-unit><trans-unit id="135" translate="yes" xml:space="preserve">
          <source>DAY_OF_WEEK</source>
        </trans-unit><trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Day of the week that the flight took place (1=Monday, 2=Tuesday, etc.)</source>
        </trans-unit><trans-unit id="137" translate="yes" xml:space="preserve">
          <source>UNIQUE_CARRIER</source>
        </trans-unit><trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Airline carrier code (e.g., DL)</source>
        </trans-unit><trans-unit id="139" translate="yes" xml:space="preserve">
          <source>TAIL_NUM</source>
        </trans-unit><trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Aircraft tail number</source>
        </trans-unit><trans-unit id="141" translate="yes" xml:space="preserve">
          <source>FL_NUM</source>
        </trans-unit><trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Flight number</source>
        </trans-unit><trans-unit id="143" translate="yes" xml:space="preserve">
          <source>ORIGIN_AIRPORT_ID</source>
        </trans-unit><trans-unit id="144" translate="yes" xml:space="preserve">
          <source>ID of the airport of origin</source>
        </trans-unit><trans-unit id="145" translate="yes" xml:space="preserve">
          <source>ORIGIN</source>
        </trans-unit><trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Origin airport code (ATL, DFW, SEA, etc.)</source>
        </trans-unit><trans-unit id="147" translate="yes" xml:space="preserve">
          <source>DEST_AIRPORT_ID</source>
        </trans-unit><trans-unit id="148" translate="yes" xml:space="preserve">
          <source>ID of the destination airport</source>
        </trans-unit><trans-unit id="149" translate="yes" xml:space="preserve">
          <source>DEST</source>
        </trans-unit><trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Destination airport code (ATL, DFW, SEA, etc.)</source>
        </trans-unit><trans-unit id="151" translate="yes" xml:space="preserve">
          <source>CRS_DEP_TIME</source>
        </trans-unit><trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Scheduled departure time</source>
        </trans-unit><trans-unit id="153" translate="yes" xml:space="preserve">
          <source>DEP_TIME</source>
        </trans-unit><trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Actual departure time</source>
        </trans-unit><trans-unit id="155" translate="yes" xml:space="preserve">
          <source>DEP_DELAY</source>
        </trans-unit><trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Number of minutes departure was delayed</source>
        </trans-unit><trans-unit id="157" translate="yes" xml:space="preserve">
          <source>DEP_DEL15</source>
        </trans-unit><trans-unit id="158" translate="yes" xml:space="preserve">
          <source>0=Departure delayed less than 15 minutes, 1=Departure delayed 15 minutes or more</source>
        </trans-unit><trans-unit id="159" translate="yes" xml:space="preserve">
          <source>CRS_ARR_TIME</source>
        </trans-unit><trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Scheduled arrival time</source>
        </trans-unit><trans-unit id="161" translate="yes" xml:space="preserve">
          <source>ARR_TIME</source>
        </trans-unit><trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Actual arrival time</source>
        </trans-unit><trans-unit id="163" translate="yes" xml:space="preserve">
          <source>ARR_DELAY</source>
        </trans-unit><trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Number of minutes flight arrived late</source>
        </trans-unit><trans-unit id="165" translate="yes" xml:space="preserve">
          <source>ARR_DEL15</source>
        </trans-unit><trans-unit id="166" translate="yes" xml:space="preserve">
          <source>0=Arrived less than 15 minutes late, 1=Arrived 15 minutes or more late</source>
        </trans-unit><trans-unit id="167" translate="yes" xml:space="preserve">
          <source>CANCELLED</source>
        </trans-unit><trans-unit id="168" translate="yes" xml:space="preserve">
          <source>0=Flight was not cancelled, 1=Flight was cancelled</source>
        </trans-unit><trans-unit id="169" translate="yes" xml:space="preserve">
          <source>DIVERTED</source>
        </trans-unit><trans-unit id="170" translate="yes" xml:space="preserve">
          <source>0=Flight was not diverted, 1=Flight was diverted</source>
        </trans-unit><trans-unit id="171" translate="yes" xml:space="preserve">
          <source>CRS_ELAPSED_TIME</source>
        </trans-unit><trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Scheduled flight time in minutes</source>
        </trans-unit><trans-unit id="173" translate="yes" xml:space="preserve">
          <source>ACTUAL_ELAPSED_TIME</source>
        </trans-unit><trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Actual flight time in minutes</source>
        </trans-unit><trans-unit id="175" translate="yes" xml:space="preserve">
          <source>DISTANCE</source>
        </trans-unit><trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Distance traveled in miles</source>
        </trans-unit><trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The dataset includes a roughly even distribution of dates throughout the year, which is important because a flight out of Minneapolis is less likely to be delayed due to winter storms in July than it is in January.</source>
        </trans-unit><trans-unit id="178" translate="yes" xml:space="preserve">
          <source>But this dataset is far from being "clean" and ready to use.</source>
        </trans-unit><trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Let's write some Pandas code to clean it up.</source>
        </trans-unit><trans-unit id="180" translate="yes" xml:space="preserve">
          <source>One of the most important aspects of preparing a dataset for use in machine learning is selecting the "feature" columns that are relevant to the outcome you are trying to predict while filtering out columns that do not affect the outcome, could bias it in a negative way, or might produce <bpt id="p1">[</bpt>multicollinearity<ept id="p1">](https://en.wikipedia.org/wiki/Multicollinearity)</ept>.</source>
        </trans-unit><trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Another important task is to eliminate missing values, either by deleting the rows or columns containing them or replacing them with meaningful values.</source>
        </trans-unit><trans-unit id="182" translate="yes" xml:space="preserve">
          <source>In this exercise, you will eliminate extraneous columns and replace missing values in the remaining columns.</source>
        </trans-unit><trans-unit id="183" translate="yes" xml:space="preserve">
          <source>One of the first things data scientists typically look for in a dataset is missing values.</source>
        </trans-unit><trans-unit id="184" translate="yes" xml:space="preserve">
          <source>There's an easy way to check for missing values in Pandas.</source>
        </trans-unit><trans-unit id="185" translate="yes" xml:space="preserve">
          <source>To demonstrate, execute the following code in a cell at the end of the notebook:</source>
        </trans-unit><trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Confirm that the output is "True," which indicates that there is at least one missing value somewhere in the dataset.</source>
        </trans-unit><trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Checking for missing values</source>
        </trans-unit><trans-unit id="188" translate="yes" xml:space="preserve">
          <source><bpt id="p1">_</bpt>Checking for missing values<ept id="p1">_</ept></source>
        </trans-unit><trans-unit id="189" translate="yes" xml:space="preserve">
          <source>The next step is to find out where the missing values are.</source>
        </trans-unit><trans-unit id="190" translate="yes" xml:space="preserve">
          <source>To do so, execute the following code:</source>
        </trans-unit><trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Confirm that you see the following output listing a count of missing values in each column:</source>
        </trans-unit><trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Number of missing values in each column</source>
        </trans-unit><trans-unit id="193" translate="yes" xml:space="preserve">
          <source><bpt id="p1">_</bpt>Number of  missing values in each column<ept id="p1">_</ept></source>
        </trans-unit><trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Curiously, the 26th column ("Unnamed: 25") contains 11,231 missing values, which equals the number of rows in the dataset.</source>
        </trans-unit><trans-unit id="195" translate="yes" xml:space="preserve">
          <source>This column was mistakenly created because the CSV file that you imported contains a comma at the end of each line.</source>
        </trans-unit><trans-unit id="196" translate="yes" xml:space="preserve">
          <source>To eliminate that column, add the following code to the notebook and execute it:</source>
        </trans-unit><trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Inspect the output and confirm that column 26 has disappeared from the DataFrame:</source>
        </trans-unit><trans-unit id="198" translate="yes" xml:space="preserve">
          <source>The DataFrame with column 26 removed</source>
        </trans-unit><trans-unit id="199" translate="yes" xml:space="preserve">
          <source><bpt id="p1">_</bpt>The DataFrame with column 26 removed<ept id="p1">_</ept></source>
        </trans-unit><trans-unit id="200" translate="yes" xml:space="preserve">
          <source>The DataFrame still contains a lot of missing values, but some of them aren't useful because the columns containing them are not relevant to the model that you are building.</source>
        </trans-unit><trans-unit id="201" translate="yes" xml:space="preserve">
          <source>The goal of that model is to predict whether a flight you are considering booking is likely to arrive on time.</source>
        </trans-unit><trans-unit id="202" translate="yes" xml:space="preserve">
          <source>If you know that the flight is likely to be late, you might choose to book another flight.</source>
        </trans-unit><trans-unit id="203" translate="yes" xml:space="preserve">
          <source>The next step, therefore, is to filter the dataset to eliminate columns that aren't relevant to a predictive model.</source>
        </trans-unit><trans-unit id="204" translate="yes" xml:space="preserve">
          <source>For example, the aircraft's tail number probably has little bearing on whether a flight will arrive on time, and at the time you book a ticket, you have no way of knowing whether a flight will be cancelled, diverted, or delayed.</source>
        </trans-unit><trans-unit id="205" translate="yes" xml:space="preserve">
          <source>By contrast, the scheduled departure time could have a <bpt id="p1">*</bpt>lot<ept id="p1">*</ept> to do with on-time arrivals.</source>
        </trans-unit><trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Because of the hub-and-spoke system used by most airlines, morning flights tend to be on time more often than afternoon or evening flights.</source>
        </trans-unit><trans-unit id="207" translate="yes" xml:space="preserve">
          <source>And at some major airports, traffic stacks up during the day, increasing the likelihood that later flights will be delayed.</source>
        </trans-unit><trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Pandas provides an easy way to filter out columns you don't want.</source>
        </trans-unit><trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Execute the following code in a new cell at the end of the notebook:</source>
        </trans-unit><trans-unit id="210" translate="yes" xml:space="preserve">
          <source>The output shows that the DataFrame now includes only the columns that are relevant to the model, and that the number of missing values is greatly reduced:</source>
        </trans-unit><trans-unit id="211" translate="yes" xml:space="preserve">
          <source>The filtered DataFrame</source>
        </trans-unit><trans-unit id="212" translate="yes" xml:space="preserve">
          <source><bpt id="p1">_</bpt>The filtered DataFrame<ept id="p1">_</ept></source>
        </trans-unit><trans-unit id="213" translate="yes" xml:space="preserve">
          <source>The only column that now contains missing values is the ARR_DEL15 column, which uses 0s to identify flights that arrived on time and 1s for flights that didn't.</source>
        </trans-unit><trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Use the following code to show the first five rows with missing values:</source>
        </trans-unit><trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Pandas represents missing values with <ph id="ph1">`NaN`</ph>, which stands for <bpt id="p1">*</bpt>Not a Number<ept id="p1">*</ept>.</source>
        </trans-unit><trans-unit id="216" translate="yes" xml:space="preserve">
          <source>The output shows that these rows are indeed missing values in the ARR_DEL15 column:</source>
        </trans-unit><trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Rows with missing values</source>
        </trans-unit><trans-unit id="218" translate="yes" xml:space="preserve">
          <source><bpt id="p1">_</bpt>Rows with missing values<ept id="p1">_</ept></source>
        </trans-unit><trans-unit id="219" translate="yes" xml:space="preserve">
          <source>The reason these rows are missing ARR_DEL15 values is that they all correspond to flights that were canceled or diverted.</source>
        </trans-unit><trans-unit id="220" translate="yes" xml:space="preserve">
          <source>You could call <bpt id="p1">[</bpt>dropna<ept id="p1">](https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.dropna.html)</ept> on the DataFrame to remove these rows.</source>
        </trans-unit><trans-unit id="221" translate="yes" xml:space="preserve">
          <source>But since a flight that is canceled or diverted to another airport could be considered "late," let's use the <bpt id="p1">[</bpt>fillna<ept id="p1">](https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.fillna.html)</ept> method to replace the missing values with 1s.</source>
        </trans-unit><trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Use the following code to replace missing values in the ARR_DEL15 column with 1s and display rows 177 through 184:</source>
        </trans-unit><trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Confirm that the <ph id="ph1">`NaN`</ph>s in rows 177, 179, and 184 were replaced with 1s indicating that the flights arrived late:</source>
        </trans-unit><trans-unit id="224" translate="yes" xml:space="preserve">
          <source>NaNs replaced with 1s</source>
        </trans-unit><trans-unit id="225" translate="yes" xml:space="preserve">
          <source><bpt id="p1">_</bpt>NaNs replaced with 1s<ept id="p1">_</ept></source>
        </trans-unit><trans-unit id="226" translate="yes" xml:space="preserve">
          <source>The dataset is now "clean" in the sense that missing values have been replaced and the list of columns has been narrowed to those most relevant to the model.</source>
        </trans-unit><trans-unit id="227" translate="yes" xml:space="preserve">
          <source>But you're not finished yet.</source>
        </trans-unit><trans-unit id="228" translate="yes" xml:space="preserve">
          <source>There is more to do to prepare the dataset for use in machine learning.</source>
        </trans-unit><trans-unit id="229" translate="yes" xml:space="preserve">
          <source>The CRS_DEP_TIME column of the dataset you are using represents scheduled departure times.</source>
        </trans-unit><trans-unit id="230" translate="yes" xml:space="preserve">
          <source>The granularity of the numbers in this column — it contains more than 500 unique values — could have a negative impact on accuracy in a machine-learning model.</source>
        </trans-unit><trans-unit id="231" translate="yes" xml:space="preserve">
          <source>This can be resolved using a technique called <bpt id="p1">[</bpt>binning<ept id="p1">](http://data-informed.com/enhance-machine-learning-with-standardizing-binning-reducing/)</ept> or quantization.</source>
        </trans-unit><trans-unit id="232" translate="yes" xml:space="preserve">
          <source>What if you divided each number in this column by 100 and rounded down to the nearest integer?</source>
        </trans-unit><trans-unit id="233" translate="yes" xml:space="preserve">
          <source>1030 would become 10, 1925 would become 19, and so on, and you would be left with a maximum of 24 discrete values in this column.</source>
        </trans-unit><trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Intuitively, it makes sense, because it probably doesn't matter much whether a flight leaves at 10:30 a.m.</source>
        </trans-unit><trans-unit id="235" translate="yes" xml:space="preserve">
          <source>or 10:40 a.m.</source>
        </trans-unit><trans-unit id="236" translate="yes" xml:space="preserve">
          <source>It matters a great deal whether it leaves at 10:30 a.m.</source>
        </trans-unit><trans-unit id="237" translate="yes" xml:space="preserve">
          <source>or 5:30 p.m.</source>
        </trans-unit><trans-unit id="238" translate="yes" xml:space="preserve">
          <source>In addition, the dataset's ORIGIN and DEST columns contain airport codes that represent categorical machine-learning values.</source>
        </trans-unit><trans-unit id="239" translate="yes" xml:space="preserve">
          <source>These columns need to be converted into discrete columns containing indicator variables, sometimes known as "dummy" variables.</source>
        </trans-unit><trans-unit id="240" translate="yes" xml:space="preserve">
          <source>In other words, the ORIGIN column, which contains five airport codes, needs to be converted into five columns, one per airport, with each column containing 1s and 0s indicating whether a flight originated at the airport that the column represents.</source>
        </trans-unit><trans-unit id="241" translate="yes" xml:space="preserve">
          <source>The DEST column needs to be handled in a similar manner.</source>
        </trans-unit><trans-unit id="242" translate="yes" xml:space="preserve">
          <source>In this exercise, you will "bin" the departure times in the CRS_DEP_TIME column and use Pandas' <bpt id="p1">[</bpt>get_dummies<ept id="p1">](https://pandas.pydata.org/pandas-docs/stable/generated/pandas.get_dummies.html)</ept> method to create indicator columns from the ORIGIN and DEST columns.</source>
        </trans-unit><trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Use the following command to display the first five rows of the DataFrame:</source>
        </trans-unit><trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Observe that the CRS_DEP_TIME column contains values from 0 to 2359 representing military times.</source>
        </trans-unit><trans-unit id="245" translate="yes" xml:space="preserve">
          <source>The DataFrame with unbinned departure times</source>
        </trans-unit><trans-unit id="246" translate="yes" xml:space="preserve">
          <source><bpt id="p1">_</bpt>The DataFrame with unbinned departure times<ept id="p1">_</ept></source>
        </trans-unit><trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Use the following statements to bin the departure times:</source>
        </trans-unit><trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Confirm that the numbers in the CRS_DEP_TIME column now fall in the range 0 to 23:</source>
        </trans-unit><trans-unit id="249" translate="yes" xml:space="preserve">
          <source>The DataFrame with binned departure times</source>
        </trans-unit><trans-unit id="250" translate="yes" xml:space="preserve">
          <source><bpt id="p1">_</bpt>The DataFrame with binned departure times<ept id="p1">_</ept></source>
        </trans-unit><trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Now use the following statements to generate indicator columns from the ORIGIN and DEST columns, while dropping the ORIGIN and DEST columns themselves:</source>
        </trans-unit><trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Examine the resulting DataFrame and observe that the ORIGIN and DEST columns were replaced with columns corresponding to the airport codes present in the original columns.</source>
        </trans-unit><trans-unit id="253" translate="yes" xml:space="preserve">
          <source>The new columns have 1s and 0s indicating whether a given flight originated at or was destined for the corresponding airport.</source>
        </trans-unit><trans-unit id="254" translate="yes" xml:space="preserve">
          <source>The DataFrame with indicator columns</source>
        </trans-unit><trans-unit id="255" translate="yes" xml:space="preserve">
          <source><bpt id="p1">_</bpt>The DataFrame with indicator columns<ept id="p1">_</ept></source>
        </trans-unit><trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Use the <bpt id="p1">**</bpt>File<ept id="p1">**</ept><ph id="ph1"> -&gt; </ph><bpt id="p2">**</bpt>Save and Checkpoint<ept id="p2">**</ept> command to save the notebook.</source>
        </trans-unit><trans-unit id="257" translate="yes" xml:space="preserve">
          <source>The dataset looks very different than it did at the start, but it is now optimized for use in machine learning.</source>
        </trans-unit></group></body></file></xliff>